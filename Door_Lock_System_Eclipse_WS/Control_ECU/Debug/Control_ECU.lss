
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  000026e0  00002774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080017a  0080017a  0000288e  2**0
                  ALLOC
  3 .stab         00002a54  00000000  00000000  00002890  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016dc  00000000  00000000  000052e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000069c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b11  00000000  00000000  00006c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ebc  00000000  00000000  000087a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5b  00000000  00000000  00009664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a4c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b1  00000000  00000000  0000a620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000836  00000000  00000000  0000a8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__vector_4>
      14:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__vector_9>
      28:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__vector_10>
      2c:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 0b 	call	0x1774	; 0x1774 <main>
      8a:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__epilogue_restores__+0x18>

00000692 <__fixsfsi>:
     692:	ac e0       	ldi	r26, 0x0C	; 12
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__prologue_saves__+0x20>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	be 01       	movw	r22, r28
     6ac:	6b 5f       	subi	r22, 0xFB	; 251
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	61 f1       	breq	.+88     	; 0x712 <__fixsfsi+0x80>
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	50 f1       	brcs	.+84     	; 0x712 <__fixsfsi+0x80>
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	21 f4       	brne	.+8      	; 0x6ca <__fixsfsi+0x38>
     6c2:	8e 81       	ldd	r24, Y+6	; 0x06
     6c4:	88 23       	and	r24, r24
     6c6:	51 f1       	breq	.+84     	; 0x71c <__fixsfsi+0x8a>
     6c8:	2e c0       	rjmp	.+92     	; 0x726 <__fixsfsi+0x94>
     6ca:	2f 81       	ldd	r18, Y+7	; 0x07
     6cc:	38 85       	ldd	r19, Y+8	; 0x08
     6ce:	37 fd       	sbrc	r19, 7
     6d0:	20 c0       	rjmp	.+64     	; 0x712 <__fixsfsi+0x80>
     6d2:	6e 81       	ldd	r22, Y+6	; 0x06
     6d4:	2f 31       	cpi	r18, 0x1F	; 31
     6d6:	31 05       	cpc	r19, r1
     6d8:	1c f0       	brlt	.+6      	; 0x6e0 <__fixsfsi+0x4e>
     6da:	66 23       	and	r22, r22
     6dc:	f9 f0       	breq	.+62     	; 0x71c <__fixsfsi+0x8a>
     6de:	23 c0       	rjmp	.+70     	; 0x726 <__fixsfsi+0x94>
     6e0:	8e e1       	ldi	r24, 0x1E	; 30
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	29 85       	ldd	r18, Y+9	; 0x09
     6ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ec:	4b 85       	ldd	r20, Y+11	; 0x0b
     6ee:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__fixsfsi+0x68>
     6f2:	56 95       	lsr	r21
     6f4:	47 95       	ror	r20
     6f6:	37 95       	ror	r19
     6f8:	27 95       	ror	r18
     6fa:	8a 95       	dec	r24
     6fc:	d2 f7       	brpl	.-12     	; 0x6f2 <__fixsfsi+0x60>
     6fe:	66 23       	and	r22, r22
     700:	b1 f0       	breq	.+44     	; 0x72e <__fixsfsi+0x9c>
     702:	50 95       	com	r21
     704:	40 95       	com	r20
     706:	30 95       	com	r19
     708:	21 95       	neg	r18
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	4f 4f       	sbci	r20, 0xFF	; 255
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	0e c0       	rjmp	.+28     	; 0x72e <__fixsfsi+0x9c>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	09 c0       	rjmp	.+18     	; 0x72e <__fixsfsi+0x9c>
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	3f ef       	ldi	r19, 0xFF	; 255
     720:	4f ef       	ldi	r20, 0xFF	; 255
     722:	5f e7       	ldi	r21, 0x7F	; 127
     724:	04 c0       	rjmp	.+8      	; 0x72e <__fixsfsi+0x9c>
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e8       	ldi	r21, 0x80	; 128
     72e:	b9 01       	movw	r22, r18
     730:	ca 01       	movw	r24, r20
     732:	2c 96       	adiw	r28, 0x0c	; 12
     734:	e2 e0       	ldi	r30, 0x02	; 2
     736:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__epilogue_restores__+0x20>

0000073a <__floatunsisf>:
     73a:	a8 e0       	ldi	r26, 0x08	; 8
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e3 ea       	ldi	r30, 0xA3	; 163
     740:	f3 e0       	ldi	r31, 0x03	; 3
     742:	0c 94 36 13 	jmp	0x266c	; 0x266c <__prologue_saves__+0x10>
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	61 15       	cp	r22, r1
     74c:	71 05       	cpc	r23, r1
     74e:	81 05       	cpc	r24, r1
     750:	91 05       	cpc	r25, r1
     752:	19 f4       	brne	.+6      	; 0x75a <__floatunsisf+0x20>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	60 c0       	rjmp	.+192    	; 0x81a <__floatunsisf+0xe0>
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	8e e1       	ldi	r24, 0x1E	; 30
     760:	c8 2e       	mov	r12, r24
     762:	d1 2c       	mov	r13, r1
     764:	dc 82       	std	Y+4, r13	; 0x04
     766:	cb 82       	std	Y+3, r12	; 0x03
     768:	ed 82       	std	Y+5, r14	; 0x05
     76a:	fe 82       	std	Y+6, r15	; 0x06
     76c:	0f 83       	std	Y+7, r16	; 0x07
     76e:	18 87       	std	Y+8, r17	; 0x08
     770:	c8 01       	movw	r24, r16
     772:	b7 01       	movw	r22, r14
     774:	0e 94 16 04 	call	0x82c	; 0x82c <__clzsi2>
     778:	fc 01       	movw	r30, r24
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	f7 ff       	sbrs	r31, 7
     77e:	3b c0       	rjmp	.+118    	; 0x7f6 <__floatunsisf+0xbc>
     780:	22 27       	eor	r18, r18
     782:	33 27       	eor	r19, r19
     784:	2e 1b       	sub	r18, r30
     786:	3f 0b       	sbc	r19, r31
     788:	57 01       	movw	r10, r14
     78a:	68 01       	movw	r12, r16
     78c:	02 2e       	mov	r0, r18
     78e:	04 c0       	rjmp	.+8      	; 0x798 <__floatunsisf+0x5e>
     790:	d6 94       	lsr	r13
     792:	c7 94       	ror	r12
     794:	b7 94       	ror	r11
     796:	a7 94       	ror	r10
     798:	0a 94       	dec	r0
     79a:	d2 f7       	brpl	.-12     	; 0x790 <__floatunsisf+0x56>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__floatunsisf+0x7c>
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	2a 95       	dec	r18
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__floatunsisf+0x74>
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 09       	sbc	r26, r1
     7be:	b1 09       	sbc	r27, r1
     7c0:	8e 21       	and	r24, r14
     7c2:	9f 21       	and	r25, r15
     7c4:	a0 23       	and	r26, r16
     7c6:	b1 23       	and	r27, r17
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	a1 05       	cpc	r26, r1
     7cc:	b1 05       	cpc	r27, r1
     7ce:	21 f0       	breq	.+8      	; 0x7d8 <__floatunsisf+0x9e>
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	4a 29       	or	r20, r10
     7da:	5b 29       	or	r21, r11
     7dc:	6c 29       	or	r22, r12
     7de:	7d 29       	or	r23, r13
     7e0:	4d 83       	std	Y+5, r20	; 0x05
     7e2:	5e 83       	std	Y+6, r21	; 0x06
     7e4:	6f 83       	std	Y+7, r22	; 0x07
     7e6:	78 87       	std	Y+8, r23	; 0x08
     7e8:	8e e1       	ldi	r24, 0x1E	; 30
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8e 1b       	sub	r24, r30
     7ee:	9f 0b       	sbc	r25, r31
     7f0:	9c 83       	std	Y+4, r25	; 0x04
     7f2:	8b 83       	std	Y+3, r24	; 0x03
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <__floatunsisf+0xe0>
     7f6:	30 97       	sbiw	r30, 0x00	; 0
     7f8:	81 f0       	breq	.+32     	; 0x81a <__floatunsisf+0xe0>
     7fa:	0e 2e       	mov	r0, r30
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <__floatunsisf+0xcc>
     7fe:	ee 0c       	add	r14, r14
     800:	ff 1c       	adc	r15, r15
     802:	00 1f       	adc	r16, r16
     804:	11 1f       	adc	r17, r17
     806:	0a 94       	dec	r0
     808:	d2 f7       	brpl	.-12     	; 0x7fe <__floatunsisf+0xc4>
     80a:	ed 82       	std	Y+5, r14	; 0x05
     80c:	fe 82       	std	Y+6, r15	; 0x06
     80e:	0f 83       	std	Y+7, r16	; 0x07
     810:	18 87       	std	Y+8, r17	; 0x08
     812:	ce 1a       	sub	r12, r30
     814:	df 0a       	sbc	r13, r31
     816:	dc 82       	std	Y+4, r13	; 0x04
     818:	cb 82       	std	Y+3, r12	; 0x03
     81a:	1a 82       	std	Y+2, r1	; 0x02
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     824:	28 96       	adiw	r28, 0x08	; 8
     826:	ea e0       	ldi	r30, 0x0A	; 10
     828:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__epilogue_restores__+0x10>

0000082c <__clzsi2>:
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	7b 01       	movw	r14, r22
     836:	8c 01       	movw	r16, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	e8 16       	cp	r14, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	f8 06       	cpc	r15, r24
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 07       	cpc	r16, r24
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	18 07       	cpc	r17, r24
     848:	88 f4       	brcc	.+34     	; 0x86c <__stack+0xd>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	e8 16       	cp	r14, r24
     84e:	f1 04       	cpc	r15, r1
     850:	01 05       	cpc	r16, r1
     852:	11 05       	cpc	r17, r1
     854:	31 f0       	breq	.+12     	; 0x862 <__stack+0x3>
     856:	28 f0       	brcs	.+10     	; 0x862 <__stack+0x3>
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a0 e0       	ldi	r26, 0x00	; 0
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	17 c0       	rjmp	.+46     	; 0x890 <__stack+0x31>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	12 c0       	rjmp	.+36     	; 0x890 <__stack+0x31>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	e8 16       	cp	r14, r24
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	f8 06       	cpc	r15, r24
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	08 07       	cpc	r16, r24
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	18 07       	cpc	r17, r24
     87c:	28 f0       	brcs	.+10     	; 0x888 <__stack+0x29>
     87e:	88 e1       	ldi	r24, 0x18	; 24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	04 c0       	rjmp	.+8      	; 0x890 <__stack+0x31>
     888:	80 e1       	ldi	r24, 0x10	; 16
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	20 e2       	ldi	r18, 0x20	; 32
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	28 1b       	sub	r18, r24
     89a:	39 0b       	sbc	r19, r25
     89c:	4a 0b       	sbc	r20, r26
     89e:	5b 0b       	sbc	r21, r27
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	16 95       	lsr	r17
     8a4:	07 95       	ror	r16
     8a6:	f7 94       	ror	r15
     8a8:	e7 94       	ror	r14
     8aa:	8a 95       	dec	r24
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <__stack+0x43>
     8ae:	f7 01       	movw	r30, r14
     8b0:	e8 59       	subi	r30, 0x98	; 152
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	80 81       	ld	r24, Z
     8b6:	28 1b       	sub	r18, r24
     8b8:	31 09       	sbc	r19, r1
     8ba:	41 09       	sbc	r20, r1
     8bc:	51 09       	sbc	r21, r1
     8be:	c9 01       	movw	r24, r18
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <__pack_f>:
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	fc 01       	movw	r30, r24
     8d6:	e4 80       	ldd	r14, Z+4	; 0x04
     8d8:	f5 80       	ldd	r15, Z+5	; 0x05
     8da:	06 81       	ldd	r16, Z+6	; 0x06
     8dc:	17 81       	ldd	r17, Z+7	; 0x07
     8de:	d1 80       	ldd	r13, Z+1	; 0x01
     8e0:	80 81       	ld	r24, Z
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	48 f4       	brcc	.+18     	; 0x8f8 <__pack_f+0x2e>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a0 e1       	ldi	r26, 0x10	; 16
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	e8 2a       	or	r14, r24
     8f0:	f9 2a       	or	r15, r25
     8f2:	0a 2b       	or	r16, r26
     8f4:	1b 2b       	or	r17, r27
     8f6:	a5 c0       	rjmp	.+330    	; 0xa42 <__pack_f+0x178>
     8f8:	84 30       	cpi	r24, 0x04	; 4
     8fa:	09 f4       	brne	.+2      	; 0x8fe <__pack_f+0x34>
     8fc:	9f c0       	rjmp	.+318    	; 0xa3c <__pack_f+0x172>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	21 f4       	brne	.+8      	; 0x90a <__pack_f+0x40>
     902:	ee 24       	eor	r14, r14
     904:	ff 24       	eor	r15, r15
     906:	87 01       	movw	r16, r14
     908:	05 c0       	rjmp	.+10     	; 0x914 <__pack_f+0x4a>
     90a:	e1 14       	cp	r14, r1
     90c:	f1 04       	cpc	r15, r1
     90e:	01 05       	cpc	r16, r1
     910:	11 05       	cpc	r17, r1
     912:	19 f4       	brne	.+6      	; 0x91a <__pack_f+0x50>
     914:	e0 e0       	ldi	r30, 0x00	; 0
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	96 c0       	rjmp	.+300    	; 0xa46 <__pack_f+0x17c>
     91a:	62 81       	ldd	r22, Z+2	; 0x02
     91c:	73 81       	ldd	r23, Z+3	; 0x03
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	62 38       	cpi	r22, 0x82	; 130
     922:	79 07       	cpc	r23, r25
     924:	0c f0       	brlt	.+2      	; 0x928 <__pack_f+0x5e>
     926:	5b c0       	rjmp	.+182    	; 0x9de <__pack_f+0x114>
     928:	22 e8       	ldi	r18, 0x82	; 130
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	26 1b       	sub	r18, r22
     92e:	37 0b       	sbc	r19, r23
     930:	2a 31       	cpi	r18, 0x1A	; 26
     932:	31 05       	cpc	r19, r1
     934:	2c f0       	brlt	.+10     	; 0x940 <__pack_f+0x76>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	2a c0       	rjmp	.+84     	; 0x994 <__pack_f+0xca>
     940:	b8 01       	movw	r22, r16
     942:	a7 01       	movw	r20, r14
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__pack_f+0x86>
     948:	76 95       	lsr	r23
     94a:	67 95       	ror	r22
     94c:	57 95       	ror	r21
     94e:	47 95       	ror	r20
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__pack_f+0x7e>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	04 c0       	rjmp	.+8      	; 0x966 <__pack_f+0x9c>
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	aa 1f       	adc	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	2a 95       	dec	r18
     968:	d2 f7       	brpl	.-12     	; 0x95e <__pack_f+0x94>
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	a1 09       	sbc	r26, r1
     96e:	b1 09       	sbc	r27, r1
     970:	8e 21       	and	r24, r14
     972:	9f 21       	and	r25, r15
     974:	a0 23       	and	r26, r16
     976:	b1 23       	and	r27, r17
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	21 f0       	breq	.+8      	; 0x988 <__pack_f+0xbe>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	9a 01       	movw	r18, r20
     98a:	ab 01       	movw	r20, r22
     98c:	28 2b       	or	r18, r24
     98e:	39 2b       	or	r19, r25
     990:	4a 2b       	or	r20, r26
     992:	5b 2b       	or	r21, r27
     994:	da 01       	movw	r26, r20
     996:	c9 01       	movw	r24, r18
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	a0 70       	andi	r26, 0x00	; 0
     99e:	b0 70       	andi	r27, 0x00	; 0
     9a0:	80 34       	cpi	r24, 0x40	; 64
     9a2:	91 05       	cpc	r25, r1
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	39 f4       	brne	.+14     	; 0x9b8 <__pack_f+0xee>
     9aa:	27 ff       	sbrs	r18, 7
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__pack_f+0xf6>
     9ae:	20 5c       	subi	r18, 0xC0	; 192
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	4f 4f       	sbci	r20, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__pack_f+0xf6>
     9b8:	21 5c       	subi	r18, 0xC1	; 193
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	4f 4f       	sbci	r20, 0xFF	; 255
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	e0 e0       	ldi	r30, 0x00	; 0
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	20 30       	cpi	r18, 0x00	; 0
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	3a 07       	cpc	r19, r26
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	4a 07       	cpc	r20, r26
     9ce:	a0 e4       	ldi	r26, 0x40	; 64
     9d0:	5a 07       	cpc	r21, r26
     9d2:	10 f0       	brcs	.+4      	; 0x9d8 <__pack_f+0x10e>
     9d4:	e1 e0       	ldi	r30, 0x01	; 1
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	79 01       	movw	r14, r18
     9da:	8a 01       	movw	r16, r20
     9dc:	27 c0       	rjmp	.+78     	; 0xa2c <__pack_f+0x162>
     9de:	60 38       	cpi	r22, 0x80	; 128
     9e0:	71 05       	cpc	r23, r1
     9e2:	64 f5       	brge	.+88     	; 0xa3c <__pack_f+0x172>
     9e4:	fb 01       	movw	r30, r22
     9e6:	e1 58       	subi	r30, 0x81	; 129
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ea:	d8 01       	movw	r26, r16
     9ec:	c7 01       	movw	r24, r14
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	a0 70       	andi	r26, 0x00	; 0
     9f4:	b0 70       	andi	r27, 0x00	; 0
     9f6:	80 34       	cpi	r24, 0x40	; 64
     9f8:	91 05       	cpc	r25, r1
     9fa:	a1 05       	cpc	r26, r1
     9fc:	b1 05       	cpc	r27, r1
     9fe:	39 f4       	brne	.+14     	; 0xa0e <__pack_f+0x144>
     a00:	e7 fe       	sbrs	r14, 7
     a02:	0d c0       	rjmp	.+26     	; 0xa1e <__pack_f+0x154>
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x14c>
     a0e:	8f e3       	ldi	r24, 0x3F	; 63
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	e8 0e       	add	r14, r24
     a18:	f9 1e       	adc	r15, r25
     a1a:	0a 1f       	adc	r16, r26
     a1c:	1b 1f       	adc	r17, r27
     a1e:	17 ff       	sbrs	r17, 7
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <__pack_f+0x162>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	31 96       	adiw	r30, 0x01	; 1
     a2c:	87 e0       	ldi	r24, 0x07	; 7
     a2e:	16 95       	lsr	r17
     a30:	07 95       	ror	r16
     a32:	f7 94       	ror	r15
     a34:	e7 94       	ror	r14
     a36:	8a 95       	dec	r24
     a38:	d1 f7       	brne	.-12     	; 0xa2e <__pack_f+0x164>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <__pack_f+0x17c>
     a3c:	ee 24       	eor	r14, r14
     a3e:	ff 24       	eor	r15, r15
     a40:	87 01       	movw	r16, r14
     a42:	ef ef       	ldi	r30, 0xFF	; 255
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	6e 2f       	mov	r22, r30
     a48:	67 95       	ror	r22
     a4a:	66 27       	eor	r22, r22
     a4c:	67 95       	ror	r22
     a4e:	90 2f       	mov	r25, r16
     a50:	9f 77       	andi	r25, 0x7F	; 127
     a52:	d7 94       	ror	r13
     a54:	dd 24       	eor	r13, r13
     a56:	d7 94       	ror	r13
     a58:	8e 2f       	mov	r24, r30
     a5a:	86 95       	lsr	r24
     a5c:	49 2f       	mov	r20, r25
     a5e:	46 2b       	or	r20, r22
     a60:	58 2f       	mov	r21, r24
     a62:	5d 29       	or	r21, r13
     a64:	b7 01       	movw	r22, r14
     a66:	ca 01       	movw	r24, r20
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	08 95       	ret

00000a74 <__unpack_f>:
     a74:	fc 01       	movw	r30, r24
     a76:	db 01       	movw	r26, r22
     a78:	40 81       	ld	r20, Z
     a7a:	51 81       	ldd	r21, Z+1	; 0x01
     a7c:	22 81       	ldd	r18, Z+2	; 0x02
     a7e:	62 2f       	mov	r22, r18
     a80:	6f 77       	andi	r22, 0x7F	; 127
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	22 1f       	adc	r18, r18
     a86:	22 27       	eor	r18, r18
     a88:	22 1f       	adc	r18, r18
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	89 2f       	mov	r24, r25
     a8e:	88 0f       	add	r24, r24
     a90:	82 2b       	or	r24, r18
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	99 1f       	adc	r25, r25
     a98:	99 27       	eor	r25, r25
     a9a:	99 1f       	adc	r25, r25
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	9c 93       	st	X, r25
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	21 15       	cp	r18, r1
     aa4:	31 05       	cpc	r19, r1
     aa6:	a9 f5       	brne	.+106    	; 0xb12 <__unpack_f+0x9e>
     aa8:	41 15       	cp	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	61 05       	cpc	r22, r1
     aae:	71 05       	cpc	r23, r1
     ab0:	11 f4       	brne	.+4      	; 0xab6 <__unpack_f+0x42>
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	37 c0       	rjmp	.+110    	; 0xb24 <__unpack_f+0xb0>
     ab6:	82 e8       	ldi	r24, 0x82	; 130
     ab8:	9f ef       	ldi	r25, 0xFF	; 255
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	9c 93       	st	X, r25
     abe:	8e 93       	st	-X, r24
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	9a 01       	movw	r18, r20
     ac4:	ab 01       	movw	r20, r22
     ac6:	67 e0       	ldi	r22, 0x07	; 7
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	44 1f       	adc	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	6a 95       	dec	r22
     ad2:	d1 f7       	brne	.-12     	; 0xac8 <__unpack_f+0x54>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	8c 93       	st	X, r24
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__unpack_f+0x80>
     ada:	22 0f       	add	r18, r18
     adc:	33 1f       	adc	r19, r19
     ade:	44 1f       	adc	r20, r20
     ae0:	55 1f       	adc	r21, r21
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	8d 91       	ld	r24, X+
     ae6:	9c 91       	ld	r25, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	13 96       	adiw	r26, 0x03	; 3
     aee:	9c 93       	st	X, r25
     af0:	8e 93       	st	-X, r24
     af2:	12 97       	sbiw	r26, 0x02	; 2
     af4:	20 30       	cpi	r18, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	38 07       	cpc	r19, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	48 07       	cpc	r20, r24
     afe:	80 e4       	ldi	r24, 0x40	; 64
     b00:	58 07       	cpc	r21, r24
     b02:	58 f3       	brcs	.-42     	; 0xada <__unpack_f+0x66>
     b04:	14 96       	adiw	r26, 0x04	; 4
     b06:	2d 93       	st	X+, r18
     b08:	3d 93       	st	X+, r19
     b0a:	4d 93       	st	X+, r20
     b0c:	5c 93       	st	X, r21
     b0e:	17 97       	sbiw	r26, 0x07	; 7
     b10:	08 95       	ret
     b12:	2f 3f       	cpi	r18, 0xFF	; 255
     b14:	31 05       	cpc	r19, r1
     b16:	79 f4       	brne	.+30     	; 0xb36 <__unpack_f+0xc2>
     b18:	41 15       	cp	r20, r1
     b1a:	51 05       	cpc	r21, r1
     b1c:	61 05       	cpc	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__unpack_f+0xb4>
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	8c 93       	st	X, r24
     b26:	08 95       	ret
     b28:	64 ff       	sbrs	r22, 4
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__unpack_f+0xbe>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	8c 93       	st	X, r24
     b30:	12 c0       	rjmp	.+36     	; 0xb56 <__unpack_f+0xe2>
     b32:	1c 92       	st	X, r1
     b34:	10 c0       	rjmp	.+32     	; 0xb56 <__unpack_f+0xe2>
     b36:	2f 57       	subi	r18, 0x7F	; 127
     b38:	30 40       	sbci	r19, 0x00	; 0
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	3c 93       	st	X, r19
     b3e:	2e 93       	st	-X, r18
     b40:	12 97       	sbiw	r26, 0x02	; 2
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	8c 93       	st	X, r24
     b46:	87 e0       	ldi	r24, 0x07	; 7
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	66 1f       	adc	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	8a 95       	dec	r24
     b52:	d1 f7       	brne	.-12     	; 0xb48 <__unpack_f+0xd4>
     b54:	70 64       	ori	r23, 0x40	; 64
     b56:	14 96       	adiw	r26, 0x04	; 4
     b58:	4d 93       	st	X+, r20
     b5a:	5d 93       	st	X+, r21
     b5c:	6d 93       	st	X+, r22
     b5e:	7c 93       	st	X, r23
     b60:	17 97       	sbiw	r26, 0x07	; 7
     b62:	08 95       	ret

00000b64 <__fpcmp_parts_f>:
     b64:	1f 93       	push	r17
     b66:	dc 01       	movw	r26, r24
     b68:	fb 01       	movw	r30, r22
     b6a:	9c 91       	ld	r25, X
     b6c:	92 30       	cpi	r25, 0x02	; 2
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <__fpcmp_parts_f+0xe>
     b70:	47 c0       	rjmp	.+142    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b72:	80 81       	ld	r24, Z
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	08 f4       	brcc	.+2      	; 0xb7a <__fpcmp_parts_f+0x16>
     b78:	43 c0       	rjmp	.+134    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b7a:	94 30       	cpi	r25, 0x04	; 4
     b7c:	51 f4       	brne	.+20     	; 0xb92 <__fpcmp_parts_f+0x2e>
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	1c 91       	ld	r17, X
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	99 f5       	brne	.+102    	; 0xbec <__fpcmp_parts_f+0x88>
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	68 2f       	mov	r22, r24
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	61 1b       	sub	r22, r17
     b8e:	71 09       	sbc	r23, r1
     b90:	3f c0       	rjmp	.+126    	; 0xc10 <__fpcmp_parts_f+0xac>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	21 f0       	breq	.+8      	; 0xb9e <__fpcmp_parts_f+0x3a>
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	31 f4       	brne	.+12     	; 0xba6 <__fpcmp_parts_f+0x42>
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	b9 f1       	breq	.+110    	; 0xc0c <__fpcmp_parts_f+0xa8>
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	88 23       	and	r24, r24
     ba2:	89 f1       	breq	.+98     	; 0xc06 <__fpcmp_parts_f+0xa2>
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <__fpcmp_parts_f+0x9c>
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	1c 91       	ld	r17, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	f1 f0       	breq	.+60     	; 0xbec <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	18 17       	cp	r17, r24
     bb4:	d9 f4       	brne	.+54     	; 0xbec <__fpcmp_parts_f+0x88>
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	2d 91       	ld	r18, X+
     bba:	3c 91       	ld	r19, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	82 17       	cp	r24, r18
     bc4:	93 07       	cpc	r25, r19
     bc6:	94 f0       	brlt	.+36     	; 0xbec <__fpcmp_parts_f+0x88>
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	bc f0       	brlt	.+46     	; 0xbfc <__fpcmp_parts_f+0x98>
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	8d 91       	ld	r24, X+
     bd2:	9d 91       	ld	r25, X+
     bd4:	0d 90       	ld	r0, X+
     bd6:	bc 91       	ld	r27, X
     bd8:	a0 2d       	mov	r26, r0
     bda:	24 81       	ldd	r18, Z+4	; 0x04
     bdc:	35 81       	ldd	r19, Z+5	; 0x05
     bde:	46 81       	ldd	r20, Z+6	; 0x06
     be0:	57 81       	ldd	r21, Z+7	; 0x07
     be2:	28 17       	cp	r18, r24
     be4:	39 07       	cpc	r19, r25
     be6:	4a 07       	cpc	r20, r26
     be8:	5b 07       	cpc	r21, r27
     bea:	18 f4       	brcc	.+6      	; 0xbf2 <__fpcmp_parts_f+0x8e>
     bec:	11 23       	and	r17, r17
     bee:	41 f0       	breq	.+16     	; 0xc00 <__fpcmp_parts_f+0x9c>
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <__fpcmp_parts_f+0xa2>
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	a4 07       	cpc	r26, r20
     bf8:	b5 07       	cpc	r27, r21
     bfa:	40 f4       	brcc	.+16     	; 0xc0c <__fpcmp_parts_f+0xa8>
     bfc:	11 23       	and	r17, r17
     bfe:	19 f0       	breq	.+6      	; 0xc06 <__fpcmp_parts_f+0xa2>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <__fpcmp_parts_f+0xac>
     c06:	6f ef       	ldi	r22, 0xFF	; 255
     c08:	7f ef       	ldi	r23, 0xFF	; 255
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__fpcmp_parts_f+0xac>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	cb 01       	movw	r24, r22
     c12:	1f 91       	pop	r17
     c14:	08 95       	ret

00000c16 <Buzzer_init>:
/*
 * Description:
 * intializes buzzer direction to output
 */
void Buzzer_init(void)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	67 e0       	ldi	r22, 0x07	; 7
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_setupPinDirection>
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <Buzzer_on>:
/*
 * Description:
 * turns on the buzzer
 */
void Buzzer_on(void)
{
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	67 e0       	ldi	r22, 0x07	; 7
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
}
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <Buzzer_off>:
/*
 * Description:
 * turns off the buzzer
 */
void Buzzer_off(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	67 e0       	ldi	r22, 0x07	; 7
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <DcMotor_Init>:
/*
 * Description:
 * Initializes the DC motor pins
 */
void DcMotor_Init(void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Motor pins init
	 */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_INT1_PIN_ID, PIN_OUTPUT);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	66 e0       	ldi	r22, 0x06	; 6
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_INT2_PIN_ID, PIN_OUTPUT);
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	67 e0       	ldi	r22, 0x07	; 7
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_setupPinDirection>
	/*
	 * Motor Stop configuration
	 */
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INT1_PIN_ID, LOGIC_LOW);
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	66 e0       	ldi	r22, 0x06	; 6
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INT2_PIN_ID, LOGIC_LOW);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	67 e0       	ldi	r22, 0x07	; 7
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <DcMotor_Rotate>:
/*
 * Description:
 * Control motor speed and adjust motor state
 */
void DcMotor_Rotate(DcMotor_State dcMotor_state, uint8 dcMotor_speed)
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	00 d0       	rcall	.+0      	; 0xc9a <DcMotor_Rotate+0x6>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <DcMotor_Rotate+0x8>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	6a 83       	std	Y+2, r22	; 0x02
	switch(dcMotor_state)
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	3c 83       	std	Y+4, r19	; 0x04
     cac:	2b 83       	std	Y+3, r18	; 0x03
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 f0       	breq	.+40     	; 0xce0 <DcMotor_Rotate+0x4c>
     cb8:	2b 81       	ldd	r18, Y+3	; 0x03
     cba:	3c 81       	ldd	r19, Y+4	; 0x04
     cbc:	22 30       	cpi	r18, 0x02	; 2
     cbe:	31 05       	cpc	r19, r1
     cc0:	d1 f0       	breq	.+52     	; 0xcf6 <DcMotor_Rotate+0x62>
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	01 f5       	brne	.+64     	; 0xd0a <DcMotor_Rotate+0x76>
	{
	case STOP:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INT1_PIN_ID, LOGIC_LOW);
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	66 e0       	ldi	r22, 0x06	; 6
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INT2_PIN_ID, LOGIC_LOW);
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	67 e0       	ldi	r22, 0x07	; 7
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
     cde:	15 c0       	rjmp	.+42     	; 0xd0a <DcMotor_Rotate+0x76>
		break;
	case ACW:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INT1_PIN_ID, LOGIC_HIGH);
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	66 e0       	ldi	r22, 0x06	; 6
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INT2_PIN_ID, LOGIC_LOW);
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	67 e0       	ldi	r22, 0x07	; 7
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
     cf4:	0a c0       	rjmp	.+20     	; 0xd0a <DcMotor_Rotate+0x76>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INT1_PIN_ID, LOGIC_LOW);
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	66 e0       	ldi	r22, 0x06	; 6
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INT2_PIN_ID, LOGIC_HIGH);
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	67 e0       	ldi	r22, 0x07	; 7
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
		break;
	}
	PWM_Timer0_Start(dcMotor_speed);
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <PWM_Timer0_Start>
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <EEPROM_writeByte+0x6>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <EEPROM_writeByte+0x8>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     d30:	0e 94 4a 11 	call	0x2294	; 0x2294 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     d34:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     d38:	88 30       	cpi	r24, 0x08	; 8
     d3a:	11 f0       	breq	.+4      	; 0xd40 <EEPROM_writeByte+0x22>
        return ERROR;
     d3c:	1c 82       	std	Y+4, r1	; 0x04
     d3e:	28 c0       	rjmp	.+80     	; 0xd90 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	80 70       	andi	r24, 0x00	; 0
     d46:	97 70       	andi	r25, 0x07	; 7
     d48:	88 0f       	add	r24, r24
     d4a:	89 2f       	mov	r24, r25
     d4c:	88 1f       	adc	r24, r24
     d4e:	99 0b       	sbc	r25, r25
     d50:	91 95       	neg	r25
     d52:	80 6a       	ori	r24, 0xA0	; 160
     d54:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d58:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     d5c:	88 31       	cpi	r24, 0x18	; 24
     d5e:	11 f0       	breq	.+4      	; 0xd64 <EEPROM_writeByte+0x46>
        return ERROR; 
     d60:	1c 82       	std	Y+4, r1	; 0x04
     d62:	16 c0       	rjmp	.+44     	; 0xd90 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d6a:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     d6e:	88 32       	cpi	r24, 0x28	; 40
     d70:	11 f0       	breq	.+4      	; 0xd76 <EEPROM_writeByte+0x58>
        return ERROR;
     d72:	1c 82       	std	Y+4, r1	; 0x04
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d7c:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     d80:	88 32       	cpi	r24, 0x28	; 40
     d82:	11 f0       	breq	.+4      	; 0xd88 <EEPROM_writeByte+0x6a>
        return ERROR;
     d84:	1c 82       	std	Y+4, r1	; 0x04
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     d88:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <TWI_stop>
	
    return SUCCESS;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	8c 83       	std	Y+4, r24	; 0x04
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <EEPROM_readByte+0x6>
     da6:	00 d0       	rcall	.+0      	; 0xda8 <EEPROM_readByte+0x8>
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	7c 83       	std	Y+4, r23	; 0x04
     db4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     db6:	0e 94 4a 11 	call	0x2294	; 0x2294 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     dba:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     dbe:	88 30       	cpi	r24, 0x08	; 8
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <EEPROM_readByte+0x26>
        return ERROR;
     dc2:	1d 82       	std	Y+5, r1	; 0x05
     dc4:	44 c0       	rjmp	.+136    	; 0xe4e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	80 70       	andi	r24, 0x00	; 0
     dcc:	97 70       	andi	r25, 0x07	; 7
     dce:	88 0f       	add	r24, r24
     dd0:	89 2f       	mov	r24, r25
     dd2:	88 1f       	adc	r24, r24
     dd4:	99 0b       	sbc	r25, r25
     dd6:	91 95       	neg	r25
     dd8:	80 6a       	ori	r24, 0xA0	; 160
     dda:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     dde:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     de2:	88 31       	cpi	r24, 0x18	; 24
     de4:	11 f0       	breq	.+4      	; 0xdea <EEPROM_readByte+0x4a>
        return ERROR;
     de6:	1d 82       	std	Y+5, r1	; 0x05
     de8:	32 c0       	rjmp	.+100    	; 0xe4e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     df0:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     df4:	88 32       	cpi	r24, 0x28	; 40
     df6:	11 f0       	breq	.+4      	; 0xdfc <EEPROM_readByte+0x5c>
        return ERROR;
     df8:	1d 82       	std	Y+5, r1	; 0x05
     dfa:	29 c0       	rjmp	.+82     	; 0xe4e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     dfc:	0e 94 4a 11 	call	0x2294	; 0x2294 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     e00:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     e04:	80 31       	cpi	r24, 0x10	; 16
     e06:	11 f0       	breq	.+4      	; 0xe0c <EEPROM_readByte+0x6c>
        return ERROR;
     e08:	1d 82       	std	Y+5, r1	; 0x05
     e0a:	21 c0       	rjmp	.+66     	; 0xe4e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	80 70       	andi	r24, 0x00	; 0
     e12:	97 70       	andi	r25, 0x07	; 7
     e14:	88 0f       	add	r24, r24
     e16:	89 2f       	mov	r24, r25
     e18:	88 1f       	adc	r24, r24
     e1a:	99 0b       	sbc	r25, r25
     e1c:	91 95       	neg	r25
     e1e:	81 6a       	ori	r24, 0xA1	; 161
     e20:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     e24:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     e28:	80 34       	cpi	r24, 0x40	; 64
     e2a:	11 f0       	breq	.+4      	; 0xe30 <EEPROM_readByte+0x90>
        return ERROR;
     e2c:	1d 82       	std	Y+5, r1	; 0x05
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     e30:	0e 94 8f 11 	call	0x231e	; 0x231e <TWI_readByteWithNACK>
     e34:	eb 81       	ldd	r30, Y+3	; 0x03
     e36:	fc 81       	ldd	r31, Y+4	; 0x04
     e38:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     e3a:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     e3e:	88 35       	cpi	r24, 0x58	; 88
     e40:	11 f0       	breq	.+4      	; 0xe46 <EEPROM_readByte+0xa6>
        return ERROR;
     e42:	1d 82       	std	Y+5, r1	; 0x05
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     e46:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <TWI_stop>

    return SUCCESS;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	8d 83       	std	Y+5, r24	; 0x05
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <EEPROM_writeByteStream>:

uint8 EEPROM_writeByteStream(uint16 u16addr, uint8* u8data, uint8* stream_size)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	28 97       	sbiw	r28, 0x08	; 8
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	8a 83       	std	Y+2, r24	; 0x02
     e78:	7d 83       	std	Y+5, r23	; 0x05
     e7a:	6c 83       	std	Y+4, r22	; 0x04
     e7c:	5f 83       	std	Y+7, r21	; 0x07
     e7e:	4e 83       	std	Y+6, r20	; 0x06
	uint8 counter = 0;
     e80:	19 82       	std	Y+1, r1	; 0x01
	/* Send the Start Bit */
    TWI_start();
     e82:	0e 94 4a 11 	call	0x2294	; 0x2294 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     e86:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	11 f0       	breq	.+4      	; 0xe92 <EEPROM_writeByteStream+0x32>
        return ERROR;
     e8e:	18 86       	std	Y+8, r1	; 0x08
     e90:	46 c0       	rjmp	.+140    	; 0xf1e <EEPROM_writeByteStream+0xbe>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	9b 81       	ldd	r25, Y+3	; 0x03
     e96:	80 70       	andi	r24, 0x00	; 0
     e98:	97 70       	andi	r25, 0x07	; 7
     e9a:	88 0f       	add	r24, r24
     e9c:	89 2f       	mov	r24, r25
     e9e:	88 1f       	adc	r24, r24
     ea0:	99 0b       	sbc	r25, r25
     ea2:	91 95       	neg	r25
     ea4:	80 6a       	ori	r24, 0xA0	; 160
     ea6:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     eaa:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     eae:	88 31       	cpi	r24, 0x18	; 24
     eb0:	11 f0       	breq	.+4      	; 0xeb6 <EEPROM_writeByteStream+0x56>
        return ERROR;
     eb2:	18 86       	std	Y+8, r1	; 0x08
     eb4:	34 c0       	rjmp	.+104    	; 0xf1e <EEPROM_writeByteStream+0xbe>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ebc:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     ec0:	88 32       	cpi	r24, 0x28	; 40
     ec2:	f1 f0       	breq	.+60     	; 0xf00 <EEPROM_writeByteStream+0xa0>
        return ERROR;
     ec4:	18 86       	std	Y+8, r1	; 0x08
     ec6:	2b c0       	rjmp	.+86     	; 0xf1e <EEPROM_writeByteStream+0xbe>

    while(u8data[counter] != '\0'){
		/* write byte to eeprom */
		TWI_writeByte(u8data[counter++]);
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	fc 01       	movw	r30, r24
     ed4:	e2 0f       	add	r30, r18
     ed6:	f3 1f       	adc	r31, r19
     ed8:	90 81       	ld	r25, Z
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	89 2f       	mov	r24, r25
     ee2:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ee6:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     eea:	88 32       	cpi	r24, 0x28	; 40
     eec:	11 f0       	breq	.+4      	; 0xef2 <EEPROM_writeByteStream+0x92>
			return ERROR;
     eee:	18 86       	std	Y+8, r1	; 0x08
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <EEPROM_writeByteStream+0xbe>
		(*stream_size)++;
     ef2:	ee 81       	ldd	r30, Y+6	; 0x06
     ef4:	ff 81       	ldd	r31, Y+7	; 0x07
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	ee 81       	ldd	r30, Y+6	; 0x06
     efc:	ff 81       	ldd	r31, Y+7	; 0x07
     efe:	80 83       	st	Z, r24
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;

    while(u8data[counter] != '\0'){
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	80 81       	ld	r24, Z
     f12:	88 23       	and	r24, r24
     f14:	c9 f6       	brne	.-78     	; 0xec8 <EEPROM_writeByteStream+0x68>
			return ERROR;
		(*stream_size)++;
    }

    /* Send the Stop Bit */
    TWI_stop();
     f16:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <TWI_stop>

    return SUCCESS;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	88 87       	std	Y+8, r24	; 0x08
     f1e:	88 85       	ldd	r24, Y+8	; 0x08
}
     f20:	28 96       	adiw	r28, 0x08	; 8
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <EEPROM_readByteStream>:

uint8 EEPROM_readByteStream(uint16 u16addr, uint8 *u8data, uint8 stream_size)
{
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	27 97       	sbiw	r28, 0x07	; 7
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	9b 83       	std	Y+3, r25	; 0x03
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	7d 83       	std	Y+5, r23	; 0x05
     f50:	6c 83       	std	Y+4, r22	; 0x04
     f52:	4e 83       	std	Y+6, r20	; 0x06
	uint8 counter = 0;
     f54:	19 82       	std	Y+1, r1	; 0x01
	/* Send the Start Bit */
    TWI_start();
     f56:	0e 94 4a 11 	call	0x2294	; 0x2294 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     f5a:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     f5e:	88 30       	cpi	r24, 0x08	; 8
     f60:	11 f0       	breq	.+4      	; 0xf66 <EEPROM_readByteStream+0x34>
        return ERROR;
     f62:	1f 82       	std	Y+7, r1	; 0x07
     f64:	6d c0       	rjmp	.+218    	; 0x1040 <EEPROM_readByteStream+0x10e>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	80 70       	andi	r24, 0x00	; 0
     f6c:	97 70       	andi	r25, 0x07	; 7
     f6e:	88 0f       	add	r24, r24
     f70:	89 2f       	mov	r24, r25
     f72:	88 1f       	adc	r24, r24
     f74:	99 0b       	sbc	r25, r25
     f76:	91 95       	neg	r25
     f78:	80 6a       	ori	r24, 0xA0	; 160
     f7a:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f7e:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     f82:	88 31       	cpi	r24, 0x18	; 24
     f84:	11 f0       	breq	.+4      	; 0xf8a <EEPROM_readByteStream+0x58>
        return ERROR;
     f86:	1f 82       	std	Y+7, r1	; 0x07
     f88:	5b c0       	rjmp	.+182    	; 0x1040 <EEPROM_readByteStream+0x10e>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f90:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     f94:	88 32       	cpi	r24, 0x28	; 40
     f96:	11 f0       	breq	.+4      	; 0xf9c <EEPROM_readByteStream+0x6a>
        return ERROR;
     f98:	1f 82       	std	Y+7, r1	; 0x07
     f9a:	52 c0       	rjmp	.+164    	; 0x1040 <EEPROM_readByteStream+0x10e>

    /* Send the Repeated Start Bit */
    TWI_start();
     f9c:	0e 94 4a 11 	call	0x2294	; 0x2294 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     fa0:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     fa4:	80 31       	cpi	r24, 0x10	; 16
     fa6:	11 f0       	breq	.+4      	; 0xfac <EEPROM_readByteStream+0x7a>
        return ERROR;
     fa8:	1f 82       	std	Y+7, r1	; 0x07
     faa:	4a c0       	rjmp	.+148    	; 0x1040 <EEPROM_readByteStream+0x10e>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	80 70       	andi	r24, 0x00	; 0
     fb2:	97 70       	andi	r25, 0x07	; 7
     fb4:	88 0f       	add	r24, r24
     fb6:	89 2f       	mov	r24, r25
     fb8:	88 1f       	adc	r24, r24
     fba:	99 0b       	sbc	r25, r25
     fbc:	91 95       	neg	r25
     fbe:	81 6a       	ori	r24, 0xA1	; 161
     fc0:	0e 94 65 11 	call	0x22ca	; 0x22ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     fc4:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     fc8:	80 34       	cpi	r24, 0x40	; 64
     fca:	b9 f0       	breq	.+46     	; 0xffa <EEPROM_readByteStream+0xc8>
        return ERROR;
     fcc:	1f 82       	std	Y+7, r1	; 0x07
     fce:	38 c0       	rjmp	.+112    	; 0x1040 <EEPROM_readByteStream+0x10e>

    while(counter < stream_size -1){
		/* Read Byte from Memory with send ACK */
		u8data[counter++] = TWI_readByteWithACK();
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	9d 81       	ldd	r25, Y+5	; 0x05
     fda:	8c 01       	movw	r16, r24
     fdc:	02 0f       	add	r16, r18
     fde:	13 1f       	adc	r17, r19
     fe0:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <TWI_readByteWithACK>
     fe4:	f8 01       	movw	r30, r16
     fe6:	80 83       	st	Z, r24
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	89 83       	std	Y+1, r24	; 0x01
		if (TWI_getStatus() != TWI_MR_DATA_ACK)
     fee:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
     ff2:	80 35       	cpi	r24, 0x50	; 80
     ff4:	11 f0       	breq	.+4      	; 0xffa <EEPROM_readByteStream+0xc8>
			return ERROR;
     ff6:	1f 82       	std	Y+7, r1	; 0x07
     ff8:	23 c0       	rjmp	.+70     	; 0x1040 <EEPROM_readByteStream+0x10e>
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;

    while(counter < stream_size -1){
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	8e 81       	ldd	r24, Y+6	; 0x06
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	28 17       	cp	r18, r24
    100a:	39 07       	cpc	r19, r25
    100c:	0c f3       	brlt	.-62     	; 0xfd0 <EEPROM_readByteStream+0x9e>
		if (TWI_getStatus() != TWI_MR_DATA_ACK)
			return ERROR;
    }

	/* Read Byte from Memory without send ACK */
	u8data[counter++] = TWI_readByteWithNACK();
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	8c 01       	movw	r16, r24
    101a:	02 0f       	add	r16, r18
    101c:	13 1f       	adc	r17, r19
    101e:	0e 94 8f 11 	call	0x231e	; 0x231e <TWI_readByteWithNACK>
    1022:	f8 01       	movw	r30, r16
    1024:	80 83       	st	Z, r24
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	89 83       	std	Y+1, r24	; 0x01
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    102c:	0e 94 a2 11 	call	0x2344	; 0x2344 <TWI_getStatus>
    1030:	88 35       	cpi	r24, 0x58	; 88
    1032:	11 f0       	breq	.+4      	; 0x1038 <EEPROM_readByteStream+0x106>
		return ERROR;
    1034:	1f 82       	std	Y+7, r1	; 0x07
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <EEPROM_readByteStream+0x10e>

    /* Send the Stop Bit */
    TWI_stop();
    1038:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <TWI_stop>
    /*
     * either it returns a zero indicating error or the size of the output stream
     */
    return counter;
    103c:	f9 81       	ldd	r31, Y+1	; 0x01
    103e:	ff 83       	std	Y+7, r31	; 0x07
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1042:	27 96       	adiw	r28, 0x07	; 7
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	08 95       	ret

00001058 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will return Error Status.
 */
GPIO_ErrorStatus GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	2e 97       	sbiw	r28, 0x0e	; 14
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	8a 83       	std	Y+2, r24	; 0x02
    106e:	6b 83       	std	Y+3, r22	; 0x03
    1070:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    1072:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	18 f4       	brcc	.+6      	; 0x1080 <GPIO_setupPinDirection+0x28>
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	88 30       	cpi	r24, 0x08	; 8
    107e:	18 f0       	brcs	.+6      	; 0x1086 <GPIO_setupPinDirection+0x2e>
	{
		gpio_error_enumState = GPIO_NOK;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	d7 c0       	rjmp	.+430    	; 0x1234 <GPIO_setupPinDirection+0x1dc>
	}
	else
	{
		switch (port_num)
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3e 87       	std	Y+14, r19	; 0x0e
    108e:	2d 87       	std	Y+13, r18	; 0x0d
    1090:	8d 85       	ldd	r24, Y+13	; 0x0d
    1092:	9e 85       	ldd	r25, Y+14	; 0x0e
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <GPIO_setupPinDirection+0x44>
    109a:	44 c0       	rjmp	.+136    	; 0x1124 <GPIO_setupPinDirection+0xcc>
    109c:	2d 85       	ldd	r18, Y+13	; 0x0d
    109e:	3e 85       	ldd	r19, Y+14	; 0x0e
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	2c f4       	brge	.+10     	; 0x10b0 <GPIO_setupPinDirection+0x58>
    10a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	71 f0       	breq	.+28     	; 0x10ca <GPIO_setupPinDirection+0x72>
    10ae:	c2 c0       	rjmp	.+388    	; 0x1234 <GPIO_setupPinDirection+0x1dc>
    10b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    10b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <GPIO_setupPinDirection+0x64>
    10ba:	62 c0       	rjmp	.+196    	; 0x1180 <GPIO_setupPinDirection+0x128>
    10bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10be:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	91 05       	cpc	r25, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <GPIO_setupPinDirection+0x70>
    10c6:	89 c0       	rjmp	.+274    	; 0x11da <GPIO_setupPinDirection+0x182>
    10c8:	b5 c0       	rjmp	.+362    	; 0x1234 <GPIO_setupPinDirection+0x1dc>
		{
		case PORTA_ID:
			(direction == PIN_OUTPUT) ? SET_BIT(GPIO_PORTA_DIR_R, pin_num) : CLEAR_BIT(GPIO_PORTA_DIR_R, pin_num);
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	a9 f4       	brne	.+42     	; 0x10fa <GPIO_setupPinDirection+0xa2>
    10d0:	aa e3       	ldi	r26, 0x3A	; 58
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ea e3       	ldi	r30, 0x3A	; 58
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <GPIO_setupPinDirection+0x96>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <GPIO_setupPinDirection+0x92>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	9c 91       	ld	r25, X
    10f8:	9d c0       	rjmp	.+314    	; 0x1234 <GPIO_setupPinDirection+0x1dc>
    10fa:	aa e3       	ldi	r26, 0x3A	; 58
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ea e3       	ldi	r30, 0x3A	; 58
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <GPIO_setupPinDirection+0xbe>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	2a 95       	dec	r18
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <GPIO_setupPinDirection+0xba>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	2c 91       	ld	r18, X
    1122:	88 c0       	rjmp	.+272    	; 0x1234 <GPIO_setupPinDirection+0x1dc>
			break;
		case PORTB_ID:
			(direction == PIN_OUTPUT) ? SET_BIT(GPIO_PORTB_DIR_R, pin_num) : CLEAR_BIT(GPIO_PORTB_DIR_R, pin_num);
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	a9 f4       	brne	.+42     	; 0x1154 <GPIO_setupPinDirection+0xfc>
    112a:	a7 e3       	ldi	r26, 0x37	; 55
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e7 e3       	ldi	r30, 0x37	; 55
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <GPIO_setupPinDirection+0xf0>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <GPIO_setupPinDirection+0xec>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	3c 91       	ld	r19, X
    1152:	70 c0       	rjmp	.+224    	; 0x1234 <GPIO_setupPinDirection+0x1dc>
    1154:	a7 e3       	ldi	r26, 0x37	; 55
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e7 e3       	ldi	r30, 0x37	; 55
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <GPIO_setupPinDirection+0x11a>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <GPIO_setupPinDirection+0x116>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	8c 91       	ld	r24, X
    117e:	5a c0       	rjmp	.+180    	; 0x1234 <GPIO_setupPinDirection+0x1dc>
			break;
		case PORTC_ID:
			(direction == PIN_OUTPUT) ? SET_BIT(GPIO_PORTC_DIR_R, pin_num) : CLEAR_BIT(GPIO_PORTC_DIR_R, pin_num);
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	a9 f4       	brne	.+42     	; 0x11b0 <GPIO_setupPinDirection+0x158>
    1186:	a4 e3       	ldi	r26, 0x34	; 52
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e4 e3       	ldi	r30, 0x34	; 52
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <GPIO_setupPinDirection+0x14c>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <GPIO_setupPinDirection+0x148>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	9c 91       	ld	r25, X
    11ae:	42 c0       	rjmp	.+132    	; 0x1234 <GPIO_setupPinDirection+0x1dc>
    11b0:	a4 e3       	ldi	r26, 0x34	; 52
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e4 e3       	ldi	r30, 0x34	; 52
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <GPIO_setupPinDirection+0x174>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	2a 95       	dec	r18
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <GPIO_setupPinDirection+0x170>
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	2c 91       	ld	r18, X
    11d8:	2d c0       	rjmp	.+90     	; 0x1234 <GPIO_setupPinDirection+0x1dc>
			break;
		case PORTD_ID:
			(direction == PIN_OUTPUT) ? SET_BIT(GPIO_PORTD_DIR_R, pin_num) : CLEAR_BIT(GPIO_PORTD_DIR_R, pin_num);
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	a9 f4       	brne	.+42     	; 0x120a <GPIO_setupPinDirection+0x1b2>
    11e0:	a1 e3       	ldi	r26, 0x31	; 49
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e1 e3       	ldi	r30, 0x31	; 49
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <GPIO_setupPinDirection+0x1a6>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <GPIO_setupPinDirection+0x1a2>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	3c 91       	ld	r19, X
    1208:	15 c0       	rjmp	.+42     	; 0x1234 <GPIO_setupPinDirection+0x1dc>
    120a:	a1 e3       	ldi	r26, 0x31	; 49
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e1 e3       	ldi	r30, 0x31	; 49
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GPIO_setupPinDirection+0x1d0>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <GPIO_setupPinDirection+0x1cc>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	8c 91       	ld	r24, X
			break;
		}
	}
	return gpio_error_enumState;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
}
    1236:	2e 96       	adiw	r28, 0x0e	; 14
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will return Error Status.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_ErrorStatus GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	2e 97       	sbiw	r28, 0x0e	; 14
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	8a 83       	std	Y+2, r24	; 0x02
    125e:	6b 83       	std	Y+3, r22	; 0x03
    1260:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    1262:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	18 f4       	brcc	.+6      	; 0x1270 <GPIO_writePin+0x28>
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 30       	cpi	r24, 0x08	; 8
    126e:	18 f0       	brcs	.+6      	; 0x1276 <GPIO_writePin+0x2e>
	{
		gpio_error_enumState = GPIO_NOK;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	d7 c0       	rjmp	.+430    	; 0x1424 <GPIO_writePin+0x1dc>
	}
	else
	{
		switch (port_num)
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3e 87       	std	Y+14, r19	; 0x0e
    127e:	2d 87       	std	Y+13, r18	; 0x0d
    1280:	8d 85       	ldd	r24, Y+13	; 0x0d
    1282:	9e 85       	ldd	r25, Y+14	; 0x0e
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	09 f4       	brne	.+2      	; 0x128c <GPIO_writePin+0x44>
    128a:	44 c0       	rjmp	.+136    	; 0x1314 <GPIO_writePin+0xcc>
    128c:	2d 85       	ldd	r18, Y+13	; 0x0d
    128e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	2c f4       	brge	.+10     	; 0x12a0 <GPIO_writePin+0x58>
    1296:	8d 85       	ldd	r24, Y+13	; 0x0d
    1298:	9e 85       	ldd	r25, Y+14	; 0x0e
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	71 f0       	breq	.+28     	; 0x12ba <GPIO_writePin+0x72>
    129e:	c2 c0       	rjmp	.+388    	; 0x1424 <GPIO_writePin+0x1dc>
    12a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    12a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <GPIO_writePin+0x64>
    12aa:	62 c0       	rjmp	.+196    	; 0x1370 <GPIO_writePin+0x128>
    12ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	91 05       	cpc	r25, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <GPIO_writePin+0x70>
    12b6:	89 c0       	rjmp	.+274    	; 0x13ca <GPIO_writePin+0x182>
    12b8:	b5 c0       	rjmp	.+362    	; 0x1424 <GPIO_writePin+0x1dc>
		{
		case PORTA_ID:
			(value == LOGIC_HIGH) ? SET_BIT(GPIO_PORTA_DATA_R, pin_num) : CLEAR_BIT(GPIO_PORTA_DATA_R, pin_num);
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	a9 f4       	brne	.+42     	; 0x12ea <GPIO_writePin+0xa2>
    12c0:	ab e3       	ldi	r26, 0x3B	; 59
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	eb e3       	ldi	r30, 0x3B	; 59
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <GPIO_writePin+0x96>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <GPIO_writePin+0x92>
    12e2:	84 2b       	or	r24, r20
    12e4:	8c 93       	st	X, r24
    12e6:	9c 91       	ld	r25, X
    12e8:	9d c0       	rjmp	.+314    	; 0x1424 <GPIO_writePin+0x1dc>
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_writePin+0xbe>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	2a 95       	dec	r18
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_writePin+0xba>
    130a:	80 95       	com	r24
    130c:	84 23       	and	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	2c 91       	ld	r18, X
    1312:	88 c0       	rjmp	.+272    	; 0x1424 <GPIO_writePin+0x1dc>
			break;
		case PORTB_ID:
			(value == LOGIC_HIGH) ? SET_BIT(GPIO_PORTB_DATA_R, pin_num) : CLEAR_BIT(GPIO_PORTB_DATA_R, pin_num);
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	a9 f4       	brne	.+42     	; 0x1344 <GPIO_writePin+0xfc>
    131a:	a8 e3       	ldi	r26, 0x38	; 56
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <GPIO_writePin+0xf0>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <GPIO_writePin+0xec>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	3c 91       	ld	r19, X
    1342:	70 c0       	rjmp	.+224    	; 0x1424 <GPIO_writePin+0x1dc>
    1344:	a8 e3       	ldi	r26, 0x38	; 56
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e8 e3       	ldi	r30, 0x38	; 56
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <GPIO_writePin+0x11a>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <GPIO_writePin+0x116>
    1366:	80 95       	com	r24
    1368:	84 23       	and	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	8c 91       	ld	r24, X
    136e:	5a c0       	rjmp	.+180    	; 0x1424 <GPIO_writePin+0x1dc>
			break;
		case PORTC_ID:
			(value == LOGIC_HIGH) ? SET_BIT(GPIO_PORTC_DATA_R, pin_num) : CLEAR_BIT(GPIO_PORTC_DATA_R, pin_num);
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	a9 f4       	brne	.+42     	; 0x13a0 <GPIO_writePin+0x158>
    1376:	a5 e3       	ldi	r26, 0x35	; 53
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e3       	ldi	r30, 0x35	; 53
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <GPIO_writePin+0x14c>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <GPIO_writePin+0x148>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	9c 91       	ld	r25, X
    139e:	42 c0       	rjmp	.+132    	; 0x1424 <GPIO_writePin+0x1dc>
    13a0:	a5 e3       	ldi	r26, 0x35	; 53
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e5 e3       	ldi	r30, 0x35	; 53
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_writePin+0x174>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	2a 95       	dec	r18
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_writePin+0x170>
    13c0:	80 95       	com	r24
    13c2:	84 23       	and	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	2c 91       	ld	r18, X
    13c8:	2d c0       	rjmp	.+90     	; 0x1424 <GPIO_writePin+0x1dc>
			break;
		case PORTD_ID:
			(value == LOGIC_HIGH) ? SET_BIT(GPIO_PORTD_DATA_R, pin_num) : CLEAR_BIT(GPIO_PORTD_DATA_R, pin_num);
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	a9 f4       	brne	.+42     	; 0x13fa <GPIO_writePin+0x1b2>
    13d0:	a2 e3       	ldi	r26, 0x32	; 50
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e2 e3       	ldi	r30, 0x32	; 50
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <GPIO_writePin+0x1a6>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <GPIO_writePin+0x1a2>
    13f2:	84 2b       	or	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	3c 91       	ld	r19, X
    13f8:	15 c0       	rjmp	.+42     	; 0x1424 <GPIO_writePin+0x1dc>
    13fa:	a2 e3       	ldi	r26, 0x32	; 50
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e2 e3       	ldi	r30, 0x32	; 50
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_writePin+0x1d0>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_writePin+0x1cc>
    141c:	80 95       	com	r24
    141e:	84 23       	and	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	8c 91       	ld	r24, X
			break;
		}
	}
	return gpio_error_enumState;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
}
    1426:	2e 96       	adiw	r28, 0x0e	; 14
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Error Status.
 */
GPIO_ErrorStatus GPIO_readPin(uint8 port_num, uint8 pin_num, uint8* pin_value)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	2b 97       	sbiw	r28, 0x0b	; 11
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	6b 83       	std	Y+3, r22	; 0x03
    1450:	5d 83       	std	Y+5, r21	; 0x05
    1452:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    1454:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	84 30       	cpi	r24, 0x04	; 4
    145a:	18 f4       	brcc	.+6      	; 0x1462 <GPIO_readPin+0x2a>
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 30       	cpi	r24, 0x08	; 8
    1460:	18 f0       	brcs	.+6      	; 0x1468 <GPIO_readPin+0x30>
	{
		gpio_error_enumState = GPIO_NOK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	91 c0       	rjmp	.+290    	; 0x158a <GPIO_readPin+0x152>
	}
	else
	{
		switch (port_num)
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3b 87       	std	Y+11, r19	; 0x0b
    1470:	2a 87       	std	Y+10, r18	; 0x0a
    1472:	4a 85       	ldd	r20, Y+10	; 0x0a
    1474:	5b 85       	ldd	r21, Y+11	; 0x0b
    1476:	41 30       	cpi	r20, 0x01	; 1
    1478:	51 05       	cpc	r21, r1
    147a:	a1 f1       	breq	.+104    	; 0x14e4 <GPIO_readPin+0xac>
    147c:	8a 85       	ldd	r24, Y+10	; 0x0a
    147e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	91 05       	cpc	r25, r1
    1484:	34 f4       	brge	.+12     	; 0x1492 <GPIO_readPin+0x5a>
    1486:	2a 85       	ldd	r18, Y+10	; 0x0a
    1488:	3b 85       	ldd	r19, Y+11	; 0x0b
    148a:	21 15       	cp	r18, r1
    148c:	31 05       	cpc	r19, r1
    148e:	71 f0       	breq	.+28     	; 0x14ac <GPIO_readPin+0x74>
    1490:	7c c0       	rjmp	.+248    	; 0x158a <GPIO_readPin+0x152>
    1492:	4a 85       	ldd	r20, Y+10	; 0x0a
    1494:	5b 85       	ldd	r21, Y+11	; 0x0b
    1496:	42 30       	cpi	r20, 0x02	; 2
    1498:	51 05       	cpc	r21, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <GPIO_readPin+0x66>
    149c:	3f c0       	rjmp	.+126    	; 0x151c <GPIO_readPin+0xe4>
    149e:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <GPIO_readPin+0x72>
    14a8:	55 c0       	rjmp	.+170    	; 0x1554 <GPIO_readPin+0x11c>
    14aa:	6f c0       	rjmp	.+222    	; 0x158a <GPIO_readPin+0x152>
		{
		case PORTA_ID:
			(*pin_value) = BIT_IS_SET(GPIO_PORTA_STATS_R, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    14ac:	e9 e3       	ldi	r30, 0x39	; 57
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_readPin+0x8c>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_readPin+0x88>
    14c8:	ca 01       	movw	r24, r20
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	90 70       	andi	r25, 0x00	; 0
    14ce:	88 23       	and	r24, r24
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <GPIO_readPin+0xa0>
    14d2:	51 e0       	ldi	r21, 0x01	; 1
    14d4:	59 87       	std	Y+9, r21	; 0x09
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <GPIO_readPin+0xa2>
    14d8:	19 86       	std	Y+9, r1	; 0x09
    14da:	ec 81       	ldd	r30, Y+4	; 0x04
    14dc:	fd 81       	ldd	r31, Y+5	; 0x05
    14de:	89 85       	ldd	r24, Y+9	; 0x09
    14e0:	80 83       	st	Z, r24
    14e2:	53 c0       	rjmp	.+166    	; 0x158a <GPIO_readPin+0x152>
			break;
		case PORTB_ID:
			(*pin_value) = BIT_IS_SET(GPIO_PORTB_STATS_R, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    14e4:	e6 e3       	ldi	r30, 0x36	; 54
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a9 01       	movw	r20, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_readPin+0xc4>
    14f8:	55 95       	asr	r21
    14fa:	47 95       	ror	r20
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_readPin+0xc0>
    1500:	ca 01       	movw	r24, r20
    1502:	81 70       	andi	r24, 0x01	; 1
    1504:	90 70       	andi	r25, 0x00	; 0
    1506:	88 23       	and	r24, r24
    1508:	19 f0       	breq	.+6      	; 0x1510 <GPIO_readPin+0xd8>
    150a:	51 e0       	ldi	r21, 0x01	; 1
    150c:	58 87       	std	Y+8, r21	; 0x08
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <GPIO_readPin+0xda>
    1510:	18 86       	std	Y+8, r1	; 0x08
    1512:	ec 81       	ldd	r30, Y+4	; 0x04
    1514:	fd 81       	ldd	r31, Y+5	; 0x05
    1516:	88 85       	ldd	r24, Y+8	; 0x08
    1518:	80 83       	st	Z, r24
    151a:	37 c0       	rjmp	.+110    	; 0x158a <GPIO_readPin+0x152>
			break;
		case PORTC_ID:
			(*pin_value) = BIT_IS_SET(GPIO_PORTC_STATS_R, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    151c:	e3 e3       	ldi	r30, 0x33	; 51
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <GPIO_readPin+0xfc>
    1530:	55 95       	asr	r21
    1532:	47 95       	ror	r20
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <GPIO_readPin+0xf8>
    1538:	ca 01       	movw	r24, r20
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	88 23       	and	r24, r24
    1540:	19 f0       	breq	.+6      	; 0x1548 <GPIO_readPin+0x110>
    1542:	51 e0       	ldi	r21, 0x01	; 1
    1544:	5f 83       	std	Y+7, r21	; 0x07
    1546:	01 c0       	rjmp	.+2      	; 0x154a <GPIO_readPin+0x112>
    1548:	1f 82       	std	Y+7, r1	; 0x07
    154a:	ec 81       	ldd	r30, Y+4	; 0x04
    154c:	fd 81       	ldd	r31, Y+5	; 0x05
    154e:	8f 81       	ldd	r24, Y+7	; 0x07
    1550:	80 83       	st	Z, r24
    1552:	1b c0       	rjmp	.+54     	; 0x158a <GPIO_readPin+0x152>
			break;
		case PORTD_ID:
			(*pin_value) = BIT_IS_SET(GPIO_PORTD_STATS_R, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    1554:	e0 e3       	ldi	r30, 0x30	; 48
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a9 01       	movw	r20, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_readPin+0x134>
    1568:	55 95       	asr	r21
    156a:	47 95       	ror	r20
    156c:	8a 95       	dec	r24
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_readPin+0x130>
    1570:	ca 01       	movw	r24, r20
    1572:	81 70       	andi	r24, 0x01	; 1
    1574:	90 70       	andi	r25, 0x00	; 0
    1576:	88 23       	and	r24, r24
    1578:	19 f0       	breq	.+6      	; 0x1580 <GPIO_readPin+0x148>
    157a:	51 e0       	ldi	r21, 0x01	; 1
    157c:	5e 83       	std	Y+6, r21	; 0x06
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <GPIO_readPin+0x14a>
    1580:	1e 82       	std	Y+6, r1	; 0x06
    1582:	ec 81       	ldd	r30, Y+4	; 0x04
    1584:	fd 81       	ldd	r31, Y+5	; 0x05
    1586:	8e 81       	ldd	r24, Y+6	; 0x06
    1588:	80 83       	st	Z, r24
			break;
		}
	}
	return gpio_error_enumState;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
}
    158c:	2b 96       	adiw	r28, 0x0b	; 11
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will return Error.
 */
GPIO_ErrorStatus GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <GPIO_setupPortDirection+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <GPIO_setupPortDirection+0x8>
    15a6:	0f 92       	push	r0
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	8a 83       	std	Y+2, r24	; 0x02
    15ae:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    15b0:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	18 f0       	brcs	.+6      	; 0x15be <GPIO_setupPortDirection+0x20>
	{
		gpio_error_enumState = GPIO_NOK;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	32 c0       	rjmp	.+100    	; 0x1622 <GPIO_setupPortDirection+0x84>
	}
	else
	{
		switch(port_num)
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	3d 83       	std	Y+5, r19	; 0x05
    15c6:	2c 83       	std	Y+4, r18	; 0x04
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	d1 f0       	breq	.+52     	; 0x1606 <GPIO_setupPortDirection+0x68>
    15d2:	2c 81       	ldd	r18, Y+4	; 0x04
    15d4:	3d 81       	ldd	r19, Y+5	; 0x05
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	2c f4       	brge	.+10     	; 0x15e6 <GPIO_setupPortDirection+0x48>
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	61 f0       	breq	.+24     	; 0x15fc <GPIO_setupPortDirection+0x5e>
    15e4:	1e c0       	rjmp	.+60     	; 0x1622 <GPIO_setupPortDirection+0x84>
    15e6:	2c 81       	ldd	r18, Y+4	; 0x04
    15e8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	81 f0       	breq	.+32     	; 0x1610 <GPIO_setupPortDirection+0x72>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	81 f0       	breq	.+32     	; 0x161a <GPIO_setupPortDirection+0x7c>
    15fa:	13 c0       	rjmp	.+38     	; 0x1622 <GPIO_setupPortDirection+0x84>
		{
		case PORTA_ID:
			GPIO_PORTA_DIR_R = direction;
    15fc:	ea e3       	ldi	r30, 0x3A	; 58
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	80 83       	st	Z, r24
    1604:	0e c0       	rjmp	.+28     	; 0x1622 <GPIO_setupPortDirection+0x84>
			break;
		case PORTB_ID:
			GPIO_PORTB_DIR_R = direction;
    1606:	e7 e3       	ldi	r30, 0x37	; 55
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	80 83       	st	Z, r24
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <GPIO_setupPortDirection+0x84>
			break;
		case PORTC_ID:
			GPIO_PORTC_DIR_R = direction;
    1610:	e4 e3       	ldi	r30, 0x34	; 52
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	80 83       	st	Z, r24
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <GPIO_setupPortDirection+0x84>
			break;
		case PORTD_ID:
			GPIO_PORTD_DIR_R = direction;
    161a:	e1 e3       	ldi	r30, 0x31	; 49
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	80 83       	st	Z, r24
			break;
		}
	}
	return gpio_error_enumState;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will return Error.
 */
GPIO_ErrorStatus GPIO_writePort(uint8 port_num, uint8 value)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <GPIO_writePort+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <GPIO_writePort+0x8>
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	8a 83       	std	Y+2, r24	; 0x02
    1644:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    1646:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	18 f0       	brcs	.+6      	; 0x1654 <GPIO_writePort+0x20>
	{
		gpio_error_enumState = GPIO_NOK;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	32 c0       	rjmp	.+100    	; 0x16b8 <GPIO_writePort+0x84>
	}
	else
	{
		switch (port_num)
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	3d 83       	std	Y+5, r19	; 0x05
    165c:	2c 83       	std	Y+4, r18	; 0x04
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	91 05       	cpc	r25, r1
    1666:	d1 f0       	breq	.+52     	; 0x169c <GPIO_writePort+0x68>
    1668:	2c 81       	ldd	r18, Y+4	; 0x04
    166a:	3d 81       	ldd	r19, Y+5	; 0x05
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	2c f4       	brge	.+10     	; 0x167c <GPIO_writePort+0x48>
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	61 f0       	breq	.+24     	; 0x1692 <GPIO_writePort+0x5e>
    167a:	1e c0       	rjmp	.+60     	; 0x16b8 <GPIO_writePort+0x84>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	81 f0       	breq	.+32     	; 0x16a6 <GPIO_writePort+0x72>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	83 30       	cpi	r24, 0x03	; 3
    168c:	91 05       	cpc	r25, r1
    168e:	81 f0       	breq	.+32     	; 0x16b0 <GPIO_writePort+0x7c>
    1690:	13 c0       	rjmp	.+38     	; 0x16b8 <GPIO_writePort+0x84>
		{
		case PORTA_ID:
			GPIO_PORTA_DATA_R = value;
    1692:	eb e3       	ldi	r30, 0x3B	; 59
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	80 83       	st	Z, r24
    169a:	0e c0       	rjmp	.+28     	; 0x16b8 <GPIO_writePort+0x84>
			break;
		case PORTB_ID:
			GPIO_PORTB_DATA_R = value;
    169c:	e8 e3       	ldi	r30, 0x38	; 56
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	80 83       	st	Z, r24
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <GPIO_writePort+0x84>
			break;
		case PORTC_ID:
			GPIO_PORTC_DATA_R = value;
    16a6:	e5 e3       	ldi	r30, 0x35	; 53
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	80 83       	st	Z, r24
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <GPIO_writePort+0x84>
			break;
		case PORTD_ID:
			GPIO_PORTD_DATA_R = value;
    16b0:	e2 e3       	ldi	r30, 0x32	; 50
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	80 83       	st	Z, r24
			break;
		}
	}
	return gpio_error_enumState;
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return Error.
 */
GPIO_ErrorStatus GPIO_readPort(uint8 port_num, uint8* port_value)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <GPIO_readPort+0x6>
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <GPIO_readPort+0x8>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <GPIO_readPort+0xa>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	8a 83       	std	Y+2, r24	; 0x02
    16da:	7c 83       	std	Y+4, r23	; 0x04
    16dc:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    16de:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	84 30       	cpi	r24, 0x04	; 4
    16e4:	18 f0       	brcs	.+6      	; 0x16ec <GPIO_readPort+0x22>
	{
		gpio_error_enumState = GPIO_NOK;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	3a c0       	rjmp	.+116    	; 0x1760 <GPIO_readPort+0x96>
	}
	else
	{
		switch (port_num)
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3e 83       	std	Y+6, r19	; 0x06
    16f4:	2d 83       	std	Y+5, r18	; 0x05
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 05       	cpc	r25, r1
    16fe:	e1 f0       	breq	.+56     	; 0x1738 <GPIO_readPort+0x6e>
    1700:	2d 81       	ldd	r18, Y+5	; 0x05
    1702:	3e 81       	ldd	r19, Y+6	; 0x06
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	2c f4       	brge	.+10     	; 0x1714 <GPIO_readPort+0x4a>
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	61 f0       	breq	.+24     	; 0x172a <GPIO_readPort+0x60>
    1712:	26 c0       	rjmp	.+76     	; 0x1760 <GPIO_readPort+0x96>
    1714:	2d 81       	ldd	r18, Y+5	; 0x05
    1716:	3e 81       	ldd	r19, Y+6	; 0x06
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	a1 f0       	breq	.+40     	; 0x1746 <GPIO_readPort+0x7c>
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	91 05       	cpc	r25, r1
    1726:	b1 f0       	breq	.+44     	; 0x1754 <GPIO_readPort+0x8a>
    1728:	1b c0       	rjmp	.+54     	; 0x1760 <GPIO_readPort+0x96>
		{
		case PORTA_ID:
			(*port_value) = GPIO_PORTA_STATS_R;
    172a:	e9 e3       	ldi	r30, 0x39	; 57
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	eb 81       	ldd	r30, Y+3	; 0x03
    1732:	fc 81       	ldd	r31, Y+4	; 0x04
    1734:	80 83       	st	Z, r24
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <GPIO_readPort+0x96>
			break;
		case PORTB_ID:
			(*port_value) = GPIO_PORTB_STATS_R;
    1738:	e6 e3       	ldi	r30, 0x36	; 54
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	eb 81       	ldd	r30, Y+3	; 0x03
    1740:	fc 81       	ldd	r31, Y+4	; 0x04
    1742:	80 83       	st	Z, r24
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <GPIO_readPort+0x96>
			break;
		case PORTC_ID:
			(*port_value) = GPIO_PORTC_STATS_R;
    1746:	e3 e3       	ldi	r30, 0x33	; 51
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	eb 81       	ldd	r30, Y+3	; 0x03
    174e:	fc 81       	ldd	r31, Y+4	; 0x04
    1750:	80 83       	st	Z, r24
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <GPIO_readPort+0x96>
			break;
		case PORTD_ID:
			(*port_value) = GPIO_PORTD_STATS_R;
    1754:	e0 e3       	ldi	r30, 0x30	; 48
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	eb 81       	ldd	r30, Y+3	; 0x03
    175c:	fc 81       	ldd	r31, Y+4	; 0x04
    175e:	80 83       	st	Z, r24
			break;
		}
	}
	return gpio_error_enumState;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
}
    1762:	26 96       	adiw	r28, 0x06	; 6
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <main>:
void write_new_password(void);
boolean check_password(uint8* re_password);
void timer_callBack_motorOP(void);
void timer_callBack_systemNOK_OP(void);
int main(void)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	a8 97       	sbiw	r28, 0x28	; 40
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
	uint8 is_login_successful = 0, operator_request = 0;
    1788:	1a 82       	std	Y+2, r1	; 0x02
    178a:	19 82       	std	Y+1, r1	; 0x01
	 *************************************************/

	/*
	 * initializing MCAL layer components
	 */
	TWI_ConfigType twi_config = {0x01, 400000};
    178c:	ce 01       	movw	r24, r28
    178e:	09 96       	adiw	r24, 0x09	; 9
    1790:	9b 8f       	std	Y+27, r25	; 0x1b
    1792:	8a 8f       	std	Y+26, r24	; 0x1a
    1794:	e4 e7       	ldi	r30, 0x74	; 116
    1796:	f1 e0       	ldi	r31, 0x01	; 1
    1798:	fd 8f       	std	Y+29, r31	; 0x1d
    179a:	ec 8f       	std	Y+28, r30	; 0x1c
    179c:	f5 e0       	ldi	r31, 0x05	; 5
    179e:	fe 8f       	std	Y+30, r31	; 0x1e
    17a0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    17a2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    17a4:	00 80       	ld	r0, Z
    17a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	9d 8f       	std	Y+29, r25	; 0x1d
    17ae:	8c 8f       	std	Y+28, r24	; 0x1c
    17b0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    17b2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    17b4:	00 82       	st	Z, r0
    17b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	9b 8f       	std	Y+27, r25	; 0x1b
    17be:	8a 8f       	std	Y+26, r24	; 0x1a
    17c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17c2:	91 50       	subi	r25, 0x01	; 1
    17c4:	9e 8f       	std	Y+30, r25	; 0x1e
    17c6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    17c8:	ee 23       	and	r30, r30
    17ca:	51 f7       	brne	.-44     	; 0x17a0 <main+0x2c>
	UART_ConfigType uart_config = {DATA_8_BIT, NO_PARITY, UART_1_STOP_BIT, 19200};
    17cc:	ce 01       	movw	r24, r28
    17ce:	0e 96       	adiw	r24, 0x0e	; 14
    17d0:	98 a3       	std	Y+32, r25	; 0x20
    17d2:	8f 8f       	std	Y+31, r24	; 0x1f
    17d4:	ef e6       	ldi	r30, 0x6F	; 111
    17d6:	f1 e0       	ldi	r31, 0x01	; 1
    17d8:	fa a3       	std	Y+34, r31	; 0x22
    17da:	e9 a3       	std	Y+33, r30	; 0x21
    17dc:	f5 e0       	ldi	r31, 0x05	; 5
    17de:	fb a3       	std	Y+35, r31	; 0x23
    17e0:	e9 a1       	ldd	r30, Y+33	; 0x21
    17e2:	fa a1       	ldd	r31, Y+34	; 0x22
    17e4:	00 80       	ld	r0, Z
    17e6:	89 a1       	ldd	r24, Y+33	; 0x21
    17e8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	9a a3       	std	Y+34, r25	; 0x22
    17ee:	89 a3       	std	Y+33, r24	; 0x21
    17f0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    17f2:	f8 a1       	ldd	r31, Y+32	; 0x20
    17f4:	00 82       	st	Z, r0
    17f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17f8:	98 a1       	ldd	r25, Y+32	; 0x20
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	98 a3       	std	Y+32, r25	; 0x20
    17fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1800:	9b a1       	ldd	r25, Y+35	; 0x23
    1802:	91 50       	subi	r25, 0x01	; 1
    1804:	9b a3       	std	Y+35, r25	; 0x23
    1806:	eb a1       	ldd	r30, Y+35	; 0x23
    1808:	ee 23       	and	r30, r30
    180a:	51 f7       	brne	.-44     	; 0x17e0 <main+0x6c>
	Timer_ConfigType timer_config = {0, 7811, TIMER1, F_CLK_PRESCALE_1024, TIMER_COMPARE_MODE};
    180c:	ce 01       	movw	r24, r28
    180e:	43 96       	adiw	r24, 0x13	; 19
    1810:	9d a3       	std	Y+37, r25	; 0x25
    1812:	8c a3       	std	Y+36, r24	; 0x24
    1814:	e8 e6       	ldi	r30, 0x68	; 104
    1816:	f1 e0       	ldi	r31, 0x01	; 1
    1818:	ff a3       	std	Y+39, r31	; 0x27
    181a:	ee a3       	std	Y+38, r30	; 0x26
    181c:	f7 e0       	ldi	r31, 0x07	; 7
    181e:	f8 a7       	std	Y+40, r31	; 0x28
    1820:	ee a1       	ldd	r30, Y+38	; 0x26
    1822:	ff a1       	ldd	r31, Y+39	; 0x27
    1824:	00 80       	ld	r0, Z
    1826:	8e a1       	ldd	r24, Y+38	; 0x26
    1828:	9f a1       	ldd	r25, Y+39	; 0x27
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	9f a3       	std	Y+39, r25	; 0x27
    182e:	8e a3       	std	Y+38, r24	; 0x26
    1830:	ec a1       	ldd	r30, Y+36	; 0x24
    1832:	fd a1       	ldd	r31, Y+37	; 0x25
    1834:	00 82       	st	Z, r0
    1836:	8c a1       	ldd	r24, Y+36	; 0x24
    1838:	9d a1       	ldd	r25, Y+37	; 0x25
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	9d a3       	std	Y+37, r25	; 0x25
    183e:	8c a3       	std	Y+36, r24	; 0x24
    1840:	98 a5       	ldd	r25, Y+40	; 0x28
    1842:	91 50       	subi	r25, 0x01	; 1
    1844:	98 a7       	std	Y+40, r25	; 0x28
    1846:	e8 a5       	ldd	r30, Y+40	; 0x28
    1848:	ee 23       	and	r30, r30
    184a:	51 f7       	brne	.-44     	; 0x1820 <main+0xac>
	TWI_init(&twi_config);
    184c:	ce 01       	movw	r24, r28
    184e:	09 96       	adiw	r24, 0x09	; 9
    1850:	0e 94 11 11 	call	0x2222	; 0x2222 <TWI_init>
	UART_init(&uart_config);
    1854:	ce 01       	movw	r24, r28
    1856:	0e 96       	adiw	r24, 0x0e	; 14
    1858:	0e 94 b1 11 	call	0x2362	; 0x2362 <UART_init>
	SREG|=(1<<7);/* Global interrupt enable */
    185c:	af e5       	ldi	r26, 0x5F	; 95
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ef e5       	ldi	r30, 0x5F	; 95
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	80 68       	ori	r24, 0x80	; 128
    1868:	8c 93       	st	X, r24
	/*
	 * initializing HAL layer components
	 */
	PIR_init();
    186a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <PIR_init>
	DcMotor_Init();
    186e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <DcMotor_Init>
	Buzzer_init();
    1872:	0e 94 0b 06 	call	0xc16	; 0xc16 <Buzzer_init>

	/* Syncing the ECUs */
	UART_sendByte(UART_SYNC_CHAR);
    1876:	81 e4       	ldi	r24, 0x41	; 65
    1878:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <UART_sendByte>
	while(UART_recieveByte() != UART_SYNC_CHAR);
    187c:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_recieveByte>
    1880:	81 34       	cpi	r24, 0x41	; 65
    1882:	e1 f7       	brne	.-8      	; 0x187c <main+0x108>

	write_new_password();
    1884:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_new_password>

	while(TRUE)
	{

		UART_receiveString(login_attempt);
    1888:	ce 01       	movw	r24, r28
    188a:	03 96       	adiw	r24, 0x03	; 3
    188c:	0e 94 c9 12 	call	0x2592	; 0x2592 <UART_receiveString>
		is_login_successful = check_password(login_attempt);
    1890:	ce 01       	movw	r24, r28
    1892:	03 96       	adiw	r24, 0x03	; 3
    1894:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <check_password>
    1898:	8a 83       	std	Y+2, r24	; 0x02
		if(is_login_successful == TRUE)
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	09 f0       	breq	.+2      	; 0x18a2 <main+0x12e>
    18a0:	4a c0       	rjmp	.+148    	; 0x1936 <main+0x1c2>
		{
			UART_sendByte(CORRECT_PASSCODE_ID); /* telling the HMI ECU that the password is correct */
    18a2:	84 e5       	ldi	r24, 0x54	; 84
    18a4:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <UART_sendByte>
			UART_recieveByte();/* stores redundant system ok status */
    18a8:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_recieveByte>
			operator_request = UART_recieveByte();
    18ac:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_recieveByte>
    18b0:	89 83       	std	Y+1, r24	; 0x01
			if(operator_request == DOOR_OPEN_ID)
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	8b 32       	cpi	r24, 0x2B	; 43
    18b6:	c1 f5       	brne	.+112    	; 0x1928 <main+0x1b4>
			{
					Timer_init(&timer_config);
    18b8:	ce 01       	movw	r24, r28
    18ba:	43 96       	adiw	r24, 0x13	; 19
    18bc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <Timer_init>
					Timer_setCallBack(timer_callBack_motorOP, TIMER1);
    18c0:	8c e2       	ldi	r24, 0x2C	; 44
    18c2:	9d e0       	ldi	r25, 0x0D	; 13
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Timer_setCallBack>
					DcMotor_Rotate(CW, 100); /* Opening the door */
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	64 e6       	ldi	r22, 0x64	; 100
    18ce:	0e 94 4a 06 	call	0xc94	; 0xc94 <DcMotor_Rotate>
					/* Opening door state */
					while(is_door_open == FALSE){}
    18d2:	80 91 7d 01 	lds	r24, 0x017D
    18d6:	88 23       	and	r24, r24
    18d8:	e1 f3       	breq	.-8      	; 0x18d2 <main+0x15e>
					Timer_deInit(TIMER1); /* To stop the counter from counting */
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	0e 94 80 10 	call	0x2100	; 0x2100 <Timer_deInit>
					DcMotor_Rotate(STOP, 0);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	0e 94 4a 06 	call	0xc94	; 0xc94 <DcMotor_Rotate>

					/* People pass through send */
					while(PIR_getState() == LOGIC_HIGH){}
    18e8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <PIR_getState>
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	e1 f3       	breq	.-8      	; 0x18e8 <main+0x174>
					UART_sendByte(CLOSE_DOOR_STATE_ID);
    18f0:	83 e4       	ldi	r24, 0x43	; 67
    18f2:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <UART_sendByte>
					/* Turning the timer back on to begin closing the door */
					Timer_init(&timer_config);
    18f6:	ce 01       	movw	r24, r28
    18f8:	43 96       	adiw	r24, 0x13	; 19
    18fa:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <Timer_init>
					Timer_setCallBack(timer_callBack_motorOP, TIMER1);
    18fe:	8c e2       	ldi	r24, 0x2C	; 44
    1900:	9d e0       	ldi	r25, 0x0D	; 13
    1902:	61 e0       	ldi	r22, 0x01	; 1
    1904:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Timer_setCallBack>

					/* Closing door state */
					DcMotor_Rotate(ACW, 100); /* Closing the door */
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	64 e6       	ldi	r22, 0x64	; 100
    190c:	0e 94 4a 06 	call	0xc94	; 0xc94 <DcMotor_Rotate>
					while(is_door_open == TRUE){}
    1910:	80 91 7d 01 	lds	r24, 0x017D
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	e1 f3       	breq	.-8      	; 0x1910 <main+0x19c>
					Timer_deInit(TIMER1);/* Closing timer until needed in the future */
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	0e 94 80 10 	call	0x2100	; 0x2100 <Timer_deInit>
					DcMotor_Rotate(STOP, 0);
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	0e 94 4a 06 	call	0xc94	; 0xc94 <DcMotor_Rotate>
    1926:	b0 cf       	rjmp	.-160    	; 0x1888 <main+0x114>
					/* operation done */
			}
			else if(operator_request == CHANGE_PASSWORD_ID)
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	8d 32       	cpi	r24, 0x2D	; 45
    192c:	09 f0       	breq	.+2      	; 0x1930 <main+0x1bc>
    192e:	ac cf       	rjmp	.-168    	; 0x1888 <main+0x114>
			{
				write_new_password();
    1930:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_new_password>
    1934:	a9 cf       	rjmp	.-174    	; 0x1888 <main+0x114>
			}
		}
		else
		{
			UART_sendByte(FALSE_PASSCODE_ID); /* telling the HMI ECU that the password is incorrect */
    1936:	86 e4       	ldi	r24, 0x46	; 70
    1938:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <UART_sendByte>
			if(UART_recieveByte() == SYSTEM_NOK_ID)
    193c:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_recieveByte>
    1940:	87 35       	cpi	r24, 0x57	; 87
    1942:	09 f0       	breq	.+2      	; 0x1946 <main+0x1d2>
    1944:	a1 cf       	rjmp	.-190    	; 0x1888 <main+0x114>
			{
				Timer_init(&timer_config);
    1946:	ce 01       	movw	r24, r28
    1948:	43 96       	adiw	r24, 0x13	; 19
    194a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <Timer_init>
				Timer_setCallBack(timer_callBack_systemNOK_OP, TIMER1);
    194e:	88 e4       	ldi	r24, 0x48	; 72
    1950:	9d e0       	ldi	r25, 0x0D	; 13
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <Timer_setCallBack>
				Buzzer_on();
    1958:	0e 94 17 06 	call	0xc2e	; 0xc2e <Buzzer_on>

				while(is_timer_finished == FALSE){}
    195c:	80 91 7b 01 	lds	r24, 0x017B
    1960:	88 23       	and	r24, r24
    1962:	e1 f3       	breq	.-8      	; 0x195c <main+0x1e8>
				is_timer_finished = FALSE;
    1964:	10 92 7b 01 	sts	0x017B, r1
				Buzzer_off();
    1968:	0e 94 23 06 	call	0xc46	; 0xc46 <Buzzer_off>
				Timer_deInit(TIMER1);
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	0e 94 80 10 	call	0x2100	; 0x2100 <Timer_deInit>
    1972:	8a cf       	rjmp	.-236    	; 0x1888 <main+0x114>

00001974 <write_new_password>:
	}
	return 0;
}

void write_new_password(void)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	2d 97       	sbiw	r28, 0x0d	; 13
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
	uint8 is_password_true = FALSE_PASSCODE_ID;
    1988:	86 e4       	ldi	r24, 0x46	; 70
    198a:	89 83       	std	Y+1, r24	; 0x01
	//uint8 eeprom_address_index = 0;
	uint8 re_password[6], password[6];
	/*
	 * Checking that the password assignment is correct
	 */
	password_size = 0;
    198c:	10 92 7e 01 	sts	0x017E, r1
	do
	{
		UART_receiveString(password);
    1990:	ce 01       	movw	r24, r28
    1992:	08 96       	adiw	r24, 0x08	; 8
    1994:	0e 94 c9 12 	call	0x2592	; 0x2592 <UART_receiveString>
		UART_receiveString(re_password);
    1998:	ce 01       	movw	r24, r28
    199a:	02 96       	adiw	r24, 0x02	; 2
    199c:	0e 94 c9 12 	call	0x2592	; 0x2592 <UART_receiveString>
		if(!strcmp((char*)re_password, (char*)password))
    19a0:	ce 01       	movw	r24, r28
    19a2:	02 96       	adiw	r24, 0x02	; 2
    19a4:	9e 01       	movw	r18, r28
    19a6:	28 5f       	subi	r18, 0xF8	; 248
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	b9 01       	movw	r22, r18
    19ac:	0e 94 65 13 	call	0x26ca	; 0x26ca <strcmp>
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	11 f4       	brne	.+4      	; 0x19b8 <write_new_password+0x44>
		{
			is_password_true = CORRECT_PASSCODE_ID;
    19b4:	84 e5       	ldi	r24, 0x54	; 84
    19b6:	89 83       	std	Y+1, r24	; 0x01
		}
		UART_sendByte(is_password_true);
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <UART_sendByte>
	}while(is_password_true == FALSE_PASSCODE_ID);
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	86 34       	cpi	r24, 0x46	; 70
    19c2:	31 f3       	breq	.-52     	; 0x1990 <write_new_password+0x1c>
	{
		EEPROM_writeByte((uint16)(0x0200 + eeprom_address_index), password[eeprom_address_index]);
		password_size++;
	}
	*/
	EEPROM_writeByteStream(0x0200, password, &password_size);
    19c4:	9e 01       	movw	r18, r28
    19c6:	28 5f       	subi	r18, 0xF8	; 248
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	4e e7       	ldi	r20, 0x7E	; 126
    19cc:	51 e0       	ldi	r21, 0x01	; 1
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	92 e0       	ldi	r25, 0x02	; 2
    19d2:	b9 01       	movw	r22, r18
    19d4:	0e 94 30 07 	call	0xe60	; 0xe60 <EEPROM_writeByteStream>
}
    19d8:	2d 96       	adiw	r28, 0x0d	; 13
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <check_password>:

boolean check_password(uint8* re_password)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	2a 97       	sbiw	r28, 0x0a	; 10
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	99 87       	std	Y+9, r25	; 0x09
    1a00:	88 87       	std	Y+8, r24	; 0x08
	uint8 saved_password[6];
	uint8 eeprom_address_index = 0;
    1a02:	19 82       	std	Y+1, r1	; 0x01
	{
		EEPROM_readByte((uint16)(0x0200 + eeprom_address_index), &saved_password[eeprom_address_index]);
	}
	*/

	eeprom_address_index = EEPROM_readByteStream(0x0200, saved_password, password_size);
    1a04:	40 91 7e 01 	lds	r20, 0x017E
    1a08:	9e 01       	movw	r18, r28
    1a0a:	2e 5f       	subi	r18, 0xFE	; 254
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	92 e0       	ldi	r25, 0x02	; 2
    1a12:	b9 01       	movw	r22, r18
    1a14:	0e 94 99 07 	call	0xf32	; 0xf32 <EEPROM_readByteStream>
    1a18:	89 83       	std	Y+1, r24	; 0x01
	saved_password[eeprom_address_index] = '\0';
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	ce 01       	movw	r24, r28
    1a22:	02 96       	adiw	r24, 0x02	; 2
    1a24:	fc 01       	movw	r30, r24
    1a26:	e2 0f       	add	r30, r18
    1a28:	f3 1f       	adc	r31, r19
    1a2a:	10 82       	st	Z, r1

	return (!strcmp((char*)saved_password, (char*)re_password));
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	02 96       	adiw	r24, 0x02	; 2
    1a30:	28 85       	ldd	r18, Y+8	; 0x08
    1a32:	39 85       	ldd	r19, Y+9	; 0x09
    1a34:	b9 01       	movw	r22, r18
    1a36:	0e 94 65 13 	call	0x26ca	; 0x26ca <strcmp>
    1a3a:	1a 86       	std	Y+10, r1	; 0x0a
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	11 f4       	brne	.+4      	; 0x1a44 <check_password+0x5a>
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	8a 87       	std	Y+10, r24	; 0x0a
    1a44:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1a46:	2a 96       	adiw	r28, 0x0a	; 10
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <timer_callBack_motorOP>:

void timer_callBack_motorOP(void)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
	motor_ticks++;
    1a60:	80 91 7c 01 	lds	r24, 0x017C
    1a64:	8f 5f       	subi	r24, 0xFF	; 255
    1a66:	80 93 7c 01 	sts	0x017C, r24
	if(motor_ticks == NUM_OF_CTC_PER_15_SEC)
    1a6a:	80 91 7c 01 	lds	r24, 0x017C
    1a6e:	8f 30       	cpi	r24, 0x0F	; 15
    1a70:	61 f4       	brne	.+24     	; 0x1a8a <timer_callBack_motorOP+0x32>
	{
		/*
		 * if door is opened close it and viceversa
		 */
		if(is_door_open == TRUE)
    1a72:	80 91 7d 01 	lds	r24, 0x017D
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	19 f4       	brne	.+6      	; 0x1a80 <timer_callBack_motorOP+0x28>
		{
			is_door_open = FALSE;
    1a7a:	10 92 7d 01 	sts	0x017D, r1
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <timer_callBack_motorOP+0x2e>
		}
		else
		{
			is_door_open = TRUE;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	80 93 7d 01 	sts	0x017D, r24
		}
		motor_ticks = 0;
    1a86:	10 92 7c 01 	sts	0x017C, r1
	}
}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <timer_callBack_systemNOK_OP>:

void timer_callBack_systemNOK_OP(void)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	system_ticks++;
    1a98:	80 91 7a 01 	lds	r24, 0x017A
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	80 93 7a 01 	sts	0x017A, r24
	if(system_ticks == NUM_OF_CTC_PER_MIN)
    1aa2:	80 91 7a 01 	lds	r24, 0x017A
    1aa6:	8c 33       	cpi	r24, 0x3C	; 60
    1aa8:	29 f4       	brne	.+10     	; 0x1ab4 <timer_callBack_systemNOK_OP+0x24>
	{
		system_ticks = 0;
    1aaa:	10 92 7a 01 	sts	0x017A, r1
		is_timer_finished = TRUE;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	80 93 7b 01 	sts	0x017B, r24
	}
}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <PIR_init>:
#include "pir.h"
#include "gpio.h"


void PIR_init(void)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORT_ID, PIR_PIN_ID, PIN_INPUT);
    1ac2:	82 e0       	ldi	r24, 0x02	; 2
    1ac4:	62 e0       	ldi	r22, 0x02	; 2
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_setupPinDirection>
}
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <PIR_getState>:

uint8 PIR_getState(void)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	0f 92       	push	r0
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	uint8 pir_state_value;
	GPIO_readPin(PIR_PORT_ID, PIR_PIN_ID, &pir_state_value);
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	62 e0       	ldi	r22, 0x02	; 2
    1ae0:	9e 01       	movw	r18, r28
    1ae2:	2f 5f       	subi	r18, 0xFF	; 255
    1ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae6:	a9 01       	movw	r20, r18
    1ae8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <GPIO_readPin>

	return pir_state_value;
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <PWM_Timer0_Setup>:
#include "gpio.h"
#include "common_macros.h"
#include "avr/io.h"

static void PWM_Timer0_Setup(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	/*
     * Force output compare is set to zero for PWM mode
     */
    TIMER0_TCCR_REG.timer0_tccr.FOC_bit = LOGIC_LOW;
    1afe:	e3 e5       	ldi	r30, 0x53	; 83
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	8f 77       	andi	r24, 0x7F	; 127
    1b06:	80 83       	st	Z, r24
    /*
     * Selecting generation type
     */
    TIMER0_TCCR_REG.timer0_tccr.WGM00_bit = LOGIC_HIGH;
    1b08:	e3 e5       	ldi	r30, 0x53	; 83
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 64       	ori	r24, 0x40	; 64
    1b10:	80 83       	st	Z, r24
    TIMER0_TCCR_REG.timer0_tccr.WGM01_bit = LOGIC_HIGH;
    1b12:	e3 e5       	ldi	r30, 0x53	; 83
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	88 60       	ori	r24, 0x08	; 8
    1b1a:	80 83       	st	Z, r24
    /*
     * Selecting the line that generates the input and its mode (inverting or non inverting)
     */
    TIMER0_TCCR_REG.timer0_tccr.COM_bits = TIMER0_FAST_PWM_OCR_NON_INVERTING;
    1b1c:	e3 e5       	ldi	r30, 0x53	; 83
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	8f 7c       	andi	r24, 0xCF	; 207
    1b24:	80 62       	ori	r24, 0x20	; 32
    1b26:	80 83       	st	Z, r24
    /*
     * selecting the clk and its prescale
     */
    TIMER0_TCCR_REG.timer0_tccr.Clk_select_bits = TIMER0_PRESCALE_SELECT;
    1b28:	e3 e5       	ldi	r30, 0x53	; 83
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 7f       	andi	r24, 0xF8	; 248
    1b30:	83 60       	ori	r24, 0x03	; 3
    1b32:	80 83       	st	Z, r24
}
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <PWM_Timer0_Start>:

void PWM_Timer0_Start(uint8 pwm_duty_cycle)
{
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	0f 92       	push	r0
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	89 83       	std	Y+1, r24	; 0x01
    /*
     * Selecting timer count start value
     */
    TCNT0 = TIMER0_START_COUNT_VALUE;
    1b4a:	e2 e5       	ldi	r30, 0x52	; 82
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	10 82       	st	Z, r1
    /*
     * Selecting the duty cycle value
     */
    OCR0 = (uint8)((float32)pwm_duty_cycle*2.56 -1);
    1b50:	0c e5       	ldi	r16, 0x5C	; 92
    1b52:	10 e0       	ldi	r17, 0x00	; 0
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e0       	ldi	r26, 0x00	; 0
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	0e 94 9d 03 	call	0x73a	; 0x73a <__floatunsisf>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	2a e0       	ldi	r18, 0x0A	; 10
    1b70:	37 ed       	ldi	r19, 0xD7	; 215
    1b72:	43 e2       	ldi	r20, 0x23	; 35
    1b74:	50 e4       	ldi	r21, 0x40	; 64
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	80 83       	st	Z, r24
    /*
	 * Setting OCR to output mode
	 */
	GPIO_setupPinDirection(TIMER0_OCR0_PORT_ID, TIMER0_OCR0_PIN_ID, PIN_OUTPUT);
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	63 e0       	ldi	r22, 0x03	; 3
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	0e 94 2c 08 	call	0x1058	; 0x1058 <GPIO_setupPinDirection>
    /*
     * intial values and data
     */
    PWM_Timer0_Setup();
    1bac:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <PWM_Timer0_Setup>
}
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <__vector_11>:
 ******************************************************/
/*
 * Timer 0 ISRs
 */
ISR(TIMER0_OVF_vect)
{
    1bbc:	1f 92       	push	r1
    1bbe:	0f 92       	push	r0
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	0f 92       	push	r0
    1bc4:	11 24       	eor	r1, r1
    1bc6:	2f 93       	push	r18
    1bc8:	3f 93       	push	r19
    1bca:	4f 93       	push	r20
    1bcc:	5f 93       	push	r21
    1bce:	6f 93       	push	r22
    1bd0:	7f 93       	push	r23
    1bd2:	8f 93       	push	r24
    1bd4:	9f 93       	push	r25
    1bd6:	af 93       	push	r26
    1bd8:	bf 93       	push	r27
    1bda:	ef 93       	push	r30
    1bdc:	ff 93       	push	r31
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0_ptr != NULL_PTR)
    1be6:	80 91 7f 01 	lds	r24, 0x017F
    1bea:	90 91 80 01 	lds	r25, 0x0180
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	29 f0       	breq	.+10     	; 0x1bfc <__vector_11+0x40>
	{
		(*g_timer0_ptr)();
    1bf2:	e0 91 7f 01 	lds	r30, 0x017F
    1bf6:	f0 91 80 01 	lds	r31, 0x0180
    1bfa:	09 95       	icall
	}
}
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	ff 91       	pop	r31
    1c02:	ef 91       	pop	r30
    1c04:	bf 91       	pop	r27
    1c06:	af 91       	pop	r26
    1c08:	9f 91       	pop	r25
    1c0a:	8f 91       	pop	r24
    1c0c:	7f 91       	pop	r23
    1c0e:	6f 91       	pop	r22
    1c10:	5f 91       	pop	r21
    1c12:	4f 91       	pop	r20
    1c14:	3f 91       	pop	r19
    1c16:	2f 91       	pop	r18
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	0f 90       	pop	r0
    1c1e:	1f 90       	pop	r1
    1c20:	18 95       	reti

00001c22 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1c22:	1f 92       	push	r1
    1c24:	0f 92       	push	r0
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	0f 92       	push	r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	2f 93       	push	r18
    1c2e:	3f 93       	push	r19
    1c30:	4f 93       	push	r20
    1c32:	5f 93       	push	r21
    1c34:	6f 93       	push	r22
    1c36:	7f 93       	push	r23
    1c38:	8f 93       	push	r24
    1c3a:	9f 93       	push	r25
    1c3c:	af 93       	push	r26
    1c3e:	bf 93       	push	r27
    1c40:	ef 93       	push	r30
    1c42:	ff 93       	push	r31
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0_ptr != NULL_PTR)
    1c4c:	80 91 7f 01 	lds	r24, 0x017F
    1c50:	90 91 80 01 	lds	r25, 0x0180
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	29 f0       	breq	.+10     	; 0x1c62 <__vector_10+0x40>
	{
		(*g_timer0_ptr)();
    1c58:	e0 91 7f 01 	lds	r30, 0x017F
    1c5c:	f0 91 80 01 	lds	r31, 0x0180
    1c60:	09 95       	icall
	}
}
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	ff 91       	pop	r31
    1c68:	ef 91       	pop	r30
    1c6a:	bf 91       	pop	r27
    1c6c:	af 91       	pop	r26
    1c6e:	9f 91       	pop	r25
    1c70:	8f 91       	pop	r24
    1c72:	7f 91       	pop	r23
    1c74:	6f 91       	pop	r22
    1c76:	5f 91       	pop	r21
    1c78:	4f 91       	pop	r20
    1c7a:	3f 91       	pop	r19
    1c7c:	2f 91       	pop	r18
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	0f 90       	pop	r0
    1c84:	1f 90       	pop	r1
    1c86:	18 95       	reti

00001c88 <__vector_9>:

/*
 * Timer 1 ISRs
 */
ISR(TIMER1_OVF_vect)
{
    1c88:	1f 92       	push	r1
    1c8a:	0f 92       	push	r0
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	0f 92       	push	r0
    1c90:	11 24       	eor	r1, r1
    1c92:	2f 93       	push	r18
    1c94:	3f 93       	push	r19
    1c96:	4f 93       	push	r20
    1c98:	5f 93       	push	r21
    1c9a:	6f 93       	push	r22
    1c9c:	7f 93       	push	r23
    1c9e:	8f 93       	push	r24
    1ca0:	9f 93       	push	r25
    1ca2:	af 93       	push	r26
    1ca4:	bf 93       	push	r27
    1ca6:	ef 93       	push	r30
    1ca8:	ff 93       	push	r31
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_ptr != NULL_PTR)
    1cb2:	80 91 81 01 	lds	r24, 0x0181
    1cb6:	90 91 82 01 	lds	r25, 0x0182
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	29 f0       	breq	.+10     	; 0x1cc8 <__vector_9+0x40>
	{
		(*g_timer1_ptr)();
    1cbe:	e0 91 81 01 	lds	r30, 0x0181
    1cc2:	f0 91 82 01 	lds	r31, 0x0182
    1cc6:	09 95       	icall
	}
}
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	ff 91       	pop	r31
    1cce:	ef 91       	pop	r30
    1cd0:	bf 91       	pop	r27
    1cd2:	af 91       	pop	r26
    1cd4:	9f 91       	pop	r25
    1cd6:	8f 91       	pop	r24
    1cd8:	7f 91       	pop	r23
    1cda:	6f 91       	pop	r22
    1cdc:	5f 91       	pop	r21
    1cde:	4f 91       	pop	r20
    1ce0:	3f 91       	pop	r19
    1ce2:	2f 91       	pop	r18
    1ce4:	0f 90       	pop	r0
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	0f 90       	pop	r0
    1cea:	1f 90       	pop	r1
    1cec:	18 95       	reti

00001cee <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1cee:	1f 92       	push	r1
    1cf0:	0f 92       	push	r0
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	0f 92       	push	r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	2f 93       	push	r18
    1cfa:	3f 93       	push	r19
    1cfc:	4f 93       	push	r20
    1cfe:	5f 93       	push	r21
    1d00:	6f 93       	push	r22
    1d02:	7f 93       	push	r23
    1d04:	8f 93       	push	r24
    1d06:	9f 93       	push	r25
    1d08:	af 93       	push	r26
    1d0a:	bf 93       	push	r27
    1d0c:	ef 93       	push	r30
    1d0e:	ff 93       	push	r31
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_ptr != NULL_PTR)
    1d18:	80 91 81 01 	lds	r24, 0x0181
    1d1c:	90 91 82 01 	lds	r25, 0x0182
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	29 f0       	breq	.+10     	; 0x1d2e <__vector_7+0x40>
	{
		(*g_timer1_ptr)();
    1d24:	e0 91 81 01 	lds	r30, 0x0181
    1d28:	f0 91 82 01 	lds	r31, 0x0182
    1d2c:	09 95       	icall
	}
}
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	0f 90       	pop	r0
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	0f 90       	pop	r0
    1d50:	1f 90       	pop	r1
    1d52:	18 95       	reti

00001d54 <__vector_5>:

/*
 * Timer 2 ISRs
 */
ISR(TIMER2_OVF_vect)
{
    1d54:	1f 92       	push	r1
    1d56:	0f 92       	push	r0
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	0f 92       	push	r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	2f 93       	push	r18
    1d60:	3f 93       	push	r19
    1d62:	4f 93       	push	r20
    1d64:	5f 93       	push	r21
    1d66:	6f 93       	push	r22
    1d68:	7f 93       	push	r23
    1d6a:	8f 93       	push	r24
    1d6c:	9f 93       	push	r25
    1d6e:	af 93       	push	r26
    1d70:	bf 93       	push	r27
    1d72:	ef 93       	push	r30
    1d74:	ff 93       	push	r31
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2_ptr != NULL_PTR)
    1d7e:	80 91 83 01 	lds	r24, 0x0183
    1d82:	90 91 84 01 	lds	r25, 0x0184
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	29 f0       	breq	.+10     	; 0x1d94 <__vector_5+0x40>
	{
		(*g_timer2_ptr)();
    1d8a:	e0 91 83 01 	lds	r30, 0x0183
    1d8e:	f0 91 84 01 	lds	r31, 0x0184
    1d92:	09 95       	icall
	}
}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	ff 91       	pop	r31
    1d9a:	ef 91       	pop	r30
    1d9c:	bf 91       	pop	r27
    1d9e:	af 91       	pop	r26
    1da0:	9f 91       	pop	r25
    1da2:	8f 91       	pop	r24
    1da4:	7f 91       	pop	r23
    1da6:	6f 91       	pop	r22
    1da8:	5f 91       	pop	r21
    1daa:	4f 91       	pop	r20
    1dac:	3f 91       	pop	r19
    1dae:	2f 91       	pop	r18
    1db0:	0f 90       	pop	r0
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	0f 90       	pop	r0
    1db6:	1f 90       	pop	r1
    1db8:	18 95       	reti

00001dba <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1dba:	1f 92       	push	r1
    1dbc:	0f 92       	push	r0
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	0f 92       	push	r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	2f 93       	push	r18
    1dc6:	3f 93       	push	r19
    1dc8:	4f 93       	push	r20
    1dca:	5f 93       	push	r21
    1dcc:	6f 93       	push	r22
    1dce:	7f 93       	push	r23
    1dd0:	8f 93       	push	r24
    1dd2:	9f 93       	push	r25
    1dd4:	af 93       	push	r26
    1dd6:	bf 93       	push	r27
    1dd8:	ef 93       	push	r30
    1dda:	ff 93       	push	r31
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2_ptr != NULL_PTR)
    1de4:	80 91 83 01 	lds	r24, 0x0183
    1de8:	90 91 84 01 	lds	r25, 0x0184
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	29 f0       	breq	.+10     	; 0x1dfa <__vector_4+0x40>
	{
		(*g_timer2_ptr)();
    1df0:	e0 91 83 01 	lds	r30, 0x0183
    1df4:	f0 91 84 01 	lds	r31, 0x0184
    1df8:	09 95       	icall
	}
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	ff 91       	pop	r31
    1e00:	ef 91       	pop	r30
    1e02:	bf 91       	pop	r27
    1e04:	af 91       	pop	r26
    1e06:	9f 91       	pop	r25
    1e08:	8f 91       	pop	r24
    1e0a:	7f 91       	pop	r23
    1e0c:	6f 91       	pop	r22
    1e0e:	5f 91       	pop	r21
    1e10:	4f 91       	pop	r20
    1e12:	3f 91       	pop	r19
    1e14:	2f 91       	pop	r18
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	0f 90       	pop	r0
    1e1c:	1f 90       	pop	r1
    1e1e:	18 95       	reti

00001e20 <Timer_init>:
/******************************************************
 * 				Function Definitions
 ******************************************************/

void Timer_init(const Timer_ConfigType* Config_Ptr)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <Timer_init+0x6>
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <Timer_init+0x8>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <Timer_init+0xa>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    1e32:	e9 81       	ldd	r30, Y+1	; 0x01
    1e34:	fa 81       	ldd	r31, Y+2	; 0x02
    1e36:	84 81       	ldd	r24, Z+4	; 0x04
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	3e 83       	std	Y+6, r19	; 0x06
    1e3e:	2d 83       	std	Y+5, r18	; 0x05
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	91 05       	cpc	r25, r1
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <Timer_init+0x2c>
    1e4a:	5a c0       	rjmp	.+180    	; 0x1f00 <Timer_init+0xe0>
    1e4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e4e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <Timer_init+0x38>
    1e56:	a4 c0       	rjmp	.+328    	; 0x1fa0 <Timer_init+0x180>
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <Timer_init+0x42>
    1e60:	46 c1       	rjmp	.+652    	; 0x20ee <Timer_init+0x2ce>
	{
	case TIMER0:
		SET_BIT(TCCR0, FOC0);
    1e62:	a3 e5       	ldi	r26, 0x53	; 83
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e3 e5       	ldi	r30, 0x53	; 83
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 68       	ori	r24, 0x80	; 128
    1e6e:	8c 93       	st	X, r24
		TCNT0 = Config_Ptr->timer_InitialValue;
    1e70:	a2 e5       	ldi	r26, 0x52	; 82
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e9 81       	ldd	r30, Y+1	; 0x01
    1e76:	fa 81       	ldd	r31, Y+2	; 0x02
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode == TIMER_COMPARE_MODE)
    1e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e80:	fa 81       	ldd	r31, Y+2	; 0x02
    1e82:	86 81       	ldd	r24, Z+6	; 0x06
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	e9 f4       	brne	.+58     	; 0x1ec2 <Timer_init+0xa2>
		{
			SET_BIT(TCCR0, WGM01);
    1e88:	a3 e5       	ldi	r26, 0x53	; 83
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e3 e5       	ldi	r30, 0x53	; 83
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	88 60       	ori	r24, 0x08	; 8
    1e94:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    1e96:	ac e5       	ldi	r26, 0x5C	; 92
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE0);
    1ea4:	a9 e5       	ldi	r26, 0x59	; 89
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e9 e5       	ldi	r30, 0x59	; 89
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	82 60       	ori	r24, 0x02	; 2
    1eb0:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, TOIE0);
    1eb2:	a9 e5       	ldi	r26, 0x59	; 89
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e9 e5       	ldi	r30, 0x59	; 89
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8e 7f       	andi	r24, 0xFE	; 254
    1ebe:	8c 93       	st	X, r24
    1ec0:	0e c0       	rjmp	.+28     	; 0x1ede <Timer_init+0xbe>
		}
		else
		{
			SET_BIT(TIMSK, TOIE0);
    1ec2:	a9 e5       	ldi	r26, 0x59	; 89
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e9 e5       	ldi	r30, 0x59	; 89
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	81 60       	ori	r24, 0x01	; 1
    1ece:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, OCIE0);
    1ed0:	a9 e5       	ldi	r26, 0x59	; 89
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e9 e5       	ldi	r30, 0x59	; 89
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	8d 7f       	andi	r24, 0xFD	; 253
    1edc:	8c 93       	st	X, r24
		}

		if((Config_Ptr->timer_clock) == F_CLK_PRESCALE_32)
    1ede:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee2:	85 81       	ldd	r24, Z+5	; 0x05
    1ee4:	86 30       	cpi	r24, 0x06	; 6
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <Timer_init+0xca>
    1ee8:	02 c1       	rjmp	.+516    	; 0x20ee <Timer_init+0x2ce>
			return;
		}
		/*
		 * setting up the interrupt
		 */
		TCCR0 |= (Config_Ptr->timer_clock);
    1eea:	a3 e5       	ldi	r26, 0x53	; 83
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e3 e5       	ldi	r30, 0x53	; 83
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	90 81       	ld	r25, Z
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	85 81       	ldd	r24, Z+5	; 0x05
    1efa:	89 2b       	or	r24, r25
    1efc:	8c 93       	st	X, r24
    1efe:	f7 c0       	rjmp	.+494    	; 0x20ee <Timer_init+0x2ce>
		break;
	case TIMER1:
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1f00:	ef e4       	ldi	r30, 0x4F	; 79
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	8c e0       	ldi	r24, 0x0C	; 12
    1f06:	80 83       	st	Z, r24
		TCNT1 = Config_Ptr->timer_InitialValue;
    1f08:	ac e4       	ldi	r26, 0x4C	; 76
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	9c 93       	st	X, r25
    1f18:	8e 93       	st	-X, r24
		if(Config_Ptr->timer_mode == TIMER_COMPARE_MODE)
    1f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1e:	86 81       	ldd	r24, Z+6	; 0x06
    1f20:	82 30       	cpi	r24, 0x02	; 2
    1f22:	f9 f4       	brne	.+62     	; 0x1f62 <Timer_init+0x142>
		{
			TCCR1B |= (1<<WGM12);
    1f24:	ae e4       	ldi	r26, 0x4E	; 78
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	ee e4       	ldi	r30, 0x4E	; 78
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	88 60       	ori	r24, 0x08	; 8
    1f30:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    1f32:	aa e4       	ldi	r26, 0x4A	; 74
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e9 81       	ldd	r30, Y+1	; 0x01
    1f38:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	11 96       	adiw	r26, 0x01	; 1
    1f40:	9c 93       	st	X, r25
    1f42:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A);
    1f44:	a9 e5       	ldi	r26, 0x59	; 89
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e9 e5       	ldi	r30, 0x59	; 89
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	80 61       	ori	r24, 0x10	; 16
    1f50:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, TOIE1);
    1f52:	a9 e5       	ldi	r26, 0x59	; 89
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e9 e5       	ldi	r30, 0x59	; 89
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8b 7f       	andi	r24, 0xFB	; 251
    1f5e:	8c 93       	st	X, r24
    1f60:	0e c0       	rjmp	.+28     	; 0x1f7e <Timer_init+0x15e>
		}
		else
		{
			SET_BIT(TIMSK, TOIE1);
    1f62:	a9 e5       	ldi	r26, 0x59	; 89
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e9 e5       	ldi	r30, 0x59	; 89
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	84 60       	ori	r24, 0x04	; 4
    1f6e:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, OCIE1A);
    1f70:	a9 e5       	ldi	r26, 0x59	; 89
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e9 e5       	ldi	r30, 0x59	; 89
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	8f 7e       	andi	r24, 0xEF	; 239
    1f7c:	8c 93       	st	X, r24
		}

		if((Config_Ptr->timer_clock) == F_CLK_PRESCALE_32)
    1f7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f80:	fa 81       	ldd	r31, Y+2	; 0x02
    1f82:	85 81       	ldd	r24, Z+5	; 0x05
    1f84:	86 30       	cpi	r24, 0x06	; 6
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <Timer_init+0x16a>
    1f88:	b2 c0       	rjmp	.+356    	; 0x20ee <Timer_init+0x2ce>
			return;
		}
		/*
		 * setting up the interrupt
		 */
		TCCR1B |= Config_Ptr->timer_clock;
    1f8a:	ae e4       	ldi	r26, 0x4E	; 78
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	ee e4       	ldi	r30, 0x4E	; 78
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	90 81       	ld	r25, Z
    1f94:	e9 81       	ldd	r30, Y+1	; 0x01
    1f96:	fa 81       	ldd	r31, Y+2	; 0x02
    1f98:	85 81       	ldd	r24, Z+5	; 0x05
    1f9a:	89 2b       	or	r24, r25
    1f9c:	8c 93       	st	X, r24
    1f9e:	a7 c0       	rjmp	.+334    	; 0x20ee <Timer_init+0x2ce>
		break;
	case TIMER2:
		SET_BIT(TCCR2, FOC2);
    1fa0:	a5 e4       	ldi	r26, 0x45	; 69
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e5 e4       	ldi	r30, 0x45	; 69
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 68       	ori	r24, 0x80	; 128
    1fac:	8c 93       	st	X, r24
		TCNT2 = Config_Ptr->timer_InitialValue;
    1fae:	a4 e4       	ldi	r26, 0x44	; 68
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	8c 93       	st	X, r24
		/*
		 * setting up the interrupt
		 */
		if(Config_Ptr->timer_mode == TIMER_COMPARE_MODE)
    1fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc0:	86 81       	ldd	r24, Z+6	; 0x06
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	e9 f4       	brne	.+58     	; 0x2000 <Timer_init+0x1e0>
		{
			SET_BIT(TCCR2, WGM21);
    1fc6:	a5 e4       	ldi	r26, 0x45	; 69
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e5 e4       	ldi	r30, 0x45	; 69
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	88 60       	ori	r24, 0x08	; 8
    1fd2:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    1fd4:	a3 e4       	ldi	r26, 0x43	; 67
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fda:	fa 81       	ldd	r31, Y+2	; 0x02
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2);
    1fe2:	a9 e5       	ldi	r26, 0x59	; 89
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e9 e5       	ldi	r30, 0x59	; 89
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	80 68       	ori	r24, 0x80	; 128
    1fee:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, TOIE2);
    1ff0:	a9 e5       	ldi	r26, 0x59	; 89
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e9 e5       	ldi	r30, 0x59	; 89
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8f 7b       	andi	r24, 0xBF	; 191
    1ffc:	8c 93       	st	X, r24
    1ffe:	0e c0       	rjmp	.+28     	; 0x201c <Timer_init+0x1fc>
		}
		else
		{
			SET_BIT(TIMSK, TOIE2);
    2000:	a9 e5       	ldi	r26, 0x59	; 89
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e9 e5       	ldi	r30, 0x59	; 89
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	80 64       	ori	r24, 0x40	; 64
    200c:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, OCIE2);
    200e:	a9 e5       	ldi	r26, 0x59	; 89
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e9 e5       	ldi	r30, 0x59	; 89
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	8f 77       	andi	r24, 0x7F	; 127
    201a:	8c 93       	st	X, r24
		}


		switch(Config_Ptr->timer_clock)
    201c:	e9 81       	ldd	r30, Y+1	; 0x01
    201e:	fa 81       	ldd	r31, Y+2	; 0x02
    2020:	85 81       	ldd	r24, Z+5	; 0x05
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	3c 83       	std	Y+4, r19	; 0x04
    2028:	2b 83       	std	Y+3, r18	; 0x03
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	84 30       	cpi	r24, 0x04	; 4
    2030:	91 05       	cpc	r25, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <Timer_init+0x216>
    2034:	4d c0       	rjmp	.+154    	; 0x20d0 <Timer_init+0x2b0>
    2036:	2b 81       	ldd	r18, Y+3	; 0x03
    2038:	3c 81       	ldd	r19, Y+4	; 0x04
    203a:	25 30       	cpi	r18, 0x05	; 5
    203c:	31 05       	cpc	r19, r1
    203e:	84 f4       	brge	.+32     	; 0x2060 <Timer_init+0x240>
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	91 05       	cpc	r25, r1
    2048:	19 f1       	breq	.+70     	; 0x2090 <Timer_init+0x270>
    204a:	2b 81       	ldd	r18, Y+3	; 0x03
    204c:	3c 81       	ldd	r19, Y+4	; 0x04
    204e:	23 30       	cpi	r18, 0x03	; 3
    2050:	31 05       	cpc	r19, r1
    2052:	74 f5       	brge	.+92     	; 0x20b0 <Timer_init+0x290>
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	91 05       	cpc	r25, r1
    205c:	89 f0       	breq	.+34     	; 0x2080 <Timer_init+0x260>
    205e:	47 c0       	rjmp	.+142    	; 0x20ee <Timer_init+0x2ce>
    2060:	2b 81       	ldd	r18, Y+3	; 0x03
    2062:	3c 81       	ldd	r19, Y+4	; 0x04
    2064:	26 30       	cpi	r18, 0x06	; 6
    2066:	31 05       	cpc	r19, r1
    2068:	d9 f0       	breq	.+54     	; 0x20a0 <Timer_init+0x280>
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	86 30       	cpi	r24, 0x06	; 6
    2070:	91 05       	cpc	r25, r1
    2072:	b4 f1       	brlt	.+108    	; 0x20e0 <Timer_init+0x2c0>
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	27 30       	cpi	r18, 0x07	; 7
    207a:	31 05       	cpc	r19, r1
    207c:	09 f1       	breq	.+66     	; 0x20c0 <Timer_init+0x2a0>
    207e:	37 c0       	rjmp	.+110    	; 0x20ee <Timer_init+0x2ce>
		{
		case F_CLK_PRESCALE_1:
			TCCR2 |= TIMER2_CLK_PRESCALE_1;
    2080:	a5 e4       	ldi	r26, 0x45	; 69
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e5 e4       	ldi	r30, 0x45	; 69
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	81 60       	ori	r24, 0x01	; 1
    208c:	8c 93       	st	X, r24
    208e:	2f c0       	rjmp	.+94     	; 0x20ee <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_8:
			TCCR2 |= TIMER2_CLK_PRESCALE_8;
    2090:	a5 e4       	ldi	r26, 0x45	; 69
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e5 e4       	ldi	r30, 0x45	; 69
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	82 60       	ori	r24, 0x02	; 2
    209c:	8c 93       	st	X, r24
    209e:	27 c0       	rjmp	.+78     	; 0x20ee <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_32:
			TCCR2 |= TIMER2_CLK_PRESCALE_32;
    20a0:	a5 e4       	ldi	r26, 0x45	; 69
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e5 e4       	ldi	r30, 0x45	; 69
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	83 60       	ori	r24, 0x03	; 3
    20ac:	8c 93       	st	X, r24
    20ae:	1f c0       	rjmp	.+62     	; 0x20ee <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_64:
			TCCR2 |= TIMER2_CLK_PRESCALE_64;
    20b0:	a5 e4       	ldi	r26, 0x45	; 69
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e5 e4       	ldi	r30, 0x45	; 69
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	84 60       	ori	r24, 0x04	; 4
    20bc:	8c 93       	st	X, r24
    20be:	17 c0       	rjmp	.+46     	; 0x20ee <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_128:
			TCCR2 |= TIMER2_CLK_PRESCALE_128;
    20c0:	a5 e4       	ldi	r26, 0x45	; 69
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e5 e4       	ldi	r30, 0x45	; 69
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	85 60       	ori	r24, 0x05	; 5
    20cc:	8c 93       	st	X, r24
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_256:
			TCCR2 |= TIMER2_CLK_PRESCALE_256;
    20d0:	a5 e4       	ldi	r26, 0x45	; 69
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e5 e4       	ldi	r30, 0x45	; 69
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	86 60       	ori	r24, 0x06	; 6
    20dc:	8c 93       	st	X, r24
    20de:	07 c0       	rjmp	.+14     	; 0x20ee <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_1024:
			TCCR2 |= TIMER2_CLK_PRESCALE_1024;
    20e0:	a5 e4       	ldi	r26, 0x45	; 69
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e5 e4       	ldi	r30, 0x45	; 69
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	87 60       	ori	r24, 0x07	; 7
    20ec:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    20ee:	26 96       	adiw	r28, 0x06	; 6
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_ID)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	00 d0       	rcall	.+0      	; 0x2106 <Timer_deInit+0x6>
    2106:	0f 92       	push	r0
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_ID)
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	3b 83       	std	Y+3, r19	; 0x03
    2116:	2a 83       	std	Y+2, r18	; 0x02
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	9b 81       	ldd	r25, Y+3	; 0x03
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	91 05       	cpc	r25, r1
    2120:	d9 f0       	breq	.+54     	; 0x2158 <Timer_deInit+0x58>
    2122:	2a 81       	ldd	r18, Y+2	; 0x02
    2124:	3b 81       	ldd	r19, Y+3	; 0x03
    2126:	22 30       	cpi	r18, 0x02	; 2
    2128:	31 05       	cpc	r19, r1
    212a:	59 f1       	breq	.+86     	; 0x2182 <Timer_deInit+0x82>
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	c1 f5       	brne	.+112    	; 0x21a4 <Timer_deInit+0xa4>
	{
	case TIMER0:
		TCCR0 = 0;
    2134:	e3 e5       	ldi	r30, 0x53	; 83
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE0);
    213a:	a9 e5       	ldi	r26, 0x59	; 89
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e9 e5       	ldi	r30, 0x59	; 89
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	8d 7f       	andi	r24, 0xFD	; 253
    2146:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE0);
    2148:	a9 e5       	ldi	r26, 0x59	; 89
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e9 e5       	ldi	r30, 0x59	; 89
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	8e 7f       	andi	r24, 0xFE	; 254
    2154:	8c 93       	st	X, r24
    2156:	26 c0       	rjmp	.+76     	; 0x21a4 <Timer_deInit+0xa4>
		break;
	case TIMER1:
		TCCR1A = 0;
    2158:	ef e4       	ldi	r30, 0x4F	; 79
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	10 82       	st	Z, r1
		TCCR1B = 0;
    215e:	ee e4       	ldi	r30, 0x4E	; 78
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1);
    2164:	a9 e5       	ldi	r26, 0x59	; 89
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e9 e5       	ldi	r30, 0x59	; 89
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	8b 7f       	andi	r24, 0xFB	; 251
    2170:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, OCIE1A);
    2172:	a9 e5       	ldi	r26, 0x59	; 89
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e9 e5       	ldi	r30, 0x59	; 89
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8f 7e       	andi	r24, 0xEF	; 239
    217e:	8c 93       	st	X, r24
    2180:	11 c0       	rjmp	.+34     	; 0x21a4 <Timer_deInit+0xa4>
		break;
	case TIMER2:
		TCCR2 = 0;
    2182:	e5 e4       	ldi	r30, 0x45	; 69
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2);
    2188:	a9 e5       	ldi	r26, 0x59	; 89
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e9 e5       	ldi	r30, 0x59	; 89
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	8f 77       	andi	r24, 0x7F	; 127
    2194:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2);
    2196:	a9 e5       	ldi	r26, 0x59	; 89
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e9 e5       	ldi	r30, 0x59	; 89
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8f 7b       	andi	r24, 0xBF	; 191
    21a2:	8c 93       	st	X, r24
		break;
	}
}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <Timer_setCallBack+0x6>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <Timer_setCallBack+0x8>
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	9a 83       	std	Y+2, r25	; 0x02
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timer_ID)
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	3d 83       	std	Y+5, r19	; 0x05
    21cc:	2c 83       	std	Y+4, r18	; 0x04
    21ce:	8c 81       	ldd	r24, Y+4	; 0x04
    21d0:	9d 81       	ldd	r25, Y+5	; 0x05
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	91 05       	cpc	r25, r1
    21d6:	81 f0       	breq	.+32     	; 0x21f8 <Timer_setCallBack+0x48>
    21d8:	2c 81       	ldd	r18, Y+4	; 0x04
    21da:	3d 81       	ldd	r19, Y+5	; 0x05
    21dc:	22 30       	cpi	r18, 0x02	; 2
    21de:	31 05       	cpc	r19, r1
    21e0:	91 f0       	breq	.+36     	; 0x2206 <Timer_setCallBack+0x56>
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	9d 81       	ldd	r25, Y+5	; 0x05
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	a1 f4       	brne	.+40     	; 0x2212 <Timer_setCallBack+0x62>
	{
	case TIMER0:
		g_timer0_ptr = a_ptr;
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	90 93 80 01 	sts	0x0180, r25
    21f2:	80 93 7f 01 	sts	0x017F, r24
    21f6:	0d c0       	rjmp	.+26     	; 0x2212 <Timer_setCallBack+0x62>
		break;
	case TIMER1:
		g_timer1_ptr = a_ptr;
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	90 93 82 01 	sts	0x0182, r25
    2200:	80 93 81 01 	sts	0x0181, r24
    2204:	06 c0       	rjmp	.+12     	; 0x2212 <Timer_setCallBack+0x62>
		break;
	case TIMER2:
		g_timer2_ptr = a_ptr;
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	90 93 84 01 	sts	0x0184, r25
    220e:	80 93 83 01 	sts	0x0183, r24
		break;
	}
}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType* Config_Ptr)
{
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <TWI_init+0xa>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
    TWBR = (uint8)(((F_CPU/(Config_Ptr->bit_rate))-16)/2);
    2234:	00 e2       	ldi	r16, 0x20	; 32
    2236:	10 e0       	ldi	r17, 0x00	; 0
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	fa 81       	ldd	r31, Y+2	; 0x02
    223c:	21 81       	ldd	r18, Z+1	; 0x01
    223e:	32 81       	ldd	r19, Z+2	; 0x02
    2240:	43 81       	ldd	r20, Z+3	; 0x03
    2242:	54 81       	ldd	r21, Z+4	; 0x04
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	92 e1       	ldi	r25, 0x12	; 18
    2248:	aa e7       	ldi	r26, 0x7A	; 122
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 0c 13 	call	0x2618	; 0x2618 <__udivmodsi4>
    2254:	da 01       	movw	r26, r20
    2256:	c9 01       	movw	r24, r18
    2258:	40 97       	sbiw	r24, 0x10	; 16
    225a:	a1 09       	sbc	r26, r1
    225c:	b1 09       	sbc	r27, r1
    225e:	b6 95       	lsr	r27
    2260:	a7 95       	ror	r26
    2262:	97 95       	ror	r25
    2264:	87 95       	ror	r24
    2266:	f8 01       	movw	r30, r16
    2268:	80 83       	st	Z, r24
	TWSR = TWI_PRESCALE_VALUE;
    226a:	e1 e2       	ldi	r30, 0x21	; 33
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me:
       0x1 (used in case this MC is a slave device) General Call Recognition: Off */
    TWAR = ((Config_Ptr->address) << 1); // my address = 0x01 :)
    2270:	a2 e2       	ldi	r26, 0x22	; 34
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e9 81       	ldd	r30, Y+1	; 0x01
    2276:	fa 81       	ldd	r31, Y+2	; 0x02
    2278:	80 81       	ld	r24, Z
    227a:	88 0f       	add	r24, r24
    227c:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    227e:	e6 e5       	ldi	r30, 0x56	; 86
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	84 e0       	ldi	r24, 0x04	; 4
    2284:	80 83       	st	Z, r24
}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	1f 91       	pop	r17
    2290:	0f 91       	pop	r16
    2292:	08 95       	ret

00002294 <TWI_start>:

void TWI_start(void)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    229c:	e6 e5       	ldi	r30, 0x56	; 86
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	84 ea       	ldi	r24, 0xA4	; 164
    22a2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22a4:	e6 e5       	ldi	r30, 0x56	; 86
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	88 23       	and	r24, r24
    22ac:	dc f7       	brge	.-10     	; 0x22a4 <TWI_start+0x10>
}
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <TWI_stop>:

void TWI_stop(void)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    22bc:	e6 e5       	ldi	r30, 0x56	; 86
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	84 e9       	ldi	r24, 0x94	; 148
    22c2:	80 83       	st	Z, r24
}
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    22d6:	e3 e2       	ldi	r30, 0x23	; 35
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    22de:	e6 e5       	ldi	r30, 0x56	; 86
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	84 e8       	ldi	r24, 0x84	; 132
    22e4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22e6:	e6 e5       	ldi	r30, 0x56	; 86
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	88 23       	and	r24, r24
    22ee:	dc f7       	brge	.-10     	; 0x22e6 <TWI_writeByte+0x1c>
}
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2300:	e6 e5       	ldi	r30, 0x56	; 86
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	84 ec       	ldi	r24, 0xC4	; 196
    2306:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2308:	e6 e5       	ldi	r30, 0x56	; 86
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	88 23       	and	r24, r24
    2310:	dc f7       	brge	.-10     	; 0x2308 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2312:	e3 e2       	ldi	r30, 0x23	; 35
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
}
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2326:	e6 e5       	ldi	r30, 0x56	; 86
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	84 e8       	ldi	r24, 0x84	; 132
    232c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    232e:	e6 e5       	ldi	r30, 0x56	; 86
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	88 23       	and	r24, r24
    2336:	dc f7       	brge	.-10     	; 0x232e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2338:	e3 e2       	ldi	r30, 0x23	; 35
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
}
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	0f 92       	push	r0
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    234e:	e1 e2       	ldi	r30, 0x21	; 33
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	88 7f       	andi	r24, 0xF8	; 248
    2356:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2358:	89 81       	ldd	r24, Y+1	; 0x01
}
    235a:	0f 90       	pop	r0
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* Config_Ptr)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	00 d0       	rcall	.+0      	; 0x2368 <UART_init+0x6>
    2368:	00 d0       	rcall	.+0      	; 0x236a <UART_init+0x8>
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2372:	1a 82       	std	Y+2, r1	; 0x02
    2374:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2376:	eb e2       	ldi	r30, 0x2B	; 43
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	82 e0       	ldi	r24, 0x02	; 2
    237c:	80 83       	st	Z, r24
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
#if UART_RX_MODE_SELECT == UART_RX_INTERRUPT_ENABLE
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
#else
	UCSRB = (1<<RXEN) | (1<<TXEN);
    237e:	ea e2       	ldi	r30, 0x2A	; 42
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	88 e1       	ldi	r24, 0x18	; 24
    2384:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2386:	e0 e4       	ldi	r30, 0x40	; 64
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 e8       	ldi	r24, 0x80	; 128
    238c:	80 83       	st	Z, r24

	if(Config_Ptr->bit_data == DATA_9_BIT)
    238e:	eb 81       	ldd	r30, Y+3	; 0x03
    2390:	fc 81       	ldd	r31, Y+4	; 0x04
    2392:	80 81       	ld	r24, Z
    2394:	87 30       	cpi	r24, 0x07	; 7
    2396:	99 f5       	brne	.+102    	; 0x23fe <UART_init+0x9c>
	{
		CLEAR_BIT(UCSRC, UCSZ0);
    2398:	a0 e4       	ldi	r26, 0x40	; 64
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e0 e4       	ldi	r30, 0x40	; 64
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8d 7f       	andi	r24, 0xFD	; 253
    23a4:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
    23a6:	a0 e4       	ldi	r26, 0x40	; 64
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e0 e4       	ldi	r30, 0x40	; 64
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	8b 7f       	andi	r24, 0xFB	; 251
    23b2:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    23b4:	aa e2       	ldi	r26, 0x2A	; 42
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	ea e2       	ldi	r30, 0x2A	; 42
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	8b 7f       	andi	r24, 0xFB	; 251
    23c0:	8c 93       	st	X, r24
		UCSRC |= (((Config_Ptr->bit_data)&0x03) << UCSZ0);
    23c2:	a0 e4       	ldi	r26, 0x40	; 64
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e0 e4       	ldi	r30, 0x40	; 64
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	28 2f       	mov	r18, r24
    23ce:	eb 81       	ldd	r30, Y+3	; 0x03
    23d0:	fc 81       	ldd	r31, Y+4	; 0x04
    23d2:	80 81       	ld	r24, Z
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	83 70       	andi	r24, 0x03	; 3
    23da:	90 70       	andi	r25, 0x00	; 0
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	82 2b       	or	r24, r18
    23e2:	8c 93       	st	X, r24
		UCSRB |= ((GET_BIT(Config_Ptr->bit_data,2)) << UCSZ2);
    23e4:	aa e2       	ldi	r26, 0x2A	; 42
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ea e2       	ldi	r30, 0x2A	; 42
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	98 2f       	mov	r25, r24
    23f0:	eb 81       	ldd	r30, Y+3	; 0x03
    23f2:	fc 81       	ldd	r31, Y+4	; 0x04
    23f4:	80 81       	ld	r24, Z
    23f6:	84 70       	andi	r24, 0x04	; 4
    23f8:	89 2b       	or	r24, r25
    23fa:	8c 93       	st	X, r24
    23fc:	1f c0       	rjmp	.+62     	; 0x243c <UART_init+0xda>
	}
	else
	{
		CLEAR_BIT(UCSRC, UCSZ0);
    23fe:	a0 e4       	ldi	r26, 0x40	; 64
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	e0 e4       	ldi	r30, 0x40	; 64
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	8d 7f       	andi	r24, 0xFD	; 253
    240a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
    240c:	a0 e4       	ldi	r26, 0x40	; 64
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e0 e4       	ldi	r30, 0x40	; 64
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	8b 7f       	andi	r24, 0xFB	; 251
    2418:	8c 93       	st	X, r24
		UCSRC |= (((Config_Ptr->bit_data)&0x03) << UCSZ0);
    241a:	a0 e4       	ldi	r26, 0x40	; 64
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e0 e4       	ldi	r30, 0x40	; 64
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	28 2f       	mov	r18, r24
    2426:	eb 81       	ldd	r30, Y+3	; 0x03
    2428:	fc 81       	ldd	r31, Y+4	; 0x04
    242a:	80 81       	ld	r24, Z
    242c:	88 2f       	mov	r24, r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	83 70       	andi	r24, 0x03	; 3
    2432:	90 70       	andi	r25, 0x00	; 0
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	82 2b       	or	r24, r18
    243a:	8c 93       	st	X, r24
	}

	UCSRC |= (((Config_Ptr->stop_bit)&0x01) << USBS);
    243c:	a0 e4       	ldi	r26, 0x40	; 64
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e0 e4       	ldi	r30, 0x40	; 64
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	28 2f       	mov	r18, r24
    2448:	eb 81       	ldd	r30, Y+3	; 0x03
    244a:	fc 81       	ldd	r31, Y+4	; 0x04
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	81 70       	andi	r24, 0x01	; 1
    2454:	90 70       	andi	r25, 0x00	; 0
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	82 2b       	or	r24, r18
    2464:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr->parity) << UPM0);
    2466:	a0 e4       	ldi	r26, 0x40	; 64
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e0 e4       	ldi	r30, 0x40	; 64
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	28 2f       	mov	r18, r24
    2472:	eb 81       	ldd	r30, Y+3	; 0x03
    2474:	fc 81       	ldd	r31, Y+4	; 0x04
    2476:	81 81       	ldd	r24, Z+1	; 0x01
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	82 95       	swap	r24
    247e:	92 95       	swap	r25
    2480:	90 7f       	andi	r25, 0xF0	; 240
    2482:	98 27       	eor	r25, r24
    2484:	80 7f       	andi	r24, 0xF0	; 240
    2486:	98 27       	eor	r25, r24
    2488:	82 2b       	or	r24, r18
    248a:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    248c:	eb 81       	ldd	r30, Y+3	; 0x03
    248e:	fc 81       	ldd	r31, Y+4	; 0x04
    2490:	83 81       	ldd	r24, Z+3	; 0x03
    2492:	94 81       	ldd	r25, Z+4	; 0x04
    2494:	cc 01       	movw	r24, r24
    2496:	a0 e0       	ldi	r26, 0x00	; 0
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	aa 1f       	adc	r26, r26
    24a0:	bb 1f       	adc	r27, r27
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	aa 1f       	adc	r26, r26
    24a8:	bb 1f       	adc	r27, r27
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	aa 1f       	adc	r26, r26
    24b0:	bb 1f       	adc	r27, r27
    24b2:	9c 01       	movw	r18, r24
    24b4:	ad 01       	movw	r20, r26
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	92 e1       	ldi	r25, 0x12	; 18
    24ba:	aa e7       	ldi	r26, 0x7A	; 122
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 0c 13 	call	0x2618	; 0x2618 <__udivmodsi4>
    24c6:	da 01       	movw	r26, r20
    24c8:	c9 01       	movw	r24, r18
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    24d0:	e0 e4       	ldi	r30, 0x40	; 64
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	89 2f       	mov	r24, r25
    24da:	99 27       	eor	r25, r25
    24dc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    24de:	e9 e2       	ldi	r30, 0x29	; 41
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	80 83       	st	Z, r24
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	0f 92       	push	r0
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2500:	eb e2       	ldi	r30, 0x2B	; 43
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	88 2f       	mov	r24, r24
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	80 72       	andi	r24, 0x20	; 32
    250c:	90 70       	andi	r25, 0x00	; 0
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	b9 f3       	breq	.-18     	; 0x2500 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2512:	ec e2       	ldi	r30, 0x2C	; 44
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	80 83       	st	Z, r24
}
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
	 * when using interrupt mode the return acts as a flag
	 */
	return TRUE;
#else
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    252a:	eb e2       	ldi	r30, 0x2B	; 43
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	88 23       	and	r24, r24
    2532:	dc f7       	brge	.-10     	; 0x252a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2534:	ec e2       	ldi	r30, 0x2C	; 44
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
#endif
}
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	00 d0       	rcall	.+0      	; 0x2546 <UART_sendString+0x6>
    2546:	0f 92       	push	r0
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	9b 83       	std	Y+3, r25	; 0x03
    254e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2550:	19 82       	std	Y+1, r1	; 0x01
    2552:	0e c0       	rjmp	.+28     	; 0x2570 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	fc 01       	movw	r30, r24
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	80 81       	ld	r24, Z
    2566:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <UART_sendByte>
		i++;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	fc 01       	movw	r30, r24
    257c:	e2 0f       	add	r30, r18
    257e:	f3 1f       	adc	r31, r19
    2580:	80 81       	ld	r24, Z
    2582:	88 23       	and	r24, r24
    2584:	39 f7       	brne	.-50     	; 0x2554 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <UART_receiveString>:
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
#if UART_RX_MODE_SELECT == UART_RX_INTERRUPT_ENABLE
#else
void UART_receiveString(uint8 *Str)
{
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	00 d0       	rcall	.+0      	; 0x259c <UART_receiveString+0xa>
    259c:	0f 92       	push	r0
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	9b 83       	std	Y+3, r25	; 0x03
    25a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25a6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	9b 81       	ldd	r25, Y+3	; 0x03
    25b2:	8c 01       	movw	r16, r24
    25b4:	02 0f       	add	r16, r18
    25b6:	13 1f       	adc	r17, r19
    25b8:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_recieveByte>
    25bc:	f8 01       	movw	r30, r16
    25be:	80 83       	st	Z, r24
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != UART_RX_STRING_BREAK)
	{
		i++;
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	8f 5f       	subi	r24, 0xFF	; 255
    25c6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	9b 81       	ldd	r25, Y+3	; 0x03
    25d2:	8c 01       	movw	r16, r24
    25d4:	02 0f       	add	r16, r18
    25d6:	13 1f       	adc	r17, r19
    25d8:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_recieveByte>
    25dc:	f8 01       	movw	r30, r16
    25de:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != UART_RX_STRING_BREAK)
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ea:	fc 01       	movw	r30, r24
    25ec:	e2 0f       	add	r30, r18
    25ee:	f3 1f       	adc	r31, r19
    25f0:	80 81       	ld	r24, Z
    25f2:	83 32       	cpi	r24, 0x23	; 35
    25f4:	31 f7       	brne	.-52     	; 0x25c2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2600:	fc 01       	movw	r30, r24
    2602:	e2 0f       	add	r30, r18
    2604:	f3 1f       	adc	r31, r19
    2606:	10 82       	st	Z, r1
}
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	08 95       	ret

00002618 <__udivmodsi4>:
    2618:	a1 e2       	ldi	r26, 0x21	; 33
    261a:	1a 2e       	mov	r1, r26
    261c:	aa 1b       	sub	r26, r26
    261e:	bb 1b       	sub	r27, r27
    2620:	fd 01       	movw	r30, r26
    2622:	0d c0       	rjmp	.+26     	; 0x263e <__udivmodsi4_ep>

00002624 <__udivmodsi4_loop>:
    2624:	aa 1f       	adc	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	ee 1f       	adc	r30, r30
    262a:	ff 1f       	adc	r31, r31
    262c:	a2 17       	cp	r26, r18
    262e:	b3 07       	cpc	r27, r19
    2630:	e4 07       	cpc	r30, r20
    2632:	f5 07       	cpc	r31, r21
    2634:	20 f0       	brcs	.+8      	; 0x263e <__udivmodsi4_ep>
    2636:	a2 1b       	sub	r26, r18
    2638:	b3 0b       	sbc	r27, r19
    263a:	e4 0b       	sbc	r30, r20
    263c:	f5 0b       	sbc	r31, r21

0000263e <__udivmodsi4_ep>:
    263e:	66 1f       	adc	r22, r22
    2640:	77 1f       	adc	r23, r23
    2642:	88 1f       	adc	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	1a 94       	dec	r1
    2648:	69 f7       	brne	.-38     	; 0x2624 <__udivmodsi4_loop>
    264a:	60 95       	com	r22
    264c:	70 95       	com	r23
    264e:	80 95       	com	r24
    2650:	90 95       	com	r25
    2652:	9b 01       	movw	r18, r22
    2654:	ac 01       	movw	r20, r24
    2656:	bd 01       	movw	r22, r26
    2658:	cf 01       	movw	r24, r30
    265a:	08 95       	ret

0000265c <__prologue_saves__>:
    265c:	2f 92       	push	r2
    265e:	3f 92       	push	r3
    2660:	4f 92       	push	r4
    2662:	5f 92       	push	r5
    2664:	6f 92       	push	r6
    2666:	7f 92       	push	r7
    2668:	8f 92       	push	r8
    266a:	9f 92       	push	r9
    266c:	af 92       	push	r10
    266e:	bf 92       	push	r11
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	ca 1b       	sub	r28, r26
    2686:	db 0b       	sbc	r29, r27
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	09 94       	ijmp

00002694 <__epilogue_restores__>:
    2694:	2a 88       	ldd	r2, Y+18	; 0x12
    2696:	39 88       	ldd	r3, Y+17	; 0x11
    2698:	48 88       	ldd	r4, Y+16	; 0x10
    269a:	5f 84       	ldd	r5, Y+15	; 0x0f
    269c:	6e 84       	ldd	r6, Y+14	; 0x0e
    269e:	7d 84       	ldd	r7, Y+13	; 0x0d
    26a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26a6:	b9 84       	ldd	r11, Y+9	; 0x09
    26a8:	c8 84       	ldd	r12, Y+8	; 0x08
    26aa:	df 80       	ldd	r13, Y+7	; 0x07
    26ac:	ee 80       	ldd	r14, Y+6	; 0x06
    26ae:	fd 80       	ldd	r15, Y+5	; 0x05
    26b0:	0c 81       	ldd	r16, Y+4	; 0x04
    26b2:	1b 81       	ldd	r17, Y+3	; 0x03
    26b4:	aa 81       	ldd	r26, Y+2	; 0x02
    26b6:	b9 81       	ldd	r27, Y+1	; 0x01
    26b8:	ce 0f       	add	r28, r30
    26ba:	d1 1d       	adc	r29, r1
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	ed 01       	movw	r28, r26
    26c8:	08 95       	ret

000026ca <strcmp>:
    26ca:	fb 01       	movw	r30, r22
    26cc:	dc 01       	movw	r26, r24
    26ce:	8d 91       	ld	r24, X+
    26d0:	01 90       	ld	r0, Z+
    26d2:	80 19       	sub	r24, r0
    26d4:	01 10       	cpse	r0, r1
    26d6:	d9 f3       	breq	.-10     	; 0x26ce <strcmp+0x4>
    26d8:	99 0b       	sbc	r25, r25
    26da:	08 95       	ret

000026dc <_exit>:
    26dc:	f8 94       	cli

000026de <__stop_program>:
    26de:	ff cf       	rjmp	.-2      	; 0x26de <__stop_program>
