
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000321e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d2  00800060  0000321e  000032b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800232  00800232  00003484  2**0
                  ALLOC
  3 .stab         00002c40  00000000  00000000  00003484  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016bb  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000777f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000078ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00007ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00009ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000ac51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000bc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000c0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__vector_4>
      14:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 14 	jmp	0x288e	; 0x288e <__vector_9>
      28:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__vector_10>
      2c:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 20 11 	call	0x2240	; 0x2240 <main>
      8a:	0c 94 0d 19 	jmp	0x321a	; 0x321a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e1       	ldi	r26, 0x1E	; 30
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e1       	ldi	r24, 0x1E	; 30
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bd 18 	jmp	0x317a	; 0x317a <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ea 5d       	subi	r30, 0xDA	; 218
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will return Error Status.
 */
GPIO_ErrorStatus GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2e 97       	sbiw	r28, 0x0e	; 14
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8a 83       	std	Y+2, r24	; 0x02
     cec:	6b 83       	std	Y+3, r22	; 0x03
     cee:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
     cf0:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	84 30       	cpi	r24, 0x04	; 4
     cf6:	18 f4       	brcc	.+6      	; 0xcfe <GPIO_setupPinDirection+0x28>
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	88 30       	cpi	r24, 0x08	; 8
     cfc:	18 f0       	brcs	.+6      	; 0xd04 <GPIO_setupPinDirection+0x2e>
	{
		gpio_error_enumState = GPIO_NOK;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	d7 c0       	rjmp	.+430    	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
	}
	else
	{
		switch (port_num)
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	3e 87       	std	Y+14, r19	; 0x0e
     d0c:	2d 87       	std	Y+13, r18	; 0x0d
     d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d10:	9e 85       	ldd	r25, Y+14	; 0x0e
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	91 05       	cpc	r25, r1
     d16:	09 f4       	brne	.+2      	; 0xd1a <GPIO_setupPinDirection+0x44>
     d18:	44 c0       	rjmp	.+136    	; 0xda2 <GPIO_setupPinDirection+0xcc>
     d1a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d1c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	2c f4       	brge	.+10     	; 0xd2e <GPIO_setupPinDirection+0x58>
     d24:	8d 85       	ldd	r24, Y+13	; 0x0d
     d26:	9e 85       	ldd	r25, Y+14	; 0x0e
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	71 f0       	breq	.+28     	; 0xd48 <GPIO_setupPinDirection+0x72>
     d2c:	c2 c0       	rjmp	.+388    	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
     d2e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d30:	3e 85       	ldd	r19, Y+14	; 0x0e
     d32:	22 30       	cpi	r18, 0x02	; 2
     d34:	31 05       	cpc	r19, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <GPIO_setupPinDirection+0x64>
     d38:	62 c0       	rjmp	.+196    	; 0xdfe <GPIO_setupPinDirection+0x128>
     d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3e:	83 30       	cpi	r24, 0x03	; 3
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <GPIO_setupPinDirection+0x70>
     d44:	89 c0       	rjmp	.+274    	; 0xe58 <GPIO_setupPinDirection+0x182>
     d46:	b5 c0       	rjmp	.+362    	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
		{
		case PORTA_ID:
			(direction == PIN_OUTPUT) ? SET_BIT(GPIO_PORTA_DIR_R, pin_num) : CLEAR_BIT(GPIO_PORTA_DIR_R, pin_num);
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	a9 f4       	brne	.+42     	; 0xd78 <GPIO_setupPinDirection+0xa2>
     d4e:	aa e3       	ldi	r26, 0x3A	; 58
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ea e3       	ldi	r30, 0x3A	; 58
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <GPIO_setupPinDirection+0x96>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <GPIO_setupPinDirection+0x92>
     d70:	84 2b       	or	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	9c 91       	ld	r25, X
     d76:	9d c0       	rjmp	.+314    	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
     d78:	aa e3       	ldi	r26, 0x3A	; 58
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ea e3       	ldi	r30, 0x3A	; 58
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <GPIO_setupPinDirection+0xbe>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	2a 95       	dec	r18
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <GPIO_setupPinDirection+0xba>
     d98:	80 95       	com	r24
     d9a:	84 23       	and	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	2c 91       	ld	r18, X
     da0:	88 c0       	rjmp	.+272    	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
			break;
		case PORTB_ID:
			(direction == PIN_OUTPUT) ? SET_BIT(GPIO_PORTB_DIR_R, pin_num) : CLEAR_BIT(GPIO_PORTB_DIR_R, pin_num);
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	a9 f4       	brne	.+42     	; 0xdd2 <GPIO_setupPinDirection+0xfc>
     da8:	a7 e3       	ldi	r26, 0x37	; 55
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e7 e3       	ldi	r30, 0x37	; 55
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <GPIO_setupPinDirection+0xf0>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <GPIO_setupPinDirection+0xec>
     dca:	84 2b       	or	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	3c 91       	ld	r19, X
     dd0:	70 c0       	rjmp	.+224    	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
     dd2:	a7 e3       	ldi	r26, 0x37	; 55
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e7 e3       	ldi	r30, 0x37	; 55
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <GPIO_setupPinDirection+0x11a>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <GPIO_setupPinDirection+0x116>
     df4:	80 95       	com	r24
     df6:	84 23       	and	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	8c 91       	ld	r24, X
     dfc:	5a c0       	rjmp	.+180    	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
			break;
		case PORTC_ID:
			(direction == PIN_OUTPUT) ? SET_BIT(GPIO_PORTC_DIR_R, pin_num) : CLEAR_BIT(GPIO_PORTC_DIR_R, pin_num);
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	a9 f4       	brne	.+42     	; 0xe2e <GPIO_setupPinDirection+0x158>
     e04:	a4 e3       	ldi	r26, 0x34	; 52
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e4 e3       	ldi	r30, 0x34	; 52
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <GPIO_setupPinDirection+0x14c>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <GPIO_setupPinDirection+0x148>
     e26:	84 2b       	or	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	9c 91       	ld	r25, X
     e2c:	42 c0       	rjmp	.+132    	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
     e2e:	a4 e3       	ldi	r26, 0x34	; 52
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e4 e3       	ldi	r30, 0x34	; 52
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <GPIO_setupPinDirection+0x174>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	2a 95       	dec	r18
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <GPIO_setupPinDirection+0x170>
     e4e:	80 95       	com	r24
     e50:	84 23       	and	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	2c 91       	ld	r18, X
     e56:	2d c0       	rjmp	.+90     	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
			break;
		case PORTD_ID:
			(direction == PIN_OUTPUT) ? SET_BIT(GPIO_PORTD_DIR_R, pin_num) : CLEAR_BIT(GPIO_PORTD_DIR_R, pin_num);
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	a9 f4       	brne	.+42     	; 0xe88 <GPIO_setupPinDirection+0x1b2>
     e5e:	a1 e3       	ldi	r26, 0x31	; 49
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e1 e3       	ldi	r30, 0x31	; 49
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <GPIO_setupPinDirection+0x1a6>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <GPIO_setupPinDirection+0x1a2>
     e80:	84 2b       	or	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	3c 91       	ld	r19, X
     e86:	15 c0       	rjmp	.+42     	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
     e88:	a1 e3       	ldi	r26, 0x31	; 49
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e1 e3       	ldi	r30, 0x31	; 49
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <GPIO_setupPinDirection+0x1d0>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <GPIO_setupPinDirection+0x1cc>
     eaa:	80 95       	com	r24
     eac:	84 23       	and	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	8c 91       	ld	r24, X
			break;
		}
	}
	return gpio_error_enumState;
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb4:	2e 96       	adiw	r28, 0x0e	; 14
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will return Error Status.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_ErrorStatus GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	2e 97       	sbiw	r28, 0x0e	; 14
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	8a 83       	std	Y+2, r24	; 0x02
     edc:	6b 83       	std	Y+3, r22	; 0x03
     ede:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
     ee0:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	18 f4       	brcc	.+6      	; 0xeee <GPIO_writePin+0x28>
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	88 30       	cpi	r24, 0x08	; 8
     eec:	18 f0       	brcs	.+6      	; 0xef4 <GPIO_writePin+0x2e>
	{
		gpio_error_enumState = GPIO_NOK;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	d7 c0       	rjmp	.+430    	; 0x10a2 <GPIO_writePin+0x1dc>
	}
	else
	{
		switch (port_num)
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	3e 87       	std	Y+14, r19	; 0x0e
     efc:	2d 87       	std	Y+13, r18	; 0x0d
     efe:	8d 85       	ldd	r24, Y+13	; 0x0d
     f00:	9e 85       	ldd	r25, Y+14	; 0x0e
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	91 05       	cpc	r25, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <GPIO_writePin+0x44>
     f08:	44 c0       	rjmp	.+136    	; 0xf92 <GPIO_writePin+0xcc>
     f0a:	2d 85       	ldd	r18, Y+13	; 0x0d
     f0c:	3e 85       	ldd	r19, Y+14	; 0x0e
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	2c f4       	brge	.+10     	; 0xf1e <GPIO_writePin+0x58>
     f14:	8d 85       	ldd	r24, Y+13	; 0x0d
     f16:	9e 85       	ldd	r25, Y+14	; 0x0e
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	71 f0       	breq	.+28     	; 0xf38 <GPIO_writePin+0x72>
     f1c:	c2 c0       	rjmp	.+388    	; 0x10a2 <GPIO_writePin+0x1dc>
     f1e:	2d 85       	ldd	r18, Y+13	; 0x0d
     f20:	3e 85       	ldd	r19, Y+14	; 0x0e
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <GPIO_writePin+0x64>
     f28:	62 c0       	rjmp	.+196    	; 0xfee <GPIO_writePin+0x128>
     f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <GPIO_writePin+0x70>
     f34:	89 c0       	rjmp	.+274    	; 0x1048 <GPIO_writePin+0x182>
     f36:	b5 c0       	rjmp	.+362    	; 0x10a2 <GPIO_writePin+0x1dc>
		{
		case PORTA_ID:
			(value == LOGIC_HIGH) ? SET_BIT(GPIO_PORTA_DATA_R, pin_num) : CLEAR_BIT(GPIO_PORTA_DATA_R, pin_num);
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	a9 f4       	brne	.+42     	; 0xf68 <GPIO_writePin+0xa2>
     f3e:	ab e3       	ldi	r26, 0x3B	; 59
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	eb e3       	ldi	r30, 0x3B	; 59
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <GPIO_writePin+0x96>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <GPIO_writePin+0x92>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	9c 91       	ld	r25, X
     f66:	9d c0       	rjmp	.+314    	; 0x10a2 <GPIO_writePin+0x1dc>
     f68:	ab e3       	ldi	r26, 0x3B	; 59
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	eb e3       	ldi	r30, 0x3B	; 59
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <GPIO_writePin+0xbe>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	2a 95       	dec	r18
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <GPIO_writePin+0xba>
     f88:	80 95       	com	r24
     f8a:	84 23       	and	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	2c 91       	ld	r18, X
     f90:	88 c0       	rjmp	.+272    	; 0x10a2 <GPIO_writePin+0x1dc>
			break;
		case PORTB_ID:
			(value == LOGIC_HIGH) ? SET_BIT(GPIO_PORTB_DATA_R, pin_num) : CLEAR_BIT(GPIO_PORTB_DATA_R, pin_num);
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	a9 f4       	brne	.+42     	; 0xfc2 <GPIO_writePin+0xfc>
     f98:	a8 e3       	ldi	r26, 0x38	; 56
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e3       	ldi	r30, 0x38	; 56
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <GPIO_writePin+0xf0>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <GPIO_writePin+0xec>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	3c 91       	ld	r19, X
     fc0:	70 c0       	rjmp	.+224    	; 0x10a2 <GPIO_writePin+0x1dc>
     fc2:	a8 e3       	ldi	r26, 0x38	; 56
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e8 e3       	ldi	r30, 0x38	; 56
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <GPIO_writePin+0x11a>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <GPIO_writePin+0x116>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	8c 91       	ld	r24, X
     fec:	5a c0       	rjmp	.+180    	; 0x10a2 <GPIO_writePin+0x1dc>
			break;
		case PORTC_ID:
			(value == LOGIC_HIGH) ? SET_BIT(GPIO_PORTC_DATA_R, pin_num) : CLEAR_BIT(GPIO_PORTC_DATA_R, pin_num);
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	a9 f4       	brne	.+42     	; 0x101e <GPIO_writePin+0x158>
     ff4:	a5 e3       	ldi	r26, 0x35	; 53
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e5 e3       	ldi	r30, 0x35	; 53
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_writePin+0x14c>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_writePin+0x148>
    1016:	84 2b       	or	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	9c 91       	ld	r25, X
    101c:	42 c0       	rjmp	.+132    	; 0x10a2 <GPIO_writePin+0x1dc>
    101e:	a5 e3       	ldi	r26, 0x35	; 53
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e3       	ldi	r30, 0x35	; 53
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GPIO_writePin+0x174>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	2a 95       	dec	r18
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <GPIO_writePin+0x170>
    103e:	80 95       	com	r24
    1040:	84 23       	and	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	2c 91       	ld	r18, X
    1046:	2d c0       	rjmp	.+90     	; 0x10a2 <GPIO_writePin+0x1dc>
			break;
		case PORTD_ID:
			(value == LOGIC_HIGH) ? SET_BIT(GPIO_PORTD_DATA_R, pin_num) : CLEAR_BIT(GPIO_PORTD_DATA_R, pin_num);
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	a9 f4       	brne	.+42     	; 0x1078 <GPIO_writePin+0x1b2>
    104e:	a2 e3       	ldi	r26, 0x32	; 50
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e2 e3       	ldi	r30, 0x32	; 50
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_writePin+0x1a6>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_writePin+0x1a2>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	3c 91       	ld	r19, X
    1076:	15 c0       	rjmp	.+42     	; 0x10a2 <GPIO_writePin+0x1dc>
    1078:	a2 e3       	ldi	r26, 0x32	; 50
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e2 e3       	ldi	r30, 0x32	; 50
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GPIO_writePin+0x1d0>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <GPIO_writePin+0x1cc>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	8c 91       	ld	r24, X
			break;
		}
	}
	return gpio_error_enumState;
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a4:	2e 96       	adiw	r28, 0x0e	; 14
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Error Status.
 */
GPIO_ErrorStatus GPIO_readPin(uint8 port_num, uint8 pin_num, uint8* pin_value)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	2b 97       	sbiw	r28, 0x0b	; 11
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	8a 83       	std	Y+2, r24	; 0x02
    10cc:	6b 83       	std	Y+3, r22	; 0x03
    10ce:	5d 83       	std	Y+5, r21	; 0x05
    10d0:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    10d2:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	18 f4       	brcc	.+6      	; 0x10e0 <GPIO_readPin+0x2a>
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 30       	cpi	r24, 0x08	; 8
    10de:	18 f0       	brcs	.+6      	; 0x10e6 <GPIO_readPin+0x30>
	{
		gpio_error_enumState = GPIO_NOK;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	91 c0       	rjmp	.+290    	; 0x1208 <GPIO_readPin+0x152>
	}
	else
	{
		switch (port_num)
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3b 87       	std	Y+11, r19	; 0x0b
    10ee:	2a 87       	std	Y+10, r18	; 0x0a
    10f0:	4a 85       	ldd	r20, Y+10	; 0x0a
    10f2:	5b 85       	ldd	r21, Y+11	; 0x0b
    10f4:	41 30       	cpi	r20, 0x01	; 1
    10f6:	51 05       	cpc	r21, r1
    10f8:	a1 f1       	breq	.+104    	; 0x1162 <GPIO_readPin+0xac>
    10fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    10fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	91 05       	cpc	r25, r1
    1102:	34 f4       	brge	.+12     	; 0x1110 <GPIO_readPin+0x5a>
    1104:	2a 85       	ldd	r18, Y+10	; 0x0a
    1106:	3b 85       	ldd	r19, Y+11	; 0x0b
    1108:	21 15       	cp	r18, r1
    110a:	31 05       	cpc	r19, r1
    110c:	71 f0       	breq	.+28     	; 0x112a <GPIO_readPin+0x74>
    110e:	7c c0       	rjmp	.+248    	; 0x1208 <GPIO_readPin+0x152>
    1110:	4a 85       	ldd	r20, Y+10	; 0x0a
    1112:	5b 85       	ldd	r21, Y+11	; 0x0b
    1114:	42 30       	cpi	r20, 0x02	; 2
    1116:	51 05       	cpc	r21, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <GPIO_readPin+0x66>
    111a:	3f c0       	rjmp	.+126    	; 0x119a <GPIO_readPin+0xe4>
    111c:	8a 85       	ldd	r24, Y+10	; 0x0a
    111e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	91 05       	cpc	r25, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <GPIO_readPin+0x72>
    1126:	55 c0       	rjmp	.+170    	; 0x11d2 <GPIO_readPin+0x11c>
    1128:	6f c0       	rjmp	.+222    	; 0x1208 <GPIO_readPin+0x152>
		{
		case PORTA_ID:
			(*pin_value) = BIT_IS_SET(GPIO_PORTA_STATS_R, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    112a:	e9 e3       	ldi	r30, 0x39	; 57
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <GPIO_readPin+0x8c>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <GPIO_readPin+0x88>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	90 70       	andi	r25, 0x00	; 0
    114c:	88 23       	and	r24, r24
    114e:	19 f0       	breq	.+6      	; 0x1156 <GPIO_readPin+0xa0>
    1150:	51 e0       	ldi	r21, 0x01	; 1
    1152:	59 87       	std	Y+9, r21	; 0x09
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <GPIO_readPin+0xa2>
    1156:	19 86       	std	Y+9, r1	; 0x09
    1158:	ec 81       	ldd	r30, Y+4	; 0x04
    115a:	fd 81       	ldd	r31, Y+5	; 0x05
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	80 83       	st	Z, r24
    1160:	53 c0       	rjmp	.+166    	; 0x1208 <GPIO_readPin+0x152>
			break;
		case PORTB_ID:
			(*pin_value) = BIT_IS_SET(GPIO_PORTB_STATS_R, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    1162:	e6 e3       	ldi	r30, 0x36	; 54
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a9 01       	movw	r20, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <GPIO_readPin+0xc4>
    1176:	55 95       	asr	r21
    1178:	47 95       	ror	r20
    117a:	8a 95       	dec	r24
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <GPIO_readPin+0xc0>
    117e:	ca 01       	movw	r24, r20
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	90 70       	andi	r25, 0x00	; 0
    1184:	88 23       	and	r24, r24
    1186:	19 f0       	breq	.+6      	; 0x118e <GPIO_readPin+0xd8>
    1188:	51 e0       	ldi	r21, 0x01	; 1
    118a:	58 87       	std	Y+8, r21	; 0x08
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <GPIO_readPin+0xda>
    118e:	18 86       	std	Y+8, r1	; 0x08
    1190:	ec 81       	ldd	r30, Y+4	; 0x04
    1192:	fd 81       	ldd	r31, Y+5	; 0x05
    1194:	88 85       	ldd	r24, Y+8	; 0x08
    1196:	80 83       	st	Z, r24
    1198:	37 c0       	rjmp	.+110    	; 0x1208 <GPIO_readPin+0x152>
			break;
		case PORTC_ID:
			(*pin_value) = BIT_IS_SET(GPIO_PORTC_STATS_R, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    119a:	e3 e3       	ldi	r30, 0x33	; 51
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a9 01       	movw	r20, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_readPin+0xfc>
    11ae:	55 95       	asr	r21
    11b0:	47 95       	ror	r20
    11b2:	8a 95       	dec	r24
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_readPin+0xf8>
    11b6:	ca 01       	movw	r24, r20
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	90 70       	andi	r25, 0x00	; 0
    11bc:	88 23       	and	r24, r24
    11be:	19 f0       	breq	.+6      	; 0x11c6 <GPIO_readPin+0x110>
    11c0:	51 e0       	ldi	r21, 0x01	; 1
    11c2:	5f 83       	std	Y+7, r21	; 0x07
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <GPIO_readPin+0x112>
    11c6:	1f 82       	std	Y+7, r1	; 0x07
    11c8:	ec 81       	ldd	r30, Y+4	; 0x04
    11ca:	fd 81       	ldd	r31, Y+5	; 0x05
    11cc:	8f 81       	ldd	r24, Y+7	; 0x07
    11ce:	80 83       	st	Z, r24
    11d0:	1b c0       	rjmp	.+54     	; 0x1208 <GPIO_readPin+0x152>
			break;
		case PORTD_ID:
			(*pin_value) = BIT_IS_SET(GPIO_PORTD_STATS_R, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    11d2:	e0 e3       	ldi	r30, 0x30	; 48
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a9 01       	movw	r20, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_readPin+0x134>
    11e6:	55 95       	asr	r21
    11e8:	47 95       	ror	r20
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_readPin+0x130>
    11ee:	ca 01       	movw	r24, r20
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	90 70       	andi	r25, 0x00	; 0
    11f4:	88 23       	and	r24, r24
    11f6:	19 f0       	breq	.+6      	; 0x11fe <GPIO_readPin+0x148>
    11f8:	51 e0       	ldi	r21, 0x01	; 1
    11fa:	5e 83       	std	Y+6, r21	; 0x06
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <GPIO_readPin+0x14a>
    11fe:	1e 82       	std	Y+6, r1	; 0x06
    1200:	ec 81       	ldd	r30, Y+4	; 0x04
    1202:	fd 81       	ldd	r31, Y+5	; 0x05
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	80 83       	st	Z, r24
			break;
		}
	}
	return gpio_error_enumState;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
}
    120a:	2b 96       	adiw	r28, 0x0b	; 11
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will return Error.
 */
GPIO_ErrorStatus GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_setupPortDirection+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <GPIO_setupPortDirection+0x8>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    122e:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	18 f0       	brcs	.+6      	; 0x123c <GPIO_setupPortDirection+0x20>
	{
		gpio_error_enumState = GPIO_NOK;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	32 c0       	rjmp	.+100    	; 0x12a0 <GPIO_setupPortDirection+0x84>
	}
	else
	{
		switch(port_num)
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3d 83       	std	Y+5, r19	; 0x05
    1244:	2c 83       	std	Y+4, r18	; 0x04
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	9d 81       	ldd	r25, Y+5	; 0x05
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	d1 f0       	breq	.+52     	; 0x1284 <GPIO_setupPortDirection+0x68>
    1250:	2c 81       	ldd	r18, Y+4	; 0x04
    1252:	3d 81       	ldd	r19, Y+5	; 0x05
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <GPIO_setupPortDirection+0x48>
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	61 f0       	breq	.+24     	; 0x127a <GPIO_setupPortDirection+0x5e>
    1262:	1e c0       	rjmp	.+60     	; 0x12a0 <GPIO_setupPortDirection+0x84>
    1264:	2c 81       	ldd	r18, Y+4	; 0x04
    1266:	3d 81       	ldd	r19, Y+5	; 0x05
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	81 f0       	breq	.+32     	; 0x128e <GPIO_setupPortDirection+0x72>
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	81 f0       	breq	.+32     	; 0x1298 <GPIO_setupPortDirection+0x7c>
    1278:	13 c0       	rjmp	.+38     	; 0x12a0 <GPIO_setupPortDirection+0x84>
		{
		case PORTA_ID:
			GPIO_PORTA_DIR_R = direction;
    127a:	ea e3       	ldi	r30, 0x3A	; 58
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	80 83       	st	Z, r24
    1282:	0e c0       	rjmp	.+28     	; 0x12a0 <GPIO_setupPortDirection+0x84>
			break;
		case PORTB_ID:
			GPIO_PORTB_DIR_R = direction;
    1284:	e7 e3       	ldi	r30, 0x37	; 55
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	80 83       	st	Z, r24
    128c:	09 c0       	rjmp	.+18     	; 0x12a0 <GPIO_setupPortDirection+0x84>
			break;
		case PORTC_ID:
			GPIO_PORTC_DIR_R = direction;
    128e:	e4 e3       	ldi	r30, 0x34	; 52
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 83       	st	Z, r24
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <GPIO_setupPortDirection+0x84>
			break;
		case PORTD_ID:
			GPIO_PORTD_DIR_R = direction;
    1298:	e1 e3       	ldi	r30, 0x31	; 49
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24
			break;
		}
	}
	return gpio_error_enumState;
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will return Error.
 */
GPIO_ErrorStatus GPIO_writePort(uint8 port_num, uint8 value)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <GPIO_writePort+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <GPIO_writePort+0x8>
    12ba:	0f 92       	push	r0
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    12c4:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	18 f0       	brcs	.+6      	; 0x12d2 <GPIO_writePort+0x20>
	{
		gpio_error_enumState = GPIO_NOK;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	32 c0       	rjmp	.+100    	; 0x1336 <GPIO_writePort+0x84>
	}
	else
	{
		switch (port_num)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3d 83       	std	Y+5, r19	; 0x05
    12da:	2c 83       	std	Y+4, r18	; 0x04
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	d1 f0       	breq	.+52     	; 0x131a <GPIO_writePort+0x68>
    12e6:	2c 81       	ldd	r18, Y+4	; 0x04
    12e8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	2c f4       	brge	.+10     	; 0x12fa <GPIO_writePort+0x48>
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	61 f0       	breq	.+24     	; 0x1310 <GPIO_writePort+0x5e>
    12f8:	1e c0       	rjmp	.+60     	; 0x1336 <GPIO_writePort+0x84>
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	81 f0       	breq	.+32     	; 0x1324 <GPIO_writePort+0x72>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	81 f0       	breq	.+32     	; 0x132e <GPIO_writePort+0x7c>
    130e:	13 c0       	rjmp	.+38     	; 0x1336 <GPIO_writePort+0x84>
		{
		case PORTA_ID:
			GPIO_PORTA_DATA_R = value;
    1310:	eb e3       	ldi	r30, 0x3B	; 59
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	80 83       	st	Z, r24
    1318:	0e c0       	rjmp	.+28     	; 0x1336 <GPIO_writePort+0x84>
			break;
		case PORTB_ID:
			GPIO_PORTB_DATA_R = value;
    131a:	e8 e3       	ldi	r30, 0x38	; 56
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	80 83       	st	Z, r24
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <GPIO_writePort+0x84>
			break;
		case PORTC_ID:
			GPIO_PORTC_DATA_R = value;
    1324:	e5 e3       	ldi	r30, 0x35	; 53
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	80 83       	st	Z, r24
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <GPIO_writePort+0x84>
			break;
		case PORTD_ID:
			GPIO_PORTD_DATA_R = value;
    132e:	e2 e3       	ldi	r30, 0x32	; 50
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	80 83       	st	Z, r24
			break;
		}
	}
	return gpio_error_enumState;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return Error.
 */
GPIO_ErrorStatus GPIO_readPort(uint8 port_num, uint8* port_value)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <GPIO_readPort+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <GPIO_readPort+0x8>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <GPIO_readPort+0xa>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	8a 83       	std	Y+2, r24	; 0x02
    1358:	7c 83       	std	Y+4, r23	; 0x04
    135a:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus gpio_error_enumState = GPIO_OK;
    135c:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	84 30       	cpi	r24, 0x04	; 4
    1362:	18 f0       	brcs	.+6      	; 0x136a <GPIO_readPort+0x22>
	{
		gpio_error_enumState = GPIO_NOK;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	3a c0       	rjmp	.+116    	; 0x13de <GPIO_readPort+0x96>
	}
	else
	{
		switch (port_num)
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	3e 83       	std	Y+6, r19	; 0x06
    1372:	2d 83       	std	Y+5, r18	; 0x05
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	91 05       	cpc	r25, r1
    137c:	e1 f0       	breq	.+56     	; 0x13b6 <GPIO_readPort+0x6e>
    137e:	2d 81       	ldd	r18, Y+5	; 0x05
    1380:	3e 81       	ldd	r19, Y+6	; 0x06
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	2c f4       	brge	.+10     	; 0x1392 <GPIO_readPort+0x4a>
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	61 f0       	breq	.+24     	; 0x13a8 <GPIO_readPort+0x60>
    1390:	26 c0       	rjmp	.+76     	; 0x13de <GPIO_readPort+0x96>
    1392:	2d 81       	ldd	r18, Y+5	; 0x05
    1394:	3e 81       	ldd	r19, Y+6	; 0x06
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	a1 f0       	breq	.+40     	; 0x13c4 <GPIO_readPort+0x7c>
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	b1 f0       	breq	.+44     	; 0x13d2 <GPIO_readPort+0x8a>
    13a6:	1b c0       	rjmp	.+54     	; 0x13de <GPIO_readPort+0x96>
		{
		case PORTA_ID:
			(*port_value) = GPIO_PORTA_STATS_R;
    13a8:	e9 e3       	ldi	r30, 0x39	; 57
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	eb 81       	ldd	r30, Y+3	; 0x03
    13b0:	fc 81       	ldd	r31, Y+4	; 0x04
    13b2:	80 83       	st	Z, r24
    13b4:	14 c0       	rjmp	.+40     	; 0x13de <GPIO_readPort+0x96>
			break;
		case PORTB_ID:
			(*port_value) = GPIO_PORTB_STATS_R;
    13b6:	e6 e3       	ldi	r30, 0x36	; 54
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	eb 81       	ldd	r30, Y+3	; 0x03
    13be:	fc 81       	ldd	r31, Y+4	; 0x04
    13c0:	80 83       	st	Z, r24
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <GPIO_readPort+0x96>
			break;
		case PORTC_ID:
			(*port_value) = GPIO_PORTC_STATS_R;
    13c4:	e3 e3       	ldi	r30, 0x33	; 51
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	eb 81       	ldd	r30, Y+3	; 0x03
    13cc:	fc 81       	ldd	r31, Y+4	; 0x04
    13ce:	80 83       	st	Z, r24
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <GPIO_readPort+0x96>
			break;
		case PORTD_ID:
			(*port_value) = GPIO_PORTD_STATS_R;
    13d2:	e0 e3       	ldi	r30, 0x30	; 48
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	eb 81       	ldd	r30, Y+3	; 0x03
    13da:	fc 81       	ldd	r31, Y+4	; 0x04
    13dc:	80 83       	st	Z, r24
			break;
		}
	}
	return gpio_error_enumState;
    13de:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e0:	26 96       	adiw	r28, 0x06	; 6
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	61 97       	sbiw	r28, 0x11	; 17
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row, lcd_isPressed;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	62 e0       	ldi	r22, 0x02	; 2
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	63 e0       	ldi	r22, 0x03	; 3
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	64 e0       	ldi	r22, 0x04	; 4
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	65 e0       	ldi	r22, 0x05	; 5
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	66 e0       	ldi	r22, 0x06	; 6
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	67 e0       	ldi	r22, 0x07	; 7
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1456:	1f 86       	std	Y+15, r1	; 0x0f
    1458:	b0 c0       	rjmp	.+352    	; 0x15ba <KEYPAD_getPressedKey+0x1c8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	6f 85       	ldd	r22, Y+15	; 0x0f
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	6f 85       	ldd	r22, Y+15	; 0x0f
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	0e 94 63 07 	call	0xec6	; 0xec6 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    146e:	18 8a       	std	Y+16, r1	; 0x10
    1470:	27 c0       	rjmp	.+78     	; 0x14c0 <KEYPAD_getPressedKey+0xce>
			{
				/* Check if the switch is pressed in this column */
				GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col, &lcd_isPressed);
    1472:	88 89       	ldd	r24, Y+16	; 0x10
    1474:	98 2f       	mov	r25, r24
    1476:	9c 5f       	subi	r25, 0xFC	; 252
    1478:	9e 01       	movw	r18, r28
    147a:	2f 5e       	subi	r18, 0xEF	; 239
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	69 2f       	mov	r22, r25
    1482:	a9 01       	movw	r20, r18
    1484:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <GPIO_readPin>
				if( lcd_isPressed == KEYPAD_BUTTON_PRESSED)
    1488:	89 89       	ldd	r24, Y+17	; 0x11
    148a:	88 23       	and	r24, r24
    148c:	b1 f4       	brne	.+44     	; 0x14ba <KEYPAD_getPressedKey+0xc8>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    148e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	98 2f       	mov	r25, r24
    149e:	88 89       	ldd	r24, Y+16	; 0x10
    14a0:	89 0f       	add	r24, r25
    14a2:	8f 5f       	subi	r24, 0xFF	; 255
    14a4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    14a8:	61 96       	adiw	r28, 0x11	; 17
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    14ba:	88 89       	ldd	r24, Y+16	; 0x10
    14bc:	8f 5f       	subi	r24, 0xFF	; 255
    14be:	88 8b       	std	Y+16, r24	; 0x10
    14c0:	88 89       	ldd	r24, Y+16	; 0x10
    14c2:	84 30       	cpi	r24, 0x04	; 4
    14c4:	b0 f2       	brcs	.-84     	; 0x1472 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a0 e2       	ldi	r26, 0x20	; 32
    14d6:	b1 e4       	ldi	r27, 0x41	; 65
    14d8:	8b 87       	std	Y+11, r24	; 0x0b
    14da:	9c 87       	std	Y+12, r25	; 0x0c
    14dc:	ad 87       	std	Y+13, r26	; 0x0d
    14de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	4a ef       	ldi	r20, 0xFA	; 250
    14ee:	54 e4       	ldi	r21, 0x44	; 68
    14f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8f 83       	std	Y+7, r24	; 0x07
    14fa:	98 87       	std	Y+8, r25	; 0x08
    14fc:	a9 87       	std	Y+9, r26	; 0x09
    14fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1500:	6f 81       	ldd	r22, Y+7	; 0x07
    1502:	78 85       	ldd	r23, Y+8	; 0x08
    1504:	89 85       	ldd	r24, Y+9	; 0x09
    1506:	9a 85       	ldd	r25, Y+10	; 0x0a
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e8       	ldi	r20, 0x80	; 128
    150e:	5f e3       	ldi	r21, 0x3F	; 63
    1510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1514:	88 23       	and	r24, r24
    1516:	2c f4       	brge	.+10     	; 0x1522 <KEYPAD_getPressedKey+0x130>
		__ticks = 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <KEYPAD_getPressedKey+0x1ae>
	else if (__tmp > 65535)
    1522:	6f 81       	ldd	r22, Y+7	; 0x07
    1524:	78 85       	ldd	r23, Y+8	; 0x08
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	4f e7       	ldi	r20, 0x7F	; 127
    1530:	57 e4       	ldi	r21, 0x47	; 71
    1532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1536:	18 16       	cp	r1, r24
    1538:	4c f5       	brge	.+82     	; 0x158c <KEYPAD_getPressedKey+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153a:	6b 85       	ldd	r22, Y+11	; 0x0b
    153c:	7c 85       	ldd	r23, Y+12	; 0x0c
    153e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1540:	9e 85       	ldd	r25, Y+14	; 0x0e
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e2       	ldi	r20, 0x20	; 32
    1548:	51 e4       	ldi	r21, 0x41	; 65
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <KEYPAD_getPressedKey+0x190>
    1564:	88 ec       	ldi	r24, 0xC8	; 200
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9c 83       	std	Y+4, r25	; 0x04
    156a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <KEYPAD_getPressedKey+0x17e>
    1574:	9c 83       	std	Y+4, r25	; 0x04
    1576:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	69 f7       	brne	.-38     	; 0x1564 <KEYPAD_getPressedKey+0x172>
    158a:	14 c0       	rjmp	.+40     	; 0x15b4 <KEYPAD_getPressedKey+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158c:	6f 81       	ldd	r22, Y+7	; 0x07
    158e:	78 85       	ldd	r23, Y+8	; 0x08
    1590:	89 85       	ldd	r24, Y+9	; 0x09
    1592:	9a 85       	ldd	r25, Y+10	; 0x0a
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <KEYPAD_getPressedKey+0x1ba>
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    15b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b6:	8f 5f       	subi	r24, 0xFF	; 255
    15b8:	8f 87       	std	Y+15, r24	; 0x0f
    15ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    15bc:	84 30       	cpi	r24, 0x04	; 4
    15be:	08 f4       	brcc	.+2      	; 0x15c2 <KEYPAD_getPressedKey+0x1d0>
    15c0:	4c cf       	rjmp	.-360    	; 0x145a <KEYPAD_getPressedKey+0x68>
    15c2:	49 cf       	rjmp	.-366    	; 0x1456 <KEYPAD_getPressedKey+0x64>

000015c4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <KEYPAD_4x4_adjustKeyNumber+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <KEYPAD_4x4_adjustKeyNumber+0x8>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    15d2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	3c 83       	std	Y+4, r19	; 0x04
    15dc:	2b 83       	std	Y+3, r18	; 0x03
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	88 30       	cpi	r24, 0x08	; 8
    15e4:	91 05       	cpc	r25, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0x26>
    15e8:	70 c0       	rjmp	.+224    	; 0x16ca <KEYPAD_4x4_adjustKeyNumber+0x106>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	29 30       	cpi	r18, 0x09	; 9
    15f0:	31 05       	cpc	r19, r1
    15f2:	5c f5       	brge	.+86     	; 0x164a <KEYPAD_4x4_adjustKeyNumber+0x86>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	91 05       	cpc	r25, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    15fe:	59 c0       	rjmp	.+178    	; 0x16b2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1600:	2b 81       	ldd	r18, Y+3	; 0x03
    1602:	3c 81       	ldd	r19, Y+4	; 0x04
    1604:	25 30       	cpi	r18, 0x05	; 5
    1606:	31 05       	cpc	r19, r1
    1608:	9c f4       	brge	.+38     	; 0x1630 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1614:	48 c0       	rjmp	.+144    	; 0x16a6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1616:	2b 81       	ldd	r18, Y+3	; 0x03
    1618:	3c 81       	ldd	r19, Y+4	; 0x04
    161a:	23 30       	cpi	r18, 0x03	; 3
    161c:	31 05       	cpc	r19, r1
    161e:	0c f0       	brlt	.+2      	; 0x1622 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1620:	45 c0       	rjmp	.+138    	; 0x16ac <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	91 05       	cpc	r25, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    162c:	39 c0       	rjmp	.+114    	; 0x16a0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    162e:	67 c0       	rjmp	.+206    	; 0x16fe <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	26 30       	cpi	r18, 0x06	; 6
    1636:	31 05       	cpc	r19, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <KEYPAD_4x4_adjustKeyNumber+0x78>
    163a:	41 c0       	rjmp	.+130    	; 0x16be <KEYPAD_4x4_adjustKeyNumber+0xfa>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	87 30       	cpi	r24, 0x07	; 7
    1642:	91 05       	cpc	r25, r1
    1644:	0c f0       	brlt	.+2      	; 0x1648 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1646:	3e c0       	rjmp	.+124    	; 0x16c4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1648:	37 c0       	rjmp	.+110    	; 0x16b8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    164a:	2b 81       	ldd	r18, Y+3	; 0x03
    164c:	3c 81       	ldd	r19, Y+4	; 0x04
    164e:	2c 30       	cpi	r18, 0x0C	; 12
    1650:	31 05       	cpc	r19, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1654:	46 c0       	rjmp	.+140    	; 0x16e2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	8d 30       	cpi	r24, 0x0D	; 13
    165c:	91 05       	cpc	r25, r1
    165e:	5c f4       	brge	.+22     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	3c 81       	ldd	r19, Y+4	; 0x04
    1664:	2a 30       	cpi	r18, 0x0A	; 10
    1666:	31 05       	cpc	r19, r1
    1668:	b1 f1       	breq	.+108    	; 0x16d6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	8b 30       	cpi	r24, 0x0B	; 11
    1670:	91 05       	cpc	r25, r1
    1672:	a4 f5       	brge	.+104    	; 0x16dc <KEYPAD_4x4_adjustKeyNumber+0x118>
    1674:	2d c0       	rjmp	.+90     	; 0x16d0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1676:	2b 81       	ldd	r18, Y+3	; 0x03
    1678:	3c 81       	ldd	r19, Y+4	; 0x04
    167a:	2e 30       	cpi	r18, 0x0E	; 14
    167c:	31 05       	cpc	r19, r1
    167e:	b9 f1       	breq	.+110    	; 0x16ee <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	8e 30       	cpi	r24, 0x0E	; 14
    1686:	91 05       	cpc	r25, r1
    1688:	7c f1       	brlt	.+94     	; 0x16e8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    168a:	2b 81       	ldd	r18, Y+3	; 0x03
    168c:	3c 81       	ldd	r19, Y+4	; 0x04
    168e:	2f 30       	cpi	r18, 0x0F	; 15
    1690:	31 05       	cpc	r19, r1
    1692:	79 f1       	breq	.+94     	; 0x16f2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	80 31       	cpi	r24, 0x10	; 16
    169a:	91 05       	cpc	r25, r1
    169c:	69 f1       	breq	.+90     	; 0x16f8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    169e:	2f c0       	rjmp	.+94     	; 0x16fe <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    16a0:	87 e0       	ldi	r24, 0x07	; 7
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	2e c0       	rjmp	.+92     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    16a6:	88 e0       	ldi	r24, 0x08	; 8
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	2b c0       	rjmp	.+86     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    16ac:	89 e0       	ldi	r24, 0x09	; 9
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	28 c0       	rjmp	.+80     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    16b2:	85 e2       	ldi	r24, 0x25	; 37
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	25 c0       	rjmp	.+74     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    16b8:	84 e0       	ldi	r24, 0x04	; 4
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	22 c0       	rjmp	.+68     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    16be:	85 e0       	ldi	r24, 0x05	; 5
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	1f c0       	rjmp	.+62     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    16c4:	86 e0       	ldi	r24, 0x06	; 6
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	1c c0       	rjmp	.+56     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    16ca:	8a e2       	ldi	r24, 0x2A	; 42
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	19 c0       	rjmp	.+50     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	16 c0       	rjmp	.+44     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	13 c0       	rjmp	.+38     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	10 c0       	rjmp	.+32     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    16e2:	8d e2       	ldi	r24, 0x2D	; 45
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    16e8:	8d e0       	ldi	r24, 0x0D	; 13
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	0a c0       	rjmp	.+20     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    16ee:	19 82       	std	Y+1, r1	; 0x01
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    16f2:	8d e3       	ldi	r24, 0x3D	; 61
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    16f8:	8b e2       	ldi	r24, 0x2B	; 43
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1702:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	2e 97       	sbiw	r28, 0x0e	; 14
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a0 ea       	ldi	r26, 0xA0	; 160
    1740:	b1 e4       	ldi	r27, 0x41	; 65
    1742:	8b 87       	std	Y+11, r24	; 0x0b
    1744:	9c 87       	std	Y+12, r25	; 0x0c
    1746:	ad 87       	std	Y+13, r26	; 0x0d
    1748:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174a:	6b 85       	ldd	r22, Y+11	; 0x0b
    174c:	7c 85       	ldd	r23, Y+12	; 0x0c
    174e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1750:	9e 85       	ldd	r25, Y+14	; 0x0e
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4a ef       	ldi	r20, 0xFA	; 250
    1758:	54 e4       	ldi	r21, 0x44	; 68
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	8f 83       	std	Y+7, r24	; 0x07
    1764:	98 87       	std	Y+8, r25	; 0x08
    1766:	a9 87       	std	Y+9, r26	; 0x09
    1768:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e8       	ldi	r20, 0x80	; 128
    1778:	5f e3       	ldi	r21, 0x3F	; 63
    177a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    177e:	88 23       	and	r24, r24
    1780:	2c f4       	brge	.+10     	; 0x178c <LCD_init+0x7a>
		__ticks = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	3f c0       	rjmp	.+126    	; 0x180a <LCD_init+0xf8>
	else if (__tmp > 65535)
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	3f ef       	ldi	r19, 0xFF	; 255
    1798:	4f e7       	ldi	r20, 0x7F	; 127
    179a:	57 e4       	ldi	r21, 0x47	; 71
    179c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a0:	18 16       	cp	r1, r24
    17a2:	4c f5       	brge	.+82     	; 0x17f6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e2       	ldi	r20, 0x20	; 32
    17b2:	51 e4       	ldi	r21, 0x41	; 65
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <LCD_init+0xda>
    17ce:	88 ec       	ldi	r24, 0xC8	; 200
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_init+0xc8>
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	9e 83       	std	Y+6, r25	; 0x06
    17ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	69 f7       	brne	.-38     	; 0x17ce <LCD_init+0xbc>
    17f4:	14 c0       	rjmp	.+40     	; 0x181e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <LCD_init+0x104>
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	6f ef       	ldi	r22, 0xFF	; 255
    1822:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1826:	88 e3       	ldi	r24, 0x38	; 56
    1828:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    182c:	8c e0       	ldi	r24, 0x0C	; 12
    182e:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_sendCommand>
}
    1838:	2e 96       	adiw	r28, 0x0e	; 14
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	e9 97       	sbiw	r28, 0x39	; 57
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	0e 94 63 07 	call	0xec6	; 0xec6 <GPIO_writePin>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	a0 e8       	ldi	r26, 0x80	; 128
    1870:	bf e3       	ldi	r27, 0x3F	; 63
    1872:	8d ab       	std	Y+53, r24	; 0x35
    1874:	9e ab       	std	Y+54, r25	; 0x36
    1876:	af ab       	std	Y+55, r26	; 0x37
    1878:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187a:	6d a9       	ldd	r22, Y+53	; 0x35
    187c:	7e a9       	ldd	r23, Y+54	; 0x36
    187e:	8f a9       	ldd	r24, Y+55	; 0x37
    1880:	98 ad       	ldd	r25, Y+56	; 0x38
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	4a ef       	ldi	r20, 0xFA	; 250
    1888:	54 e4       	ldi	r21, 0x44	; 68
    188a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	89 ab       	std	Y+49, r24	; 0x31
    1894:	9a ab       	std	Y+50, r25	; 0x32
    1896:	ab ab       	std	Y+51, r26	; 0x33
    1898:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    189a:	69 a9       	ldd	r22, Y+49	; 0x31
    189c:	7a a9       	ldd	r23, Y+50	; 0x32
    189e:	8b a9       	ldd	r24, Y+51	; 0x33
    18a0:	9c a9       	ldd	r25, Y+52	; 0x34
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e8       	ldi	r20, 0x80	; 128
    18a8:	5f e3       	ldi	r21, 0x3F	; 63
    18aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ae:	88 23       	and	r24, r24
    18b0:	2c f4       	brge	.+10     	; 0x18bc <LCD_sendCommand+0x72>
		__ticks = 1;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	98 ab       	std	Y+48, r25	; 0x30
    18b8:	8f a7       	std	Y+47, r24	; 0x2f
    18ba:	3f c0       	rjmp	.+126    	; 0x193a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    18bc:	69 a9       	ldd	r22, Y+49	; 0x31
    18be:	7a a9       	ldd	r23, Y+50	; 0x32
    18c0:	8b a9       	ldd	r24, Y+51	; 0x33
    18c2:	9c a9       	ldd	r25, Y+52	; 0x34
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	3f ef       	ldi	r19, 0xFF	; 255
    18c8:	4f e7       	ldi	r20, 0x7F	; 127
    18ca:	57 e4       	ldi	r21, 0x47	; 71
    18cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d0:	18 16       	cp	r1, r24
    18d2:	4c f5       	brge	.+82     	; 0x1926 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d4:	6d a9       	ldd	r22, Y+53	; 0x35
    18d6:	7e a9       	ldd	r23, Y+54	; 0x36
    18d8:	8f a9       	ldd	r24, Y+55	; 0x37
    18da:	98 ad       	ldd	r25, Y+56	; 0x38
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e2       	ldi	r20, 0x20	; 32
    18e2:	51 e4       	ldi	r21, 0x41	; 65
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	bc 01       	movw	r22, r24
    18ee:	cd 01       	movw	r24, r26
    18f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	98 ab       	std	Y+48, r25	; 0x30
    18fa:	8f a7       	std	Y+47, r24	; 0x2f
    18fc:	0f c0       	rjmp	.+30     	; 0x191c <LCD_sendCommand+0xd2>
    18fe:	88 ec       	ldi	r24, 0xC8	; 200
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9e a7       	std	Y+46, r25	; 0x2e
    1904:	8d a7       	std	Y+45, r24	; 0x2d
    1906:	8d a5       	ldd	r24, Y+45	; 0x2d
    1908:	9e a5       	ldd	r25, Y+46	; 0x2e
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <LCD_sendCommand+0xc0>
    190e:	9e a7       	std	Y+46, r25	; 0x2e
    1910:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1912:	8f a5       	ldd	r24, Y+47	; 0x2f
    1914:	98 a9       	ldd	r25, Y+48	; 0x30
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191c:	8f a5       	ldd	r24, Y+47	; 0x2f
    191e:	98 a9       	ldd	r25, Y+48	; 0x30
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	69 f7       	brne	.-38     	; 0x18fe <LCD_sendCommand+0xb4>
    1924:	14 c0       	rjmp	.+40     	; 0x194e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1926:	69 a9       	ldd	r22, Y+49	; 0x31
    1928:	7a a9       	ldd	r23, Y+50	; 0x32
    192a:	8b a9       	ldd	r24, Y+51	; 0x33
    192c:	9c a9       	ldd	r25, Y+52	; 0x34
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	98 ab       	std	Y+48, r25	; 0x30
    1938:	8f a7       	std	Y+47, r24	; 0x2f
    193a:	8f a5       	ldd	r24, Y+47	; 0x2f
    193c:	98 a9       	ldd	r25, Y+48	; 0x30
    193e:	9c a7       	std	Y+44, r25	; 0x2c
    1940:	8b a7       	std	Y+43, r24	; 0x2b
    1942:	8b a5       	ldd	r24, Y+43	; 0x2b
    1944:	9c a5       	ldd	r25, Y+44	; 0x2c
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_sendCommand+0xfc>
    194a:	9c a7       	std	Y+44, r25	; 0x2c
    194c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 63 07 	call	0xec6	; 0xec6 <GPIO_writePin>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e8       	ldi	r26, 0x80	; 128
    195e:	bf e3       	ldi	r27, 0x3F	; 63
    1960:	8f a3       	std	Y+39, r24	; 0x27
    1962:	98 a7       	std	Y+40, r25	; 0x28
    1964:	a9 a7       	std	Y+41, r26	; 0x29
    1966:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	6f a1       	ldd	r22, Y+39	; 0x27
    196a:	78 a5       	ldd	r23, Y+40	; 0x28
    196c:	89 a5       	ldd	r24, Y+41	; 0x29
    196e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a ef       	ldi	r20, 0xFA	; 250
    1976:	54 e4       	ldi	r21, 0x44	; 68
    1978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8b a3       	std	Y+35, r24	; 0x23
    1982:	9c a3       	std	Y+36, r25	; 0x24
    1984:	ad a3       	std	Y+37, r26	; 0x25
    1986:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1988:	6b a1       	ldd	r22, Y+35	; 0x23
    198a:	7c a1       	ldd	r23, Y+36	; 0x24
    198c:	8d a1       	ldd	r24, Y+37	; 0x25
    198e:	9e a1       	ldd	r25, Y+38	; 0x26
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <LCD_sendCommand+0x160>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9a a3       	std	Y+34, r25	; 0x22
    19a6:	89 a3       	std	Y+33, r24	; 0x21
    19a8:	3f c0       	rjmp	.+126    	; 0x1a28 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    19aa:	6b a1       	ldd	r22, Y+35	; 0x23
    19ac:	7c a1       	ldd	r23, Y+36	; 0x24
    19ae:	8d a1       	ldd	r24, Y+37	; 0x25
    19b0:	9e a1       	ldd	r25, Y+38	; 0x26
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	4c f5       	brge	.+82     	; 0x1a14 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c2:	6f a1       	ldd	r22, Y+39	; 0x27
    19c4:	78 a5       	ldd	r23, Y+40	; 0x28
    19c6:	89 a5       	ldd	r24, Y+41	; 0x29
    19c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9a a3       	std	Y+34, r25	; 0x22
    19e8:	89 a3       	std	Y+33, r24	; 0x21
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <LCD_sendCommand+0x1c0>
    19ec:	88 ec       	ldi	r24, 0xC8	; 200
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	98 a3       	std	Y+32, r25	; 0x20
    19f2:	8f 8f       	std	Y+31, r24	; 0x1f
    19f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19f6:	98 a1       	ldd	r25, Y+32	; 0x20
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_sendCommand+0x1ae>
    19fc:	98 a3       	std	Y+32, r25	; 0x20
    19fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	89 a1       	ldd	r24, Y+33	; 0x21
    1a02:	9a a1       	ldd	r25, Y+34	; 0x22
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	9a a3       	std	Y+34, r25	; 0x22
    1a08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <LCD_sendCommand+0x1a2>
    1a12:	14 c0       	rjmp	.+40     	; 0x1a3c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	6b a1       	ldd	r22, Y+35	; 0x23
    1a16:	7c a1       	ldd	r23, Y+36	; 0x24
    1a18:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9a a3       	std	Y+34, r25	; 0x22
    1a26:	89 a3       	std	Y+33, r24	; 0x21
    1a28:	89 a1       	ldd	r24, Y+33	; 0x21
    1a2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_sendCommand+0x1ea>
    1a38:	9e 8f       	std	Y+30, r25	; 0x1e
    1a3a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	69 ad       	ldd	r22, Y+57	; 0x39
    1a40:	0e 94 59 09 	call	0x12b2	; 0x12b2 <GPIO_writePort>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e8       	ldi	r26, 0x80	; 128
    1a4a:	bf e3       	ldi	r27, 0x3F	; 63
    1a4c:	89 8f       	std	Y+25, r24	; 0x19
    1a4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a50:	ab 8f       	std	Y+27, r26	; 0x1b
    1a52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a54:	69 8d       	ldd	r22, Y+25	; 0x19
    1a56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	4a ef       	ldi	r20, 0xFA	; 250
    1a62:	54 e4       	ldi	r21, 0x44	; 68
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	8d 8b       	std	Y+21, r24	; 0x15
    1a6e:	9e 8b       	std	Y+22, r25	; 0x16
    1a70:	af 8b       	std	Y+23, r26	; 0x17
    1a72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a74:	6d 89       	ldd	r22, Y+21	; 0x15
    1a76:	7e 89       	ldd	r23, Y+22	; 0x16
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c 8b       	std	Y+20, r25	; 0x14
    1a92:	8b 8b       	std	Y+19, r24	; 0x13
    1a94:	3f c0       	rjmp	.+126    	; 0x1b14 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a96:	6d 89       	ldd	r22, Y+21	; 0x15
    1a98:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	3f ef       	ldi	r19, 0xFF	; 255
    1aa2:	4f e7       	ldi	r20, 0x7F	; 127
    1aa4:	57 e4       	ldi	r21, 0x47	; 71
    1aa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	4c f5       	brge	.+82     	; 0x1b00 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aae:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e2       	ldi	r20, 0x20	; 32
    1abc:	51 e4       	ldi	r21, 0x41	; 65
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9c 8b       	std	Y+20, r25	; 0x14
    1ad4:	8b 8b       	std	Y+19, r24	; 0x13
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <LCD_sendCommand+0x2ac>
    1ad8:	88 ec       	ldi	r24, 0xC8	; 200
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9a 8b       	std	Y+18, r25	; 0x12
    1ade:	89 8b       	std	Y+17, r24	; 0x11
    1ae0:	89 89       	ldd	r24, Y+17	; 0x11
    1ae2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_sendCommand+0x29a>
    1ae8:	9a 8b       	std	Y+18, r25	; 0x12
    1aea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	8b 89       	ldd	r24, Y+19	; 0x13
    1aee:	9c 89       	ldd	r25, Y+20	; 0x14
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	9c 8b       	std	Y+20, r25	; 0x14
    1af4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	9c 89       	ldd	r25, Y+20	; 0x14
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <LCD_sendCommand+0x28e>
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9c 8b       	std	Y+20, r25	; 0x14
    1b12:	8b 8b       	std	Y+19, r24	; 0x13
    1b14:	8b 89       	ldd	r24, Y+19	; 0x13
    1b16:	9c 89       	ldd	r25, Y+20	; 0x14
    1b18:	98 8b       	std	Y+16, r25	; 0x10
    1b1a:	8f 87       	std	Y+15, r24	; 0x0f
    1b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1e:	98 89       	ldd	r25, Y+16	; 0x10
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_sendCommand+0x2d6>
    1b24:	98 8b       	std	Y+16, r25	; 0x10
    1b26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	0e 94 63 07 	call	0xec6	; 0xec6 <GPIO_writePin>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a0 e8       	ldi	r26, 0x80	; 128
    1b38:	bf e3       	ldi	r27, 0x3F	; 63
    1b3a:	8b 87       	std	Y+11, r24	; 0x0b
    1b3c:	9c 87       	std	Y+12, r25	; 0x0c
    1b3e:	ad 87       	std	Y+13, r26	; 0x0d
    1b40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	4a ef       	ldi	r20, 0xFA	; 250
    1b50:	54 e4       	ldi	r21, 0x44	; 68
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	8f 83       	std	Y+7, r24	; 0x07
    1b5c:	98 87       	std	Y+8, r25	; 0x08
    1b5e:	a9 87       	std	Y+9, r26	; 0x09
    1b60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9e 83       	std	Y+6, r25	; 0x06
    1b80:	8d 83       	std	Y+5, r24	; 0x05
    1b82:	3f c0       	rjmp	.+126    	; 0x1c02 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1b84:	6f 81       	ldd	r22, Y+7	; 0x07
    1b86:	78 85       	ldd	r23, Y+8	; 0x08
    1b88:	89 85       	ldd	r24, Y+9	; 0x09
    1b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	3f ef       	ldi	r19, 0xFF	; 255
    1b90:	4f e7       	ldi	r20, 0x7F	; 127
    1b92:	57 e4       	ldi	r21, 0x47	; 71
    1b94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b98:	18 16       	cp	r1, r24
    1b9a:	4c f5       	brge	.+82     	; 0x1bee <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e2       	ldi	r20, 0x20	; 32
    1baa:	51 e4       	ldi	r21, 0x41	; 65
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <LCD_sendCommand+0x39a>
    1bc6:	88 ec       	ldi	r24, 0xC8	; 200
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD_sendCommand+0x388>
    1bd6:	9c 83       	std	Y+4, r25	; 0x04
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	69 f7       	brne	.-38     	; 0x1bc6 <LCD_sendCommand+0x37c>
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <LCD_sendCommand+0x3c4>
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c16:	e9 96       	adiw	r28, 0x39	; 57
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	e9 97       	sbiw	r28, 0x39	; 57
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 63 07 	call	0xec6	; 0xec6 <GPIO_writePin>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a0 e8       	ldi	r26, 0x80	; 128
    1c4e:	bf e3       	ldi	r27, 0x3F	; 63
    1c50:	8d ab       	std	Y+53, r24	; 0x35
    1c52:	9e ab       	std	Y+54, r25	; 0x36
    1c54:	af ab       	std	Y+55, r26	; 0x37
    1c56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	6d a9       	ldd	r22, Y+53	; 0x35
    1c5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a ef       	ldi	r20, 0xFA	; 250
    1c66:	54 e4       	ldi	r21, 0x44	; 68
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	89 ab       	std	Y+49, r24	; 0x31
    1c72:	9a ab       	std	Y+50, r25	; 0x32
    1c74:	ab ab       	std	Y+51, r26	; 0x33
    1c76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c78:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	98 ab       	std	Y+48, r25	; 0x30
    1c96:	8f a7       	std	Y+47, r24	; 0x2f
    1c98:	3f c0       	rjmp	.+126    	; 0x1d18 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cae:	18 16       	cp	r1, r24
    1cb0:	4c f5       	brge	.+82     	; 0x1d04 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	98 ab       	std	Y+48, r25	; 0x30
    1cd8:	8f a7       	std	Y+47, r24	; 0x2f
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <LCD_displayCharacter+0xd2>
    1cdc:	88 ec       	ldi	r24, 0xC8	; 200
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9e a7       	std	Y+46, r25	; 0x2e
    1ce2:	8d a7       	std	Y+45, r24	; 0x2d
    1ce4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ce6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_displayCharacter+0xc0>
    1cec:	9e a7       	std	Y+46, r25	; 0x2e
    1cee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	98 ab       	std	Y+48, r25	; 0x30
    1cf8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <LCD_displayCharacter+0xb4>
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	69 a9       	ldd	r22, Y+49	; 0x31
    1d06:	7a a9       	ldd	r23, Y+50	; 0x32
    1d08:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	98 ab       	std	Y+48, r25	; 0x30
    1d16:	8f a7       	std	Y+47, r24	; 0x2f
    1d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1c:	9c a7       	std	Y+44, r25	; 0x2c
    1d1e:	8b a7       	std	Y+43, r24	; 0x2b
    1d20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_displayCharacter+0xfc>
    1d28:	9c a7       	std	Y+44, r25	; 0x2c
    1d2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 63 07 	call	0xec6	; 0xec6 <GPIO_writePin>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a0 e8       	ldi	r26, 0x80	; 128
    1d3c:	bf e3       	ldi	r27, 0x3F	; 63
    1d3e:	8f a3       	std	Y+39, r24	; 0x27
    1d40:	98 a7       	std	Y+40, r25	; 0x28
    1d42:	a9 a7       	std	Y+41, r26	; 0x29
    1d44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d46:	6f a1       	ldd	r22, Y+39	; 0x27
    1d48:	78 a5       	ldd	r23, Y+40	; 0x28
    1d4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a ef       	ldi	r20, 0xFA	; 250
    1d54:	54 e4       	ldi	r21, 0x44	; 68
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8b a3       	std	Y+35, r24	; 0x23
    1d60:	9c a3       	std	Y+36, r25	; 0x24
    1d62:	ad a3       	std	Y+37, r26	; 0x25
    1d64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d66:	6b a1       	ldd	r22, Y+35	; 0x23
    1d68:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7a:	88 23       	and	r24, r24
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9a a3       	std	Y+34, r25	; 0x22
    1d84:	89 a3       	std	Y+33, r24	; 0x21
    1d86:	3f c0       	rjmp	.+126    	; 0x1e06 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1d88:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	3f ef       	ldi	r19, 0xFF	; 255
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	57 e4       	ldi	r21, 0x47	; 71
    1d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	4c f5       	brge	.+82     	; 0x1df2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	6f a1       	ldd	r22, Y+39	; 0x27
    1da2:	78 a5       	ldd	r23, Y+40	; 0x28
    1da4:	89 a5       	ldd	r24, Y+41	; 0x29
    1da6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9a a3       	std	Y+34, r25	; 0x22
    1dc6:	89 a3       	std	Y+33, r24	; 0x21
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <LCD_displayCharacter+0x1c0>
    1dca:	88 ec       	ldi	r24, 0xC8	; 200
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	98 a3       	std	Y+32, r25	; 0x20
    1dd0:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dd4:	98 a1       	ldd	r25, Y+32	; 0x20
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_displayCharacter+0x1ae>
    1dda:	98 a3       	std	Y+32, r25	; 0x20
    1ddc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dde:	89 a1       	ldd	r24, Y+33	; 0x21
    1de0:	9a a1       	ldd	r25, Y+34	; 0x22
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	9a a3       	std	Y+34, r25	; 0x22
    1de6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dea:	9a a1       	ldd	r25, Y+34	; 0x22
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	69 f7       	brne	.-38     	; 0x1dca <LCD_displayCharacter+0x1a2>
    1df0:	14 c0       	rjmp	.+40     	; 0x1e1a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	6b a1       	ldd	r22, Y+35	; 0x23
    1df4:	7c a1       	ldd	r23, Y+36	; 0x24
    1df6:	8d a1       	ldd	r24, Y+37	; 0x25
    1df8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9a a3       	std	Y+34, r25	; 0x22
    1e04:	89 a3       	std	Y+33, r24	; 0x21
    1e06:	89 a1       	ldd	r24, Y+33	; 0x21
    1e08:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_displayCharacter+0x1ea>
    1e16:	9e 8f       	std	Y+30, r25	; 0x1e
    1e18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	69 ad       	ldd	r22, Y+57	; 0x39
    1e1e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <GPIO_writePort>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	a0 e8       	ldi	r26, 0x80	; 128
    1e28:	bf e3       	ldi	r27, 0x3F	; 63
    1e2a:	89 8f       	std	Y+25, r24	; 0x19
    1e2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e32:	69 8d       	ldd	r22, Y+25	; 0x19
    1e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	4a ef       	ldi	r20, 0xFA	; 250
    1e40:	54 e4       	ldi	r21, 0x44	; 68
    1e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	8d 8b       	std	Y+21, r24	; 0x15
    1e4c:	9e 8b       	std	Y+22, r25	; 0x16
    1e4e:	af 8b       	std	Y+23, r26	; 0x17
    1e50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e52:	6d 89       	ldd	r22, Y+21	; 0x15
    1e54:	7e 89       	ldd	r23, Y+22	; 0x16
    1e56:	8f 89       	ldd	r24, Y+23	; 0x17
    1e58:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	2c f4       	brge	.+10     	; 0x1e74 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9c 8b       	std	Y+20, r25	; 0x14
    1e70:	8b 8b       	std	Y+19, r24	; 0x13
    1e72:	3f c0       	rjmp	.+126    	; 0x1ef2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1e74:	6d 89       	ldd	r22, Y+21	; 0x15
    1e76:	7e 89       	ldd	r23, Y+22	; 0x16
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	3f ef       	ldi	r19, 0xFF	; 255
    1e80:	4f e7       	ldi	r20, 0x7F	; 127
    1e82:	57 e4       	ldi	r21, 0x47	; 71
    1e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e88:	18 16       	cp	r1, r24
    1e8a:	4c f5       	brge	.+82     	; 0x1ede <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e2       	ldi	r20, 0x20	; 32
    1e9a:	51 e4       	ldi	r21, 0x41	; 65
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
    1eb4:	0f c0       	rjmp	.+30     	; 0x1ed4 <LCD_displayCharacter+0x2ac>
    1eb6:	88 ec       	ldi	r24, 0xC8	; 200
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9a 8b       	std	Y+18, r25	; 0x12
    1ebc:	89 8b       	std	Y+17, r24	; 0x11
    1ebe:	89 89       	ldd	r24, Y+17	; 0x11
    1ec0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_displayCharacter+0x29a>
    1ec6:	9a 8b       	std	Y+18, r25	; 0x12
    1ec8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	9c 8b       	std	Y+20, r25	; 0x14
    1ed2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	69 f7       	brne	.-38     	; 0x1eb6 <LCD_displayCharacter+0x28e>
    1edc:	14 c0       	rjmp	.+40     	; 0x1f06 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ede:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	98 8b       	std	Y+16, r25	; 0x10
    1ef8:	8f 87       	std	Y+15, r24	; 0x0f
    1efa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efc:	98 89       	ldd	r25, Y+16	; 0x10
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <LCD_displayCharacter+0x2d6>
    1f02:	98 8b       	std	Y+16, r25	; 0x10
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	61 e0       	ldi	r22, 0x01	; 1
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	0e 94 63 07 	call	0xec6	; 0xec6 <GPIO_writePin>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e8       	ldi	r26, 0x80	; 128
    1f16:	bf e3       	ldi	r27, 0x3F	; 63
    1f18:	8b 87       	std	Y+11, r24	; 0x0b
    1f1a:	9c 87       	std	Y+12, r25	; 0x0c
    1f1c:	ad 87       	std	Y+13, r26	; 0x0d
    1f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a ef       	ldi	r20, 0xFA	; 250
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8f 83       	std	Y+7, r24	; 0x07
    1f3a:	98 87       	std	Y+8, r25	; 0x08
    1f3c:	a9 87       	std	Y+9, r26	; 0x09
    1f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <LCD_displayCharacter+0x39a>
    1fa4:	88 ec       	ldi	r24, 0xC8	; 200
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_displayCharacter+0x388>
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <LCD_displayCharacter+0x37c>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fce:	78 85       	ldd	r23, Y+8	; 0x08
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_displayCharacter+0x3c4>
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ff4:	e9 96       	adiw	r28, 0x39	; 57
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <LCD_displayString+0x6>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9b 83       	std	Y+3, r25	; 0x03
    2014:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2016:	19 82       	std	Y+1, r1	; 0x01
    2018:	0e c0       	rjmp	.+28     	; 0x2036 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	fc 01       	movw	r30, r24
    2026:	e2 0f       	add	r30, r18
    2028:	f3 1f       	adc	r31, r19
    202a:	80 81       	ld	r24, Z
    202c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_displayCharacter>
		i++;
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	fc 01       	movw	r30, r24
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	80 81       	ld	r24, Z
    2048:	88 23       	and	r24, r24
    204a:	39 f7       	brne	.-50     	; 0x201a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	00 d0       	rcall	.+0      	; 0x205e <LCD_moveCursor+0x6>
    205e:	00 d0       	rcall	.+0      	; 0x2060 <LCD_moveCursor+0x8>
    2060:	0f 92       	push	r0
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	8a 83       	std	Y+2, r24	; 0x02
    2068:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	3d 83       	std	Y+5, r19	; 0x05
    2072:	2c 83       	std	Y+4, r18	; 0x04
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	91 05       	cpc	r25, r1
    207c:	c1 f0       	breq	.+48     	; 0x20ae <LCD_moveCursor+0x56>
    207e:	2c 81       	ldd	r18, Y+4	; 0x04
    2080:	3d 81       	ldd	r19, Y+5	; 0x05
    2082:	22 30       	cpi	r18, 0x02	; 2
    2084:	31 05       	cpc	r19, r1
    2086:	2c f4       	brge	.+10     	; 0x2092 <LCD_moveCursor+0x3a>
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	9d 81       	ldd	r25, Y+5	; 0x05
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	61 f0       	breq	.+24     	; 0x20a8 <LCD_moveCursor+0x50>
    2090:	19 c0       	rjmp	.+50     	; 0x20c4 <LCD_moveCursor+0x6c>
    2092:	2c 81       	ldd	r18, Y+4	; 0x04
    2094:	3d 81       	ldd	r19, Y+5	; 0x05
    2096:	22 30       	cpi	r18, 0x02	; 2
    2098:	31 05       	cpc	r19, r1
    209a:	69 f0       	breq	.+26     	; 0x20b6 <LCD_moveCursor+0x5e>
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	83 30       	cpi	r24, 0x03	; 3
    20a2:	91 05       	cpc	r25, r1
    20a4:	61 f0       	breq	.+24     	; 0x20be <LCD_moveCursor+0x66>
    20a6:	0e c0       	rjmp	.+28     	; 0x20c4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	0b c0       	rjmp	.+22     	; 0x20c4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	80 5c       	subi	r24, 0xC0	; 192
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	07 c0       	rjmp	.+14     	; 0x20c4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	80 5f       	subi	r24, 0xF0	; 240
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	80 5b       	subi	r24, 0xB0	; 176
    20c2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	80 68       	ori	r24, 0x80	; 128
    20c8:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_sendCommand>
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <LCD_displayStringRowColumn+0x6>
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <LCD_displayStringRowColumn+0x8>
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	6a 83       	std	Y+2, r22	; 0x02
    20ec:	5c 83       	std	Y+4, r21	; 0x04
    20ee:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	6a 81       	ldd	r22, Y+2	; 0x02
    20f4:	0e 94 2c 10 	call	0x2058	; 0x2058 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_displayString>
}
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	62 97       	sbiw	r28, 0x12	; 18
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	9a 8b       	std	Y+18, r25	; 0x12
    2124:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2126:	89 89       	ldd	r24, Y+17	; 0x11
    2128:	9a 89       	ldd	r25, Y+18	; 0x12
    212a:	9e 01       	movw	r18, r28
    212c:	2f 5f       	subi	r18, 0xFF	; 255
    212e:	3f 4f       	sbci	r19, 0xFF	; 255
    2130:	b9 01       	movw	r22, r18
    2132:	4a e0       	ldi	r20, 0x0A	; 10
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	0e 94 c8 18 	call	0x3190	; 0x3190 <itoa>
   LCD_displayString(buff); /* Display the string */
    213a:	ce 01       	movw	r24, r28
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_displayString>
}
    2142:	62 96       	adiw	r28, 0x12	; 18
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <LCD_floatToString>:
/*
 * Description :
 * Display the required decimal float value on the screen
 */
void LCD_floatToString(float32 data)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	6c 97       	sbiw	r28, 0x1c	; 28
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	69 8f       	std	Y+25, r22	; 0x19
    216a:	7a 8f       	std	Y+26, r23	; 0x1a
    216c:	8b 8f       	std	Y+27, r24	; 0x1b
    216e:	9c 8f       	std	Y+28, r25	; 0x1c
   char buff[16]; /* String to hold the ascii result */
   uint32 intgerPart = (uint32)(data);
    2170:	69 8d       	ldd	r22, Y+25	; 0x19
    2172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	af 83       	std	Y+7, r26	; 0x07
    2186:	b8 87       	std	Y+8, r27	; 0x08
   uint32 fractionPart = (uint32)((data - (uint32)data)*10);
    2188:	69 8d       	ldd	r22, Y+25	; 0x19
    218a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    218c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    218e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    21a0:	9b 01       	movw	r18, r22
    21a2:	ac 01       	movw	r20, r24
    21a4:	69 8d       	ldd	r22, Y+25	; 0x19
    21a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ac:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e2       	ldi	r20, 0x20	; 32
    21be:	51 e4       	ldi	r21, 0x41	; 65
    21c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	ab 83       	std	Y+3, r26	; 0x03
    21da:	bc 83       	std	Y+4, r27	; 0x04
   itoa(intgerPart,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	9e 01       	movw	r18, r28
    21e2:	27 5f       	subi	r18, 0xF7	; 247
    21e4:	3f 4f       	sbci	r19, 0xFF	; 255
    21e6:	b9 01       	movw	r22, r18
    21e8:	4a e0       	ldi	r20, 0x0A	; 10
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	0e 94 c8 18 	call	0x3190	; 0x3190 <itoa>
   LCD_displayString(buff); /* Display the string */
    21f0:	ce 01       	movw	r24, r28
    21f2:	09 96       	adiw	r24, 0x09	; 9
    21f4:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_displayString>
   LCD_displayCharacter('.');
    21f8:	8e e2       	ldi	r24, 0x2E	; 46
    21fa:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_displayCharacter>
   itoa(fractionPart,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	9e 01       	movw	r18, r28
    2204:	27 5f       	subi	r18, 0xF7	; 247
    2206:	3f 4f       	sbci	r19, 0xFF	; 255
    2208:	b9 01       	movw	r22, r18
    220a:	4a e0       	ldi	r20, 0x0A	; 10
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	0e 94 c8 18 	call	0x3190	; 0x3190 <itoa>
   LCD_displayString(buff); /* Display the string */
    2212:	ce 01       	movw	r24, r28
    2214:	09 96       	adiw	r24, 0x09	; 9
    2216:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_displayString>
}
    221a:	6c 96       	adiw	r28, 0x1c	; 28
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_sendCommand>
}
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <main>:
void new_password_task(void);

uint8 system_ticks = 0, is_timer_finished = FALSE;
uint8 motor_ticks = 0, is_door_open = FALSE, password_size = 0;

int main(void) {
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	a8 97       	sbiw	r28, 0x28	; 40
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
	uint8 keypad_pressedKey_value, is_password_correct = FALSE_PASSCODE_ID, num_of_attempts = 0, current_state;
    2254:	86 e4       	ldi	r24, 0x46	; 70
    2256:	89 8b       	std	Y+17, r24	; 0x11
    2258:	18 8a       	std	Y+16, r1	; 0x10
	 * 				Intialization Stage
	 *************************************************/
	/*
	 * initializing MCAL layer components
	 */
	UART_ConfigType uart_config = {DATA_8_BIT, NO_PARITY, UART_1_STOP_BIT, 19200};
    225a:	ce 01       	movw	r24, r28
    225c:	43 96       	adiw	r24, 0x13	; 19
    225e:	98 a3       	std	Y+32, r25	; 0x20
    2260:	8f 8f       	std	Y+31, r24	; 0x1f
    2262:	ed e2       	ldi	r30, 0x2D	; 45
    2264:	f2 e0       	ldi	r31, 0x02	; 2
    2266:	fa a3       	std	Y+34, r31	; 0x22
    2268:	e9 a3       	std	Y+33, r30	; 0x21
    226a:	f5 e0       	ldi	r31, 0x05	; 5
    226c:	fb a3       	std	Y+35, r31	; 0x23
    226e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2270:	fa a1       	ldd	r31, Y+34	; 0x22
    2272:	00 80       	ld	r0, Z
    2274:	89 a1       	ldd	r24, Y+33	; 0x21
    2276:	9a a1       	ldd	r25, Y+34	; 0x22
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	9a a3       	std	Y+34, r25	; 0x22
    227c:	89 a3       	std	Y+33, r24	; 0x21
    227e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2280:	f8 a1       	ldd	r31, Y+32	; 0x20
    2282:	00 82       	st	Z, r0
    2284:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2286:	98 a1       	ldd	r25, Y+32	; 0x20
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	98 a3       	std	Y+32, r25	; 0x20
    228c:	8f 8f       	std	Y+31, r24	; 0x1f
    228e:	9b a1       	ldd	r25, Y+35	; 0x23
    2290:	91 50       	subi	r25, 0x01	; 1
    2292:	9b a3       	std	Y+35, r25	; 0x23
    2294:	eb a1       	ldd	r30, Y+35	; 0x23
    2296:	ee 23       	and	r30, r30
    2298:	51 f7       	brne	.-44     	; 0x226e <main+0x2e>
	Timer_ConfigType timer_config = {0, 7811, TIMER1, F_CLK_PRESCALE_1024, TIMER_COMPARE_MODE};
    229a:	ce 01       	movw	r24, r28
    229c:	48 96       	adiw	r24, 0x18	; 24
    229e:	9d a3       	std	Y+37, r25	; 0x25
    22a0:	8c a3       	std	Y+36, r24	; 0x24
    22a2:	e6 e2       	ldi	r30, 0x26	; 38
    22a4:	f2 e0       	ldi	r31, 0x02	; 2
    22a6:	ff a3       	std	Y+39, r31	; 0x27
    22a8:	ee a3       	std	Y+38, r30	; 0x26
    22aa:	f7 e0       	ldi	r31, 0x07	; 7
    22ac:	f8 a7       	std	Y+40, r31	; 0x28
    22ae:	ee a1       	ldd	r30, Y+38	; 0x26
    22b0:	ff a1       	ldd	r31, Y+39	; 0x27
    22b2:	00 80       	ld	r0, Z
    22b4:	8e a1       	ldd	r24, Y+38	; 0x26
    22b6:	9f a1       	ldd	r25, Y+39	; 0x27
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	9f a3       	std	Y+39, r25	; 0x27
    22bc:	8e a3       	std	Y+38, r24	; 0x26
    22be:	ec a1       	ldd	r30, Y+36	; 0x24
    22c0:	fd a1       	ldd	r31, Y+37	; 0x25
    22c2:	00 82       	st	Z, r0
    22c4:	8c a1       	ldd	r24, Y+36	; 0x24
    22c6:	9d a1       	ldd	r25, Y+37	; 0x25
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	9d a3       	std	Y+37, r25	; 0x25
    22cc:	8c a3       	std	Y+36, r24	; 0x24
    22ce:	98 a5       	ldd	r25, Y+40	; 0x28
    22d0:	91 50       	subi	r25, 0x01	; 1
    22d2:	98 a7       	std	Y+40, r25	; 0x28
    22d4:	e8 a5       	ldd	r30, Y+40	; 0x28
    22d6:	ee 23       	and	r30, r30
    22d8:	51 f7       	brne	.-44     	; 0x22ae <main+0x6e>
	UART_init(&uart_config);
    22da:	ce 01       	movw	r24, r28
    22dc:	43 96       	adiw	r24, 0x13	; 19
    22de:	0e 94 14 17 	call	0x2e28	; 0x2e28 <UART_init>
	SREG|=(1<<7);/* Global interrupt enable */
    22e2:	af e5       	ldi	r26, 0x5F	; 95
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	ef e5       	ldi	r30, 0x5F	; 95
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	80 68       	ori	r24, 0x80	; 128
    22ee:	8c 93       	st	X, r24

	/*
	 * initializing MCAL layer components
	 */
	LCD_init();
    22f0:	0e 94 89 0b 	call	0x1712	; 0x1712 <LCD_init>
	/* Syncing the ECUs */
	UART_sendByte(UART_SYNC_CHAR);
    22f4:	81 e4       	ldi	r24, 0x41	; 65
    22f6:	0e 94 dd 17 	call	0x2fba	; 0x2fba <UART_sendByte>
	while(UART_recieveByte() != UART_SYNC_CHAR);
    22fa:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <UART_recieveByte>
    22fe:	81 34       	cpi	r24, 0x41	; 65
    2300:	e1 f7       	brne	.-8      	; 0x22fa <main+0xba>
	/* Assigning a password for the system */
	new_password_task();
    2302:	0e 94 b6 13 	call	0x276c	; 0x276c <new_password_task>
	while (TRUE) {
		if(is_password_correct == FALSE_PASSCODE_ID)
    2306:	89 89       	ldd	r24, Y+17	; 0x11
    2308:	86 34       	cpi	r24, 0x46	; 70
    230a:	09 f0       	breq	.+2      	; 0x230e <main+0xce>
    230c:	dc c0       	rjmp	.+440    	; 0x24c6 <main+0x286>
		{
			if(num_of_attempts == MAX_NUM_OF_ATTEMPTS)
    230e:	88 89       	ldd	r24, Y+16	; 0x10
    2310:	83 30       	cpi	r24, 0x03	; 3
    2312:	19 f5       	brne	.+70     	; 0x235a <main+0x11a>
			{
				Timer_init(&timer_config);
    2314:	ce 01       	movw	r24, r28
    2316:	48 96       	adiw	r24, 0x18	; 24
    2318:	0e 94 13 15 	call	0x2a26	; 0x2a26 <Timer_init>
				Timer_setCallBack(timer_callBack_systemNOK_OP, TIMER1);
    231c:	84 ee       	ldi	r24, 0xE4	; 228
    231e:	92 e1       	ldi	r25, 0x12	; 18
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	0e 94 db 16 	call	0x2db6	; 0x2db6 <Timer_setCallBack>

				LCD_clearScreen();
    2326:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_clearScreen>
				LCD_displayStringRowColumn(0,1, "System LOCKED");
    232a:	20 e6       	ldi	r18, 0x60	; 96
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	a9 01       	movw	r20, r18
    2334:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0, "wait for 1 min");
    2338:	2e e6       	ldi	r18, 0x6E	; 110
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	a9 01       	movw	r20, r18
    2342:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>

				while(is_timer_finished == FALSE){}
    2346:	80 91 33 02 	lds	r24, 0x0233
    234a:	88 23       	and	r24, r24
    234c:	e1 f3       	breq	.-8      	; 0x2346 <main+0x106>
				is_timer_finished = FALSE;
    234e:	10 92 33 02 	sts	0x0233, r1
				num_of_attempts = 0;
    2352:	18 8a       	std	Y+16, r1	; 0x10
				Timer_deInit(TIMER1);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	0e 94 83 16 	call	0x2d06	; 0x2d06 <Timer_deInit>
				/* system ok send */
			}

			LCD_clearScreen();
    235a:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"+ : OPEN DOOR");
    235e:	2d e7       	ldi	r18, 0x7D	; 125
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	a9 01       	movw	r20, r18
    2368:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"- : CHANGE PASS");
    236c:	2b e8       	ldi	r18, 0x8B	; 139
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	a9 01       	movw	r20, r18
    2376:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
			do
			{
				keypad_pressedKey_value = KEYPAD_getPressedKey();
    237a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <KEYPAD_getPressedKey>
    237e:	8a 8b       	std	Y+18, r24	; 0x12
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a8 ec       	ldi	r26, 0xC8	; 200
    2386:	b3 e4       	ldi	r27, 0x43	; 67
    2388:	8b 87       	std	Y+11, r24	; 0x0b
    238a:	9c 87       	std	Y+12, r25	; 0x0c
    238c:	ad 87       	std	Y+13, r26	; 0x0d
    238e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2390:	6b 85       	ldd	r22, Y+11	; 0x0b
    2392:	7c 85       	ldd	r23, Y+12	; 0x0c
    2394:	8d 85       	ldd	r24, Y+13	; 0x0d
    2396:	9e 85       	ldd	r25, Y+14	; 0x0e
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	4a ef       	ldi	r20, 0xFA	; 250
    239e:	54 e4       	ldi	r21, 0x44	; 68
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8f 83       	std	Y+7, r24	; 0x07
    23aa:	98 87       	std	Y+8, r25	; 0x08
    23ac:	a9 87       	std	Y+9, r26	; 0x09
    23ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b0:	6f 81       	ldd	r22, Y+7	; 0x07
    23b2:	78 85       	ldd	r23, Y+8	; 0x08
    23b4:	89 85       	ldd	r24, Y+9	; 0x09
    23b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	2c f4       	brge	.+10     	; 0x23d2 <main+0x192>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	3f c0       	rjmp	.+126    	; 0x2450 <main+0x210>
	else if (__tmp > 65535)
    23d2:	6f 81       	ldd	r22, Y+7	; 0x07
    23d4:	78 85       	ldd	r23, Y+8	; 0x08
    23d6:	89 85       	ldd	r24, Y+9	; 0x09
    23d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	3f ef       	ldi	r19, 0xFF	; 255
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	57 e4       	ldi	r21, 0x47	; 71
    23e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	4c f5       	brge	.+82     	; 0x243c <main+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e2       	ldi	r20, 0x20	; 32
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	8d 83       	std	Y+5, r24	; 0x05
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <main+0x1f2>
    2414:	88 ec       	ldi	r24, 0xC8	; 200
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9c 83       	std	Y+4, r25	; 0x04
    241a:	8b 83       	std	Y+3, r24	; 0x03
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	9c 81       	ldd	r25, Y+4	; 0x04
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <main+0x1e0>
    2424:	9c 83       	std	Y+4, r25	; 0x04
    2426:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	69 f7       	brne	.-38     	; 0x2414 <main+0x1d4>
    243a:	14 c0       	rjmp	.+40     	; 0x2464 <main+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243c:	6f 81       	ldd	r22, Y+7	; 0x07
    243e:	78 85       	ldd	r23, Y+8	; 0x08
    2440:	89 85       	ldd	r24, Y+9	; 0x09
    2442:	9a 85       	ldd	r25, Y+10	; 0x0a
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	9e 81       	ldd	r25, Y+6	; 0x06
    2454:	9a 83       	std	Y+2, r25	; 0x02
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <main+0x21c>
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(400); /* pressed key latency */
			}while((keypad_pressedKey_value != DOOR_OPEN_ID) && (keypad_pressedKey_value != CHANGE_PASSWORD_ID));
    2464:	8a 89       	ldd	r24, Y+18	; 0x12
    2466:	8b 32       	cpi	r24, 0x2B	; 43
    2468:	21 f0       	breq	.+8      	; 0x2472 <main+0x232>
    246a:	8a 89       	ldd	r24, Y+18	; 0x12
    246c:	8d 32       	cpi	r24, 0x2D	; 45
    246e:	09 f0       	breq	.+2      	; 0x2472 <main+0x232>
    2470:	84 cf       	rjmp	.-248    	; 0x237a <main+0x13a>

			do{
				LCD_clearScreen();
    2472:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0, "Plz enter old");
    2476:	2b e9       	ldi	r18, 0x9B	; 155
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	a9 01       	movw	r20, r18
    2480:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0, "pass :");
    2484:	29 ea       	ldi	r18, 0xA9	; 169
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	a9 01       	movw	r20, r18
    248e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
				read_send_password();
    2492:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <read_send_password>
				is_password_correct = UART_recieveByte();
    2496:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <UART_recieveByte>
    249a:	89 8b       	std	Y+17, r24	; 0x11
				num_of_attempts++;
    249c:	88 89       	ldd	r24, Y+16	; 0x10
    249e:	8f 5f       	subi	r24, 0xFF	; 255
    24a0:	88 8b       	std	Y+16, r24	; 0x10
				if(num_of_attempts >= MAX_NUM_OF_ATTEMPTS)
    24a2:	88 89       	ldd	r24, Y+16	; 0x10
    24a4:	83 30       	cpi	r24, 0x03	; 3
    24a6:	20 f0       	brcs	.+8      	; 0x24b0 <main+0x270>
				{
					UART_sendByte(SYSTEM_NOK_ID);
    24a8:	87 e5       	ldi	r24, 0x57	; 87
    24aa:	0e 94 dd 17 	call	0x2fba	; 0x2fba <UART_sendByte>
    24ae:	03 c0       	rjmp	.+6      	; 0x24b6 <main+0x276>
				}
				else{
					UART_sendByte(SYSTEM_OK_ID);
    24b0:	8b e4       	ldi	r24, 0x4B	; 75
    24b2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <UART_sendByte>
				}
			}while(num_of_attempts < MAX_NUM_OF_ATTEMPTS && is_password_correct != CORRECT_PASSCODE_ID);
    24b6:	88 89       	ldd	r24, Y+16	; 0x10
    24b8:	83 30       	cpi	r24, 0x03	; 3
    24ba:	08 f0       	brcs	.+2      	; 0x24be <main+0x27e>
    24bc:	24 cf       	rjmp	.-440    	; 0x2306 <main+0xc6>
    24be:	89 89       	ldd	r24, Y+17	; 0x11
    24c0:	84 35       	cpi	r24, 0x54	; 84
    24c2:	b9 f6       	brne	.-82     	; 0x2472 <main+0x232>
    24c4:	20 cf       	rjmp	.-448    	; 0x2306 <main+0xc6>
		}
		else if(is_password_correct == CORRECT_PASSCODE_ID)
    24c6:	89 89       	ldd	r24, Y+17	; 0x11
    24c8:	84 35       	cpi	r24, 0x54	; 84
    24ca:	09 f0       	breq	.+2      	; 0x24ce <main+0x28e>
    24cc:	1c cf       	rjmp	.-456    	; 0x2306 <main+0xc6>
		{
			is_password_correct = FALSE_PASSCODE_ID;
    24ce:	86 e4       	ldi	r24, 0x46	; 70
    24d0:	89 8b       	std	Y+17, r24	; 0x11
			num_of_attempts = 0;
    24d2:	18 8a       	std	Y+16, r1	; 0x10
			UART_sendByte(keypad_pressedKey_value);
    24d4:	8a 89       	ldd	r24, Y+18	; 0x12
    24d6:	0e 94 dd 17 	call	0x2fba	; 0x2fba <UART_sendByte>
			if(keypad_pressedKey_value == DOOR_OPEN_ID)
    24da:	8a 89       	ldd	r24, Y+18	; 0x12
    24dc:	8b 32       	cpi	r24, 0x2B	; 43
    24de:	09 f0       	breq	.+2      	; 0x24e2 <main+0x2a2>
    24e0:	50 c0       	rjmp	.+160    	; 0x2582 <main+0x342>
			{
				LCD_clearScreen();
    24e2:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_clearScreen>
				Timer_init(&timer_config);
    24e6:	ce 01       	movw	r24, r28
    24e8:	48 96       	adiw	r24, 0x18	; 24
    24ea:	0e 94 13 15 	call	0x2a26	; 0x2a26 <Timer_init>
				Timer_setCallBack(timer_callBack_motorOP, TIMER1);
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	92 e1       	ldi	r25, 0x12	; 18
    24f2:	61 e0       	ldi	r22, 0x01	; 1
    24f4:	0e 94 db 16 	call	0x2db6	; 0x2db6 <Timer_setCallBack>
				LCD_displayStringRowColumn(0,1,"Door Unlocking");
    24f8:	20 eb       	ldi	r18, 0xB0	; 176
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	a9 01       	movw	r20, r18
    2502:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,4,"Please wait");
    2506:	2f eb       	ldi	r18, 0xBF	; 191
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	64 e0       	ldi	r22, 0x04	; 4
    250e:	a9 01       	movw	r20, r18
    2510:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
				while(is_door_open == FALSE){}
    2514:	80 91 35 02 	lds	r24, 0x0235
    2518:	88 23       	and	r24, r24
    251a:	e1 f3       	breq	.-8      	; 0x2514 <main+0x2d4>
				Timer_deInit(TIMER1); /* deactivating until further updates */
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	0e 94 83 16 	call	0x2d06	; 0x2d06 <Timer_deInit>

				LCD_clearScreen();
    2522:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"wait for people");
    2526:	2b ec       	ldi	r18, 0xCB	; 203
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	a9 01       	movw	r20, r18
    2530:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,3,"To Enter");
    2534:	2b ed       	ldi	r18, 0xDB	; 219
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	63 e0       	ldi	r22, 0x03	; 3
    253c:	a9 01       	movw	r20, r18
    253e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
				do
				{
					current_state = UART_recieveByte();
    2542:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <UART_recieveByte>
    2546:	8f 87       	std	Y+15, r24	; 0x0f
				}while(current_state == PEOPLE_PASS_THROUGH_ID);
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	83 35       	cpi	r24, 0x53	; 83
    254c:	d1 f3       	breq	.-12     	; 0x2542 <main+0x302>

				Timer_init(&timer_config);
    254e:	ce 01       	movw	r24, r28
    2550:	48 96       	adiw	r24, 0x18	; 24
    2552:	0e 94 13 15 	call	0x2a26	; 0x2a26 <Timer_init>
				Timer_setCallBack(timer_callBack_motorOP, TIMER1);
    2556:	88 ec       	ldi	r24, 0xC8	; 200
    2558:	92 e1       	ldi	r25, 0x12	; 18
    255a:	61 e0       	ldi	r22, 0x01	; 1
    255c:	0e 94 db 16 	call	0x2db6	; 0x2db6 <Timer_setCallBack>
				LCD_clearScreen();
    2560:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_clearScreen>
				LCD_displayStringRowColumn(0,2,"Door Locking");
    2564:	24 ee       	ldi	r18, 0xE4	; 228
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	62 e0       	ldi	r22, 0x02	; 2
    256c:	a9 01       	movw	r20, r18
    256e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
				while(is_door_open == TRUE){}
    2572:	80 91 35 02 	lds	r24, 0x0235
    2576:	81 30       	cpi	r24, 0x01	; 1
    2578:	e1 f3       	breq	.-8      	; 0x2572 <main+0x332>
				Timer_deInit(TIMER1); /* deactivating until further updates */
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	0e 94 83 16 	call	0x2d06	; 0x2d06 <Timer_deInit>
    2580:	c2 ce       	rjmp	.-636    	; 0x2306 <main+0xc6>
			}
			else if(keypad_pressedKey_value == CHANGE_PASSWORD_ID)
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	8d 32       	cpi	r24, 0x2D	; 45
    2586:	09 f0       	breq	.+2      	; 0x258a <main+0x34a>
    2588:	be ce       	rjmp	.-644    	; 0x2306 <main+0xc6>
			{
				new_password_task();
    258a:	0e 94 b6 13 	call	0x276c	; 0x276c <new_password_task>
    258e:	bb ce       	rjmp	.-650    	; 0x2306 <main+0xc6>

00002590 <timer_callBack_motorOP>:

	return 0;
}

void timer_callBack_motorOP(void)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
	motor_ticks++;
    2598:	80 91 34 02 	lds	r24, 0x0234
    259c:	8f 5f       	subi	r24, 0xFF	; 255
    259e:	80 93 34 02 	sts	0x0234, r24
	if(motor_ticks == NUM_OF_CTC_PER_15_SEC)
    25a2:	80 91 34 02 	lds	r24, 0x0234
    25a6:	8f 30       	cpi	r24, 0x0F	; 15
    25a8:	61 f4       	brne	.+24     	; 0x25c2 <timer_callBack_motorOP+0x32>
	{
		/*
		 * if door is opened close it and viceversa
		 */
		if(is_door_open == TRUE)
    25aa:	80 91 35 02 	lds	r24, 0x0235
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	19 f4       	brne	.+6      	; 0x25b8 <timer_callBack_motorOP+0x28>
		{
			is_door_open = FALSE;
    25b2:	10 92 35 02 	sts	0x0235, r1
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <timer_callBack_motorOP+0x2e>
		}
		else
		{
			is_door_open = TRUE;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 35 02 	sts	0x0235, r24
		}
		motor_ticks = 0;
    25be:	10 92 34 02 	sts	0x0234, r1
	}
}
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <timer_callBack_systemNOK_OP>:

void timer_callBack_systemNOK_OP(void)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
	system_ticks++;
    25d0:	80 91 32 02 	lds	r24, 0x0232
    25d4:	8f 5f       	subi	r24, 0xFF	; 255
    25d6:	80 93 32 02 	sts	0x0232, r24
	if(system_ticks == NUM_OF_CTC_PER_MIN)
    25da:	80 91 32 02 	lds	r24, 0x0232
    25de:	8c 33       	cpi	r24, 0x3C	; 60
    25e0:	29 f4       	brne	.+10     	; 0x25ec <timer_callBack_systemNOK_OP+0x24>
	{
		system_ticks = 0;
    25e2:	10 92 32 02 	sts	0x0232, r1
		is_timer_finished = TRUE;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	80 93 33 02 	sts	0x0233, r24
	}
}
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <read_send_password>:



void read_send_password(void)
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	67 97       	sbiw	r28, 0x17	; 23
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
	uint8 password[7], keypad_pressedKey_value, password_index = 0;
    2606:	1f 86       	std	Y+15, r1	; 0x0f
	for(;;)
	{
		keypad_pressedKey_value = KEYPAD_getPressedKey();
    2608:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <KEYPAD_getPressedKey>
    260c:	88 8b       	std	Y+16, r24	; 0x10
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a8 ec       	ldi	r26, 0xC8	; 200
    2614:	b3 e4       	ldi	r27, 0x43	; 67
    2616:	8b 87       	std	Y+11, r24	; 0x0b
    2618:	9c 87       	std	Y+12, r25	; 0x0c
    261a:	ad 87       	std	Y+13, r26	; 0x0d
    261c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2620:	7c 85       	ldd	r23, Y+12	; 0x0c
    2622:	8d 85       	ldd	r24, Y+13	; 0x0d
    2624:	9e 85       	ldd	r25, Y+14	; 0x0e
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4a ef       	ldi	r20, 0xFA	; 250
    262c:	54 e4       	ldi	r21, 0x44	; 68
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	8f 83       	std	Y+7, r24	; 0x07
    2638:	98 87       	std	Y+8, r25	; 0x08
    263a:	a9 87       	std	Y+9, r26	; 0x09
    263c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e8       	ldi	r20, 0x80	; 128
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2652:	88 23       	and	r24, r24
    2654:	2c f4       	brge	.+10     	; 0x2660 <read_send_password+0x6e>
		__ticks = 1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
    265e:	3f c0       	rjmp	.+126    	; 0x26de <read_send_password+0xec>
	else if (__tmp > 65535)
    2660:	6f 81       	ldd	r22, Y+7	; 0x07
    2662:	78 85       	ldd	r23, Y+8	; 0x08
    2664:	89 85       	ldd	r24, Y+9	; 0x09
    2666:	9a 85       	ldd	r25, Y+10	; 0x0a
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	3f ef       	ldi	r19, 0xFF	; 255
    266c:	4f e7       	ldi	r20, 0x7F	; 127
    266e:	57 e4       	ldi	r21, 0x47	; 71
    2670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2674:	18 16       	cp	r1, r24
    2676:	4c f5       	brge	.+82     	; 0x26ca <read_send_password+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2678:	6b 85       	ldd	r22, Y+11	; 0x0b
    267a:	7c 85       	ldd	r23, Y+12	; 0x0c
    267c:	8d 85       	ldd	r24, Y+13	; 0x0d
    267e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e2       	ldi	r20, 0x20	; 32
    2686:	51 e4       	ldi	r21, 0x41	; 65
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	0f c0       	rjmp	.+30     	; 0x26c0 <read_send_password+0xce>
    26a2:	88 ec       	ldi	r24, 0xC8	; 200
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	8b 83       	std	Y+3, r24	; 0x03
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <read_send_password+0xbc>
    26b2:	9c 83       	std	Y+4, r25	; 0x04
    26b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <read_send_password+0xb0>
    26c8:	14 c0       	rjmp	.+40     	; 0x26f2 <read_send_password+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ca:	6f 81       	ldd	r22, Y+7	; 0x07
    26cc:	78 85       	ldd	r23, Y+8	; 0x08
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9e 83       	std	Y+6, r25	; 0x06
    26dc:	8d 83       	std	Y+5, r24	; 0x05
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <read_send_password+0xf8>
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400); /* delay for the press duration */
		if(keypad_pressedKey_value == '=')
    26f2:	88 89       	ldd	r24, Y+16	; 0x10
    26f4:	8d 33       	cpi	r24, 0x3D	; 61
    26f6:	b9 f0       	breq	.+46     	; 0x2726 <read_send_password+0x134>
		{
			break;
		}

		if(password_index < PASSWORD_MAX_SIZE)
    26f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26fa:	85 30       	cpi	r24, 0x05	; 5
    26fc:	08 f0       	brcs	.+2      	; 0x2700 <read_send_password+0x10e>
    26fe:	84 cf       	rjmp	.-248    	; 0x2608 <read_send_password+0x16>
		{
			password[password_index++] = keypad_pressedKey_value+ 48;
    2700:	8f 85       	ldd	r24, Y+15	; 0x0f
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	88 89       	ldd	r24, Y+16	; 0x10
    2708:	48 2f       	mov	r20, r24
    270a:	40 5d       	subi	r20, 0xD0	; 208
    270c:	ce 01       	movw	r24, r28
    270e:	41 96       	adiw	r24, 0x11	; 17
    2710:	fc 01       	movw	r30, r24
    2712:	e2 0f       	add	r30, r18
    2714:	f3 1f       	adc	r31, r19
    2716:	40 83       	st	Z, r20
    2718:	8f 85       	ldd	r24, Y+15	; 0x0f
    271a:	8f 5f       	subi	r24, 0xFF	; 255
    271c:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_displayCharacter('*');
    271e:	8a e2       	ldi	r24, 0x2A	; 42
    2720:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_displayCharacter>
    2724:	71 cf       	rjmp	.-286    	; 0x2608 <read_send_password+0x16>
		}
	}
	password[password_index] = UART_RX_STRING_BREAK;
    2726:	8f 85       	ldd	r24, Y+15	; 0x0f
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	ce 01       	movw	r24, r28
    272e:	41 96       	adiw	r24, 0x11	; 17
    2730:	fc 01       	movw	r30, r24
    2732:	e2 0f       	add	r30, r18
    2734:	f3 1f       	adc	r31, r19
    2736:	83 e2       	ldi	r24, 0x23	; 35
    2738:	80 83       	st	Z, r24
	password[password_index+1] = '\0';
    273a:	8f 85       	ldd	r24, Y+15	; 0x0f
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9c 01       	movw	r18, r24
    2742:	2f 5f       	subi	r18, 0xFF	; 255
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	ce 01       	movw	r24, r28
    2748:	41 96       	adiw	r24, 0x11	; 17
    274a:	fc 01       	movw	r30, r24
    274c:	e2 0f       	add	r30, r18
    274e:	f3 1f       	adc	r31, r19
    2750:	10 82       	st	Z, r1

	UART_sendString(password);
    2752:	ce 01       	movw	r24, r28
    2754:	41 96       	adiw	r24, 0x11	; 17
    2756:	0e 94 03 18 	call	0x3006	; 0x3006 <UART_sendString>
}
    275a:	67 96       	adiw	r28, 0x17	; 23
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <new_password_task>:
void new_password_task(void)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
	do{
		LCD_clearScreen();
    2774:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_clearScreen>
		LCD_displayString("Plz enter pass:");
    2778:	81 ef       	ldi	r24, 0xF1	; 241
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_displayString>
		LCD_moveCursor(1,0);
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	0e 94 2c 10 	call	0x2058	; 0x2058 <LCD_moveCursor>

		read_send_password();
    2788:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <read_send_password>

		LCD_clearScreen();
    278c:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_clearScreen>

		LCD_displayStringRowColumn(0,0, "Plz re-enter the");
    2790:	21 e0       	ldi	r18, 0x01	; 1
    2792:	31 e0       	ldi	r19, 0x01	; 1
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0, "same pass: ");
    279e:	22 e1       	ldi	r18, 0x12	; 18
    27a0:	31 e0       	ldi	r19, 0x01	; 1
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	60 e0       	ldi	r22, 0x00	; 0
    27a6:	a9 01       	movw	r20, r18
    27a8:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_displayStringRowColumn>

		read_send_password();
    27ac:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <read_send_password>

		LCD_clearScreen();
    27b0:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_clearScreen>
	}while(UART_recieveByte() != CORRECT_PASSCODE_ID);
    27b4:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <UART_recieveByte>
    27b8:	84 35       	cpi	r24, 0x54	; 84
    27ba:	e1 f6       	brne	.-72     	; 0x2774 <new_password_task+0x8>
}
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <__vector_11>:
 ******************************************************/
/*
 * Timer 0 ISRs
 */
ISR(TIMER0_OVF_vect)
{
    27c2:	1f 92       	push	r1
    27c4:	0f 92       	push	r0
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	0f 92       	push	r0
    27ca:	11 24       	eor	r1, r1
    27cc:	2f 93       	push	r18
    27ce:	3f 93       	push	r19
    27d0:	4f 93       	push	r20
    27d2:	5f 93       	push	r21
    27d4:	6f 93       	push	r22
    27d6:	7f 93       	push	r23
    27d8:	8f 93       	push	r24
    27da:	9f 93       	push	r25
    27dc:	af 93       	push	r26
    27de:	bf 93       	push	r27
    27e0:	ef 93       	push	r30
    27e2:	ff 93       	push	r31
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0_ptr != NULL_PTR)
    27ec:	80 91 37 02 	lds	r24, 0x0237
    27f0:	90 91 38 02 	lds	r25, 0x0238
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	29 f0       	breq	.+10     	; 0x2802 <__vector_11+0x40>
	{
		(*g_timer0_ptr)();
    27f8:	e0 91 37 02 	lds	r30, 0x0237
    27fc:	f0 91 38 02 	lds	r31, 0x0238
    2800:	09 95       	icall
	}
}
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	ff 91       	pop	r31
    2808:	ef 91       	pop	r30
    280a:	bf 91       	pop	r27
    280c:	af 91       	pop	r26
    280e:	9f 91       	pop	r25
    2810:	8f 91       	pop	r24
    2812:	7f 91       	pop	r23
    2814:	6f 91       	pop	r22
    2816:	5f 91       	pop	r21
    2818:	4f 91       	pop	r20
    281a:	3f 91       	pop	r19
    281c:	2f 91       	pop	r18
    281e:	0f 90       	pop	r0
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	0f 90       	pop	r0
    2824:	1f 90       	pop	r1
    2826:	18 95       	reti

00002828 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2828:	1f 92       	push	r1
    282a:	0f 92       	push	r0
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	0f 92       	push	r0
    2830:	11 24       	eor	r1, r1
    2832:	2f 93       	push	r18
    2834:	3f 93       	push	r19
    2836:	4f 93       	push	r20
    2838:	5f 93       	push	r21
    283a:	6f 93       	push	r22
    283c:	7f 93       	push	r23
    283e:	8f 93       	push	r24
    2840:	9f 93       	push	r25
    2842:	af 93       	push	r26
    2844:	bf 93       	push	r27
    2846:	ef 93       	push	r30
    2848:	ff 93       	push	r31
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0_ptr != NULL_PTR)
    2852:	80 91 37 02 	lds	r24, 0x0237
    2856:	90 91 38 02 	lds	r25, 0x0238
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	29 f0       	breq	.+10     	; 0x2868 <__vector_10+0x40>
	{
		(*g_timer0_ptr)();
    285e:	e0 91 37 02 	lds	r30, 0x0237
    2862:	f0 91 38 02 	lds	r31, 0x0238
    2866:	09 95       	icall
	}
}
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	ff 91       	pop	r31
    286e:	ef 91       	pop	r30
    2870:	bf 91       	pop	r27
    2872:	af 91       	pop	r26
    2874:	9f 91       	pop	r25
    2876:	8f 91       	pop	r24
    2878:	7f 91       	pop	r23
    287a:	6f 91       	pop	r22
    287c:	5f 91       	pop	r21
    287e:	4f 91       	pop	r20
    2880:	3f 91       	pop	r19
    2882:	2f 91       	pop	r18
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	0f 90       	pop	r0
    288a:	1f 90       	pop	r1
    288c:	18 95       	reti

0000288e <__vector_9>:

/*
 * Timer 1 ISRs
 */
ISR(TIMER1_OVF_vect)
{
    288e:	1f 92       	push	r1
    2890:	0f 92       	push	r0
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	0f 92       	push	r0
    2896:	11 24       	eor	r1, r1
    2898:	2f 93       	push	r18
    289a:	3f 93       	push	r19
    289c:	4f 93       	push	r20
    289e:	5f 93       	push	r21
    28a0:	6f 93       	push	r22
    28a2:	7f 93       	push	r23
    28a4:	8f 93       	push	r24
    28a6:	9f 93       	push	r25
    28a8:	af 93       	push	r26
    28aa:	bf 93       	push	r27
    28ac:	ef 93       	push	r30
    28ae:	ff 93       	push	r31
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_ptr != NULL_PTR)
    28b8:	80 91 39 02 	lds	r24, 0x0239
    28bc:	90 91 3a 02 	lds	r25, 0x023A
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	29 f0       	breq	.+10     	; 0x28ce <__vector_9+0x40>
	{
		(*g_timer1_ptr)();
    28c4:	e0 91 39 02 	lds	r30, 0x0239
    28c8:	f0 91 3a 02 	lds	r31, 0x023A
    28cc:	09 95       	icall
	}
}
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	ff 91       	pop	r31
    28d4:	ef 91       	pop	r30
    28d6:	bf 91       	pop	r27
    28d8:	af 91       	pop	r26
    28da:	9f 91       	pop	r25
    28dc:	8f 91       	pop	r24
    28de:	7f 91       	pop	r23
    28e0:	6f 91       	pop	r22
    28e2:	5f 91       	pop	r21
    28e4:	4f 91       	pop	r20
    28e6:	3f 91       	pop	r19
    28e8:	2f 91       	pop	r18
    28ea:	0f 90       	pop	r0
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	0f 90       	pop	r0
    28f0:	1f 90       	pop	r1
    28f2:	18 95       	reti

000028f4 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    28f4:	1f 92       	push	r1
    28f6:	0f 92       	push	r0
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	0f 92       	push	r0
    28fc:	11 24       	eor	r1, r1
    28fe:	2f 93       	push	r18
    2900:	3f 93       	push	r19
    2902:	4f 93       	push	r20
    2904:	5f 93       	push	r21
    2906:	6f 93       	push	r22
    2908:	7f 93       	push	r23
    290a:	8f 93       	push	r24
    290c:	9f 93       	push	r25
    290e:	af 93       	push	r26
    2910:	bf 93       	push	r27
    2912:	ef 93       	push	r30
    2914:	ff 93       	push	r31
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_ptr != NULL_PTR)
    291e:	80 91 39 02 	lds	r24, 0x0239
    2922:	90 91 3a 02 	lds	r25, 0x023A
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	29 f0       	breq	.+10     	; 0x2934 <__vector_7+0x40>
	{
		(*g_timer1_ptr)();
    292a:	e0 91 39 02 	lds	r30, 0x0239
    292e:	f0 91 3a 02 	lds	r31, 0x023A
    2932:	09 95       	icall
	}
}
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	ff 91       	pop	r31
    293a:	ef 91       	pop	r30
    293c:	bf 91       	pop	r27
    293e:	af 91       	pop	r26
    2940:	9f 91       	pop	r25
    2942:	8f 91       	pop	r24
    2944:	7f 91       	pop	r23
    2946:	6f 91       	pop	r22
    2948:	5f 91       	pop	r21
    294a:	4f 91       	pop	r20
    294c:	3f 91       	pop	r19
    294e:	2f 91       	pop	r18
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0f 90       	pop	r0
    2956:	1f 90       	pop	r1
    2958:	18 95       	reti

0000295a <__vector_5>:

/*
 * Timer 2 ISRs
 */
ISR(TIMER2_OVF_vect)
{
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	2f 93       	push	r18
    2966:	3f 93       	push	r19
    2968:	4f 93       	push	r20
    296a:	5f 93       	push	r21
    296c:	6f 93       	push	r22
    296e:	7f 93       	push	r23
    2970:	8f 93       	push	r24
    2972:	9f 93       	push	r25
    2974:	af 93       	push	r26
    2976:	bf 93       	push	r27
    2978:	ef 93       	push	r30
    297a:	ff 93       	push	r31
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2_ptr != NULL_PTR)
    2984:	80 91 3b 02 	lds	r24, 0x023B
    2988:	90 91 3c 02 	lds	r25, 0x023C
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	29 f0       	breq	.+10     	; 0x299a <__vector_5+0x40>
	{
		(*g_timer2_ptr)();
    2990:	e0 91 3b 02 	lds	r30, 0x023B
    2994:	f0 91 3c 02 	lds	r31, 0x023C
    2998:	09 95       	icall
	}
}
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	ff 91       	pop	r31
    29a0:	ef 91       	pop	r30
    29a2:	bf 91       	pop	r27
    29a4:	af 91       	pop	r26
    29a6:	9f 91       	pop	r25
    29a8:	8f 91       	pop	r24
    29aa:	7f 91       	pop	r23
    29ac:	6f 91       	pop	r22
    29ae:	5f 91       	pop	r21
    29b0:	4f 91       	pop	r20
    29b2:	3f 91       	pop	r19
    29b4:	2f 91       	pop	r18
    29b6:	0f 90       	pop	r0
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	0f 90       	pop	r0
    29bc:	1f 90       	pop	r1
    29be:	18 95       	reti

000029c0 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    29c0:	1f 92       	push	r1
    29c2:	0f 92       	push	r0
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	0f 92       	push	r0
    29c8:	11 24       	eor	r1, r1
    29ca:	2f 93       	push	r18
    29cc:	3f 93       	push	r19
    29ce:	4f 93       	push	r20
    29d0:	5f 93       	push	r21
    29d2:	6f 93       	push	r22
    29d4:	7f 93       	push	r23
    29d6:	8f 93       	push	r24
    29d8:	9f 93       	push	r25
    29da:	af 93       	push	r26
    29dc:	bf 93       	push	r27
    29de:	ef 93       	push	r30
    29e0:	ff 93       	push	r31
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2_ptr != NULL_PTR)
    29ea:	80 91 3b 02 	lds	r24, 0x023B
    29ee:	90 91 3c 02 	lds	r25, 0x023C
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	29 f0       	breq	.+10     	; 0x2a00 <__vector_4+0x40>
	{
		(*g_timer2_ptr)();
    29f6:	e0 91 3b 02 	lds	r30, 0x023B
    29fa:	f0 91 3c 02 	lds	r31, 0x023C
    29fe:	09 95       	icall
	}
}
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	ff 91       	pop	r31
    2a06:	ef 91       	pop	r30
    2a08:	bf 91       	pop	r27
    2a0a:	af 91       	pop	r26
    2a0c:	9f 91       	pop	r25
    2a0e:	8f 91       	pop	r24
    2a10:	7f 91       	pop	r23
    2a12:	6f 91       	pop	r22
    2a14:	5f 91       	pop	r21
    2a16:	4f 91       	pop	r20
    2a18:	3f 91       	pop	r19
    2a1a:	2f 91       	pop	r18
    2a1c:	0f 90       	pop	r0
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	0f 90       	pop	r0
    2a22:	1f 90       	pop	r1
    2a24:	18 95       	reti

00002a26 <Timer_init>:
/******************************************************
 * 				Function Definitions
 ******************************************************/

void Timer_init(const Timer_ConfigType* Config_Ptr)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <Timer_init+0x6>
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <Timer_init+0x8>
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <Timer_init+0xa>
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	9a 83       	std	Y+2, r25	; 0x02
    2a36:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    2a38:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3c:	84 81       	ldd	r24, Z+4	; 0x04
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	3e 83       	std	Y+6, r19	; 0x06
    2a44:	2d 83       	std	Y+5, r18	; 0x05
    2a46:	8d 81       	ldd	r24, Y+5	; 0x05
    2a48:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4a:	81 30       	cpi	r24, 0x01	; 1
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <Timer_init+0x2c>
    2a50:	5a c0       	rjmp	.+180    	; 0x2b06 <Timer_init+0xe0>
    2a52:	2d 81       	ldd	r18, Y+5	; 0x05
    2a54:	3e 81       	ldd	r19, Y+6	; 0x06
    2a56:	22 30       	cpi	r18, 0x02	; 2
    2a58:	31 05       	cpc	r19, r1
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <Timer_init+0x38>
    2a5c:	a4 c0       	rjmp	.+328    	; 0x2ba6 <Timer_init+0x180>
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	9e 81       	ldd	r25, Y+6	; 0x06
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <Timer_init+0x42>
    2a66:	46 c1       	rjmp	.+652    	; 0x2cf4 <Timer_init+0x2ce>
	{
	case TIMER0:
		SET_BIT(TCCR0, FOC0);
    2a68:	a3 e5       	ldi	r26, 0x53	; 83
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	e3 e5       	ldi	r30, 0x53	; 83
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	80 68       	ori	r24, 0x80	; 128
    2a74:	8c 93       	st	X, r24
		TCNT0 = Config_Ptr->timer_InitialValue;
    2a76:	a2 e5       	ldi	r26, 0x52	; 82
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode == TIMER_COMPARE_MODE)
    2a84:	e9 81       	ldd	r30, Y+1	; 0x01
    2a86:	fa 81       	ldd	r31, Y+2	; 0x02
    2a88:	86 81       	ldd	r24, Z+6	; 0x06
    2a8a:	82 30       	cpi	r24, 0x02	; 2
    2a8c:	e9 f4       	brne	.+58     	; 0x2ac8 <Timer_init+0xa2>
		{
			SET_BIT(TCCR0, WGM01);
    2a8e:	a3 e5       	ldi	r26, 0x53	; 83
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	e3 e5       	ldi	r30, 0x53	; 83
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	88 60       	ori	r24, 0x08	; 8
    2a9a:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    2a9c:	ac e5       	ldi	r26, 0x5C	; 92
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE0);
    2aaa:	a9 e5       	ldi	r26, 0x59	; 89
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e9 e5       	ldi	r30, 0x59	; 89
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	82 60       	ori	r24, 0x02	; 2
    2ab6:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, TOIE0);
    2ab8:	a9 e5       	ldi	r26, 0x59	; 89
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e9 e5       	ldi	r30, 0x59	; 89
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	8e 7f       	andi	r24, 0xFE	; 254
    2ac4:	8c 93       	st	X, r24
    2ac6:	0e c0       	rjmp	.+28     	; 0x2ae4 <Timer_init+0xbe>
		}
		else
		{
			SET_BIT(TIMSK, TOIE0);
    2ac8:	a9 e5       	ldi	r26, 0x59	; 89
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e9 e5       	ldi	r30, 0x59	; 89
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	81 60       	ori	r24, 0x01	; 1
    2ad4:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, OCIE0);
    2ad6:	a9 e5       	ldi	r26, 0x59	; 89
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	e9 e5       	ldi	r30, 0x59	; 89
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	8d 7f       	andi	r24, 0xFD	; 253
    2ae2:	8c 93       	st	X, r24
		}

		if((Config_Ptr->timer_clock) == F_CLK_PRESCALE_32)
    2ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae8:	85 81       	ldd	r24, Z+5	; 0x05
    2aea:	86 30       	cpi	r24, 0x06	; 6
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <Timer_init+0xca>
    2aee:	02 c1       	rjmp	.+516    	; 0x2cf4 <Timer_init+0x2ce>
			return;
		}
		/*
		 * setting up the interrupt
		 */
		TCCR0 |= (Config_Ptr->timer_clock);
    2af0:	a3 e5       	ldi	r26, 0x53	; 83
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e3 e5       	ldi	r30, 0x53	; 83
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	90 81       	ld	r25, Z
    2afa:	e9 81       	ldd	r30, Y+1	; 0x01
    2afc:	fa 81       	ldd	r31, Y+2	; 0x02
    2afe:	85 81       	ldd	r24, Z+5	; 0x05
    2b00:	89 2b       	or	r24, r25
    2b02:	8c 93       	st	X, r24
    2b04:	f7 c0       	rjmp	.+494    	; 0x2cf4 <Timer_init+0x2ce>
		break;
	case TIMER1:
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2b06:	ef e4       	ldi	r30, 0x4F	; 79
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	8c e0       	ldi	r24, 0x0C	; 12
    2b0c:	80 83       	st	Z, r24
		TCNT1 = Config_Ptr->timer_InitialValue;
    2b0e:	ac e4       	ldi	r26, 0x4C	; 76
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e9 81       	ldd	r30, Y+1	; 0x01
    2b14:	fa 81       	ldd	r31, Y+2	; 0x02
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	11 96       	adiw	r26, 0x01	; 1
    2b1c:	9c 93       	st	X, r25
    2b1e:	8e 93       	st	-X, r24
		if(Config_Ptr->timer_mode == TIMER_COMPARE_MODE)
    2b20:	e9 81       	ldd	r30, Y+1	; 0x01
    2b22:	fa 81       	ldd	r31, Y+2	; 0x02
    2b24:	86 81       	ldd	r24, Z+6	; 0x06
    2b26:	82 30       	cpi	r24, 0x02	; 2
    2b28:	f9 f4       	brne	.+62     	; 0x2b68 <Timer_init+0x142>
		{
			TCCR1B |= (1<<WGM12);
    2b2a:	ae e4       	ldi	r26, 0x4E	; 78
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	ee e4       	ldi	r30, 0x4E	; 78
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	88 60       	ori	r24, 0x08	; 8
    2b36:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    2b38:	aa e4       	ldi	r26, 0x4A	; 74
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	11 96       	adiw	r26, 0x01	; 1
    2b46:	9c 93       	st	X, r25
    2b48:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A);
    2b4a:	a9 e5       	ldi	r26, 0x59	; 89
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	e9 e5       	ldi	r30, 0x59	; 89
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	80 61       	ori	r24, 0x10	; 16
    2b56:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, TOIE1);
    2b58:	a9 e5       	ldi	r26, 0x59	; 89
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e9 e5       	ldi	r30, 0x59	; 89
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	8b 7f       	andi	r24, 0xFB	; 251
    2b64:	8c 93       	st	X, r24
    2b66:	0e c0       	rjmp	.+28     	; 0x2b84 <Timer_init+0x15e>
		}
		else
		{
			SET_BIT(TIMSK, TOIE1);
    2b68:	a9 e5       	ldi	r26, 0x59	; 89
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e9 e5       	ldi	r30, 0x59	; 89
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	84 60       	ori	r24, 0x04	; 4
    2b74:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, OCIE1A);
    2b76:	a9 e5       	ldi	r26, 0x59	; 89
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e9 e5       	ldi	r30, 0x59	; 89
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	8f 7e       	andi	r24, 0xEF	; 239
    2b82:	8c 93       	st	X, r24
		}

		if((Config_Ptr->timer_clock) == F_CLK_PRESCALE_32)
    2b84:	e9 81       	ldd	r30, Y+1	; 0x01
    2b86:	fa 81       	ldd	r31, Y+2	; 0x02
    2b88:	85 81       	ldd	r24, Z+5	; 0x05
    2b8a:	86 30       	cpi	r24, 0x06	; 6
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <Timer_init+0x16a>
    2b8e:	b2 c0       	rjmp	.+356    	; 0x2cf4 <Timer_init+0x2ce>
			return;
		}
		/*
		 * setting up the interrupt
		 */
		TCCR1B |= Config_Ptr->timer_clock;
    2b90:	ae e4       	ldi	r26, 0x4E	; 78
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	ee e4       	ldi	r30, 0x4E	; 78
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	90 81       	ld	r25, Z
    2b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9e:	85 81       	ldd	r24, Z+5	; 0x05
    2ba0:	89 2b       	or	r24, r25
    2ba2:	8c 93       	st	X, r24
    2ba4:	a7 c0       	rjmp	.+334    	; 0x2cf4 <Timer_init+0x2ce>
		break;
	case TIMER2:
		SET_BIT(TCCR2, FOC2);
    2ba6:	a5 e4       	ldi	r26, 0x45	; 69
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e5 e4       	ldi	r30, 0x45	; 69
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	80 68       	ori	r24, 0x80	; 128
    2bb2:	8c 93       	st	X, r24
		TCNT2 = Config_Ptr->timer_InitialValue;
    2bb4:	a4 e4       	ldi	r26, 0x44	; 68
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bba:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbc:	80 81       	ld	r24, Z
    2bbe:	91 81       	ldd	r25, Z+1	; 0x01
    2bc0:	8c 93       	st	X, r24
		/*
		 * setting up the interrupt
		 */
		if(Config_Ptr->timer_mode == TIMER_COMPARE_MODE)
    2bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc6:	86 81       	ldd	r24, Z+6	; 0x06
    2bc8:	82 30       	cpi	r24, 0x02	; 2
    2bca:	e9 f4       	brne	.+58     	; 0x2c06 <Timer_init+0x1e0>
		{
			SET_BIT(TCCR2, WGM21);
    2bcc:	a5 e4       	ldi	r26, 0x45	; 69
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	e5 e4       	ldi	r30, 0x45	; 69
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	88 60       	ori	r24, 0x08	; 8
    2bd8:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    2bda:	a3 e4       	ldi	r26, 0x43	; 67
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e9 81       	ldd	r30, Y+1	; 0x01
    2be0:	fa 81       	ldd	r31, Y+2	; 0x02
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2);
    2be8:	a9 e5       	ldi	r26, 0x59	; 89
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e9 e5       	ldi	r30, 0x59	; 89
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	80 68       	ori	r24, 0x80	; 128
    2bf4:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, TOIE2);
    2bf6:	a9 e5       	ldi	r26, 0x59	; 89
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e9 e5       	ldi	r30, 0x59	; 89
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	8f 7b       	andi	r24, 0xBF	; 191
    2c02:	8c 93       	st	X, r24
    2c04:	0e c0       	rjmp	.+28     	; 0x2c22 <Timer_init+0x1fc>
		}
		else
		{
			SET_BIT(TIMSK, TOIE2);
    2c06:	a9 e5       	ldi	r26, 0x59	; 89
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e9 e5       	ldi	r30, 0x59	; 89
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	80 64       	ori	r24, 0x40	; 64
    2c12:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK, OCIE2);
    2c14:	a9 e5       	ldi	r26, 0x59	; 89
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e9 e5       	ldi	r30, 0x59	; 89
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	8f 77       	andi	r24, 0x7F	; 127
    2c20:	8c 93       	st	X, r24
		}


		switch(Config_Ptr->timer_clock)
    2c22:	e9 81       	ldd	r30, Y+1	; 0x01
    2c24:	fa 81       	ldd	r31, Y+2	; 0x02
    2c26:	85 81       	ldd	r24, Z+5	; 0x05
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	3c 83       	std	Y+4, r19	; 0x04
    2c2e:	2b 83       	std	Y+3, r18	; 0x03
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	9c 81       	ldd	r25, Y+4	; 0x04
    2c34:	84 30       	cpi	r24, 0x04	; 4
    2c36:	91 05       	cpc	r25, r1
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <Timer_init+0x216>
    2c3a:	4d c0       	rjmp	.+154    	; 0x2cd6 <Timer_init+0x2b0>
    2c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c40:	25 30       	cpi	r18, 0x05	; 5
    2c42:	31 05       	cpc	r19, r1
    2c44:	84 f4       	brge	.+32     	; 0x2c66 <Timer_init+0x240>
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	82 30       	cpi	r24, 0x02	; 2
    2c4c:	91 05       	cpc	r25, r1
    2c4e:	19 f1       	breq	.+70     	; 0x2c96 <Timer_init+0x270>
    2c50:	2b 81       	ldd	r18, Y+3	; 0x03
    2c52:	3c 81       	ldd	r19, Y+4	; 0x04
    2c54:	23 30       	cpi	r18, 0x03	; 3
    2c56:	31 05       	cpc	r19, r1
    2c58:	74 f5       	brge	.+92     	; 0x2cb6 <Timer_init+0x290>
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	91 05       	cpc	r25, r1
    2c62:	89 f0       	breq	.+34     	; 0x2c86 <Timer_init+0x260>
    2c64:	47 c0       	rjmp	.+142    	; 0x2cf4 <Timer_init+0x2ce>
    2c66:	2b 81       	ldd	r18, Y+3	; 0x03
    2c68:	3c 81       	ldd	r19, Y+4	; 0x04
    2c6a:	26 30       	cpi	r18, 0x06	; 6
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	d9 f0       	breq	.+54     	; 0x2ca6 <Timer_init+0x280>
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	86 30       	cpi	r24, 0x06	; 6
    2c76:	91 05       	cpc	r25, r1
    2c78:	b4 f1       	brlt	.+108    	; 0x2ce6 <Timer_init+0x2c0>
    2c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7e:	27 30       	cpi	r18, 0x07	; 7
    2c80:	31 05       	cpc	r19, r1
    2c82:	09 f1       	breq	.+66     	; 0x2cc6 <Timer_init+0x2a0>
    2c84:	37 c0       	rjmp	.+110    	; 0x2cf4 <Timer_init+0x2ce>
		{
		case F_CLK_PRESCALE_1:
			TCCR2 |= TIMER2_CLK_PRESCALE_1;
    2c86:	a5 e4       	ldi	r26, 0x45	; 69
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	e5 e4       	ldi	r30, 0x45	; 69
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	81 60       	ori	r24, 0x01	; 1
    2c92:	8c 93       	st	X, r24
    2c94:	2f c0       	rjmp	.+94     	; 0x2cf4 <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_8:
			TCCR2 |= TIMER2_CLK_PRESCALE_8;
    2c96:	a5 e4       	ldi	r26, 0x45	; 69
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e5 e4       	ldi	r30, 0x45	; 69
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	82 60       	ori	r24, 0x02	; 2
    2ca2:	8c 93       	st	X, r24
    2ca4:	27 c0       	rjmp	.+78     	; 0x2cf4 <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_32:
			TCCR2 |= TIMER2_CLK_PRESCALE_32;
    2ca6:	a5 e4       	ldi	r26, 0x45	; 69
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e5 e4       	ldi	r30, 0x45	; 69
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	83 60       	ori	r24, 0x03	; 3
    2cb2:	8c 93       	st	X, r24
    2cb4:	1f c0       	rjmp	.+62     	; 0x2cf4 <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_64:
			TCCR2 |= TIMER2_CLK_PRESCALE_64;
    2cb6:	a5 e4       	ldi	r26, 0x45	; 69
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	e5 e4       	ldi	r30, 0x45	; 69
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	84 60       	ori	r24, 0x04	; 4
    2cc2:	8c 93       	st	X, r24
    2cc4:	17 c0       	rjmp	.+46     	; 0x2cf4 <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_128:
			TCCR2 |= TIMER2_CLK_PRESCALE_128;
    2cc6:	a5 e4       	ldi	r26, 0x45	; 69
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e5 e4       	ldi	r30, 0x45	; 69
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	85 60       	ori	r24, 0x05	; 5
    2cd2:	8c 93       	st	X, r24
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_256:
			TCCR2 |= TIMER2_CLK_PRESCALE_256;
    2cd6:	a5 e4       	ldi	r26, 0x45	; 69
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e5 e4       	ldi	r30, 0x45	; 69
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	86 60       	ori	r24, 0x06	; 6
    2ce2:	8c 93       	st	X, r24
    2ce4:	07 c0       	rjmp	.+14     	; 0x2cf4 <Timer_init+0x2ce>
			break;
		case F_CLK_PRESCALE_1024:
			TCCR2 |= TIMER2_CLK_PRESCALE_1024;
    2ce6:	a5 e4       	ldi	r26, 0x45	; 69
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	e5 e4       	ldi	r30, 0x45	; 69
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	87 60       	ori	r24, 0x07	; 7
    2cf2:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    2cf4:	26 96       	adiw	r28, 0x06	; 6
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_ID)
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <Timer_deInit+0x6>
    2d0c:	0f 92       	push	r0
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_ID)
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	3b 83       	std	Y+3, r19	; 0x03
    2d1c:	2a 83       	std	Y+2, r18	; 0x02
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	9b 81       	ldd	r25, Y+3	; 0x03
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	91 05       	cpc	r25, r1
    2d26:	d9 f0       	breq	.+54     	; 0x2d5e <Timer_deInit+0x58>
    2d28:	2a 81       	ldd	r18, Y+2	; 0x02
    2d2a:	3b 81       	ldd	r19, Y+3	; 0x03
    2d2c:	22 30       	cpi	r18, 0x02	; 2
    2d2e:	31 05       	cpc	r19, r1
    2d30:	59 f1       	breq	.+86     	; 0x2d88 <Timer_deInit+0x82>
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	9b 81       	ldd	r25, Y+3	; 0x03
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	c1 f5       	brne	.+112    	; 0x2daa <Timer_deInit+0xa4>
	{
	case TIMER0:
		TCCR0 = 0;
    2d3a:	e3 e5       	ldi	r30, 0x53	; 83
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE0);
    2d40:	a9 e5       	ldi	r26, 0x59	; 89
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e9 e5       	ldi	r30, 0x59	; 89
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	8d 7f       	andi	r24, 0xFD	; 253
    2d4c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE0);
    2d4e:	a9 e5       	ldi	r26, 0x59	; 89
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e9 e5       	ldi	r30, 0x59	; 89
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	8e 7f       	andi	r24, 0xFE	; 254
    2d5a:	8c 93       	st	X, r24
    2d5c:	26 c0       	rjmp	.+76     	; 0x2daa <Timer_deInit+0xa4>
		break;
	case TIMER1:
		TCCR1A = 0;
    2d5e:	ef e4       	ldi	r30, 0x4F	; 79
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	10 82       	st	Z, r1
		TCCR1B = 0;
    2d64:	ee e4       	ldi	r30, 0x4E	; 78
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1);
    2d6a:	a9 e5       	ldi	r26, 0x59	; 89
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e9 e5       	ldi	r30, 0x59	; 89
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	8b 7f       	andi	r24, 0xFB	; 251
    2d76:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, OCIE1A);
    2d78:	a9 e5       	ldi	r26, 0x59	; 89
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e9 e5       	ldi	r30, 0x59	; 89
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	8f 7e       	andi	r24, 0xEF	; 239
    2d84:	8c 93       	st	X, r24
    2d86:	11 c0       	rjmp	.+34     	; 0x2daa <Timer_deInit+0xa4>
		break;
	case TIMER2:
		TCCR2 = 0;
    2d88:	e5 e4       	ldi	r30, 0x45	; 69
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2);
    2d8e:	a9 e5       	ldi	r26, 0x59	; 89
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	e9 e5       	ldi	r30, 0x59	; 89
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	8f 77       	andi	r24, 0x7F	; 127
    2d9a:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2);
    2d9c:	a9 e5       	ldi	r26, 0x59	; 89
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e9 e5       	ldi	r30, 0x59	; 89
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	8f 7b       	andi	r24, 0xBF	; 191
    2da8:	8c 93       	st	X, r24
		break;
	}
}
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <Timer_setCallBack+0x6>
    2dbc:	00 d0       	rcall	.+0      	; 0x2dbe <Timer_setCallBack+0x8>
    2dbe:	0f 92       	push	r0
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	9a 83       	std	Y+2, r25	; 0x02
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    2dc8:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timer_ID)
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	3d 83       	std	Y+5, r19	; 0x05
    2dd2:	2c 83       	std	Y+4, r18	; 0x04
    2dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd8:	81 30       	cpi	r24, 0x01	; 1
    2dda:	91 05       	cpc	r25, r1
    2ddc:	81 f0       	breq	.+32     	; 0x2dfe <Timer_setCallBack+0x48>
    2dde:	2c 81       	ldd	r18, Y+4	; 0x04
    2de0:	3d 81       	ldd	r19, Y+5	; 0x05
    2de2:	22 30       	cpi	r18, 0x02	; 2
    2de4:	31 05       	cpc	r19, r1
    2de6:	91 f0       	breq	.+36     	; 0x2e0c <Timer_setCallBack+0x56>
    2de8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dea:	9d 81       	ldd	r25, Y+5	; 0x05
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	a1 f4       	brne	.+40     	; 0x2e18 <Timer_setCallBack+0x62>
	{
	case TIMER0:
		g_timer0_ptr = a_ptr;
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	90 93 38 02 	sts	0x0238, r25
    2df8:	80 93 37 02 	sts	0x0237, r24
    2dfc:	0d c0       	rjmp	.+26     	; 0x2e18 <Timer_setCallBack+0x62>
		break;
	case TIMER1:
		g_timer1_ptr = a_ptr;
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	9a 81       	ldd	r25, Y+2	; 0x02
    2e02:	90 93 3a 02 	sts	0x023A, r25
    2e06:	80 93 39 02 	sts	0x0239, r24
    2e0a:	06 c0       	rjmp	.+12     	; 0x2e18 <Timer_setCallBack+0x62>
		break;
	case TIMER2:
		g_timer2_ptr = a_ptr;
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e10:	90 93 3c 02 	sts	0x023C, r25
    2e14:	80 93 3b 02 	sts	0x023B, r24
		break;
	}
}
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* Config_Ptr)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <UART_init+0x6>
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <UART_init+0x8>
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	9c 83       	std	Y+4, r25	; 0x04
    2e36:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2e38:	1a 82       	std	Y+2, r1	; 0x02
    2e3a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e3c:	eb e2       	ldi	r30, 0x2B	; 43
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	80 83       	st	Z, r24
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
#if UART_RX_MODE_SELECT == UART_RX_INTERRUPT_ENABLE
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
#else
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2e44:	ea e2       	ldi	r30, 0x2A	; 42
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	88 e1       	ldi	r24, 0x18	; 24
    2e4a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2e4c:	e0 e4       	ldi	r30, 0x40	; 64
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 e8       	ldi	r24, 0x80	; 128
    2e52:	80 83       	st	Z, r24

	if(Config_Ptr->bit_data == DATA_9_BIT)
    2e54:	eb 81       	ldd	r30, Y+3	; 0x03
    2e56:	fc 81       	ldd	r31, Y+4	; 0x04
    2e58:	80 81       	ld	r24, Z
    2e5a:	87 30       	cpi	r24, 0x07	; 7
    2e5c:	99 f5       	brne	.+102    	; 0x2ec4 <UART_init+0x9c>
	{
		CLEAR_BIT(UCSRC, UCSZ0);
    2e5e:	a0 e4       	ldi	r26, 0x40	; 64
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e0 e4       	ldi	r30, 0x40	; 64
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	8d 7f       	andi	r24, 0xFD	; 253
    2e6a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
    2e6c:	a0 e4       	ldi	r26, 0x40	; 64
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e0 e4       	ldi	r30, 0x40	; 64
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	8b 7f       	andi	r24, 0xFB	; 251
    2e78:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    2e7a:	aa e2       	ldi	r26, 0x2A	; 42
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	ea e2       	ldi	r30, 0x2A	; 42
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	8b 7f       	andi	r24, 0xFB	; 251
    2e86:	8c 93       	st	X, r24
		UCSRC |= (((Config_Ptr->bit_data)&0x03) << UCSZ0);
    2e88:	a0 e4       	ldi	r26, 0x40	; 64
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e0 e4       	ldi	r30, 0x40	; 64
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	28 2f       	mov	r18, r24
    2e94:	eb 81       	ldd	r30, Y+3	; 0x03
    2e96:	fc 81       	ldd	r31, Y+4	; 0x04
    2e98:	80 81       	ld	r24, Z
    2e9a:	88 2f       	mov	r24, r24
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	83 70       	andi	r24, 0x03	; 3
    2ea0:	90 70       	andi	r25, 0x00	; 0
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	82 2b       	or	r24, r18
    2ea8:	8c 93       	st	X, r24
		UCSRB |= ((GET_BIT(Config_Ptr->bit_data,2)) << UCSZ2);
    2eaa:	aa e2       	ldi	r26, 0x2A	; 42
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	ea e2       	ldi	r30, 0x2A	; 42
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	98 2f       	mov	r25, r24
    2eb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eba:	80 81       	ld	r24, Z
    2ebc:	84 70       	andi	r24, 0x04	; 4
    2ebe:	89 2b       	or	r24, r25
    2ec0:	8c 93       	st	X, r24
    2ec2:	1f c0       	rjmp	.+62     	; 0x2f02 <UART_init+0xda>
	}
	else
	{
		CLEAR_BIT(UCSRC, UCSZ0);
    2ec4:	a0 e4       	ldi	r26, 0x40	; 64
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e0 e4       	ldi	r30, 0x40	; 64
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	8d 7f       	andi	r24, 0xFD	; 253
    2ed0:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
    2ed2:	a0 e4       	ldi	r26, 0x40	; 64
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e0 e4       	ldi	r30, 0x40	; 64
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	8b 7f       	andi	r24, 0xFB	; 251
    2ede:	8c 93       	st	X, r24
		UCSRC |= (((Config_Ptr->bit_data)&0x03) << UCSZ0);
    2ee0:	a0 e4       	ldi	r26, 0x40	; 64
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e0 e4       	ldi	r30, 0x40	; 64
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	28 2f       	mov	r18, r24
    2eec:	eb 81       	ldd	r30, Y+3	; 0x03
    2eee:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef0:	80 81       	ld	r24, Z
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	83 70       	andi	r24, 0x03	; 3
    2ef8:	90 70       	andi	r25, 0x00	; 0
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	82 2b       	or	r24, r18
    2f00:	8c 93       	st	X, r24
	}

	UCSRC |= (((Config_Ptr->stop_bit)&0x01) << USBS);
    2f02:	a0 e4       	ldi	r26, 0x40	; 64
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e0 e4       	ldi	r30, 0x40	; 64
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f10:	fc 81       	ldd	r31, Y+4	; 0x04
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	88 2f       	mov	r24, r24
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	81 70       	andi	r24, 0x01	; 1
    2f1a:	90 70       	andi	r25, 0x00	; 0
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	88 0f       	add	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	82 2b       	or	r24, r18
    2f2a:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr->parity) << UPM0);
    2f2c:	a0 e4       	ldi	r26, 0x40	; 64
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	e0 e4       	ldi	r30, 0x40	; 64
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	28 2f       	mov	r18, r24
    2f38:	eb 81       	ldd	r30, Y+3	; 0x03
    2f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f3c:	81 81       	ldd	r24, Z+1	; 0x01
    2f3e:	88 2f       	mov	r24, r24
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	82 95       	swap	r24
    2f44:	92 95       	swap	r25
    2f46:	90 7f       	andi	r25, 0xF0	; 240
    2f48:	98 27       	eor	r25, r24
    2f4a:	80 7f       	andi	r24, 0xF0	; 240
    2f4c:	98 27       	eor	r25, r24
    2f4e:	82 2b       	or	r24, r18
    2f50:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2f52:	eb 81       	ldd	r30, Y+3	; 0x03
    2f54:	fc 81       	ldd	r31, Y+4	; 0x04
    2f56:	83 81       	ldd	r24, Z+3	; 0x03
    2f58:	94 81       	ldd	r25, Z+4	; 0x04
    2f5a:	cc 01       	movw	r24, r24
    2f5c:	a0 e0       	ldi	r26, 0x00	; 0
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	aa 1f       	adc	r26, r26
    2f66:	bb 1f       	adc	r27, r27
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	aa 1f       	adc	r26, r26
    2f6e:	bb 1f       	adc	r27, r27
    2f70:	88 0f       	add	r24, r24
    2f72:	99 1f       	adc	r25, r25
    2f74:	aa 1f       	adc	r26, r26
    2f76:	bb 1f       	adc	r27, r27
    2f78:	9c 01       	movw	r18, r24
    2f7a:	ad 01       	movw	r20, r26
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	92 e1       	ldi	r25, 0x12	; 18
    2f80:	aa e7       	ldi	r26, 0x7A	; 122
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	bc 01       	movw	r22, r24
    2f86:	cd 01       	movw	r24, r26
    2f88:	0e 94 6f 18 	call	0x30de	; 0x30de <__udivmodsi4>
    2f8c:	da 01       	movw	r26, r20
    2f8e:	c9 01       	movw	r24, r18
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9a 83       	std	Y+2, r25	; 0x02
    2f94:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f96:	e0 e4       	ldi	r30, 0x40	; 64
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9e:	89 2f       	mov	r24, r25
    2fa0:	99 27       	eor	r25, r25
    2fa2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2fa4:	e9 e2       	ldi	r30, 0x29	; 41
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	80 83       	st	Z, r24
}
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	0f 92       	push	r0
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2fc6:	eb e2       	ldi	r30, 0x2B	; 43
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	88 2f       	mov	r24, r24
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	80 72       	andi	r24, 0x20	; 32
    2fd2:	90 70       	andi	r25, 0x00	; 0
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	b9 f3       	breq	.-18     	; 0x2fc6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2fd8:	ec e2       	ldi	r30, 0x2C	; 44
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	80 83       	st	Z, r24
}
    2fe0:	0f 90       	pop	r0
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	 * when using interrupt mode the return acts as a flag
	 */
	return TRUE;
#else
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ff0:	eb e2       	ldi	r30, 0x2B	; 43
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	88 23       	and	r24, r24
    2ff8:	dc f7       	brge	.-10     	; 0x2ff0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2ffa:	ec e2       	ldi	r30, 0x2C	; 44
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
#endif
}
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	00 d0       	rcall	.+0      	; 0x300c <UART_sendString+0x6>
    300c:	0f 92       	push	r0
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	9b 83       	std	Y+3, r25	; 0x03
    3014:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3016:	19 82       	std	Y+1, r1	; 0x01
    3018:	0e c0       	rjmp	.+28     	; 0x3036 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	8a 81       	ldd	r24, Y+2	; 0x02
    3022:	9b 81       	ldd	r25, Y+3	; 0x03
    3024:	fc 01       	movw	r30, r24
    3026:	e2 0f       	add	r30, r18
    3028:	f3 1f       	adc	r31, r19
    302a:	80 81       	ld	r24, Z
    302c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <UART_sendByte>
		i++;
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	8f 5f       	subi	r24, 0xFF	; 255
    3034:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	9b 81       	ldd	r25, Y+3	; 0x03
    3040:	fc 01       	movw	r30, r24
    3042:	e2 0f       	add	r30, r18
    3044:	f3 1f       	adc	r31, r19
    3046:	80 81       	ld	r24, Z
    3048:	88 23       	and	r24, r24
    304a:	39 f7       	brne	.-50     	; 0x301a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <UART_receiveString>:
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
#if UART_RX_MODE_SELECT == UART_RX_INTERRUPT_ENABLE
#else
void UART_receiveString(uint8 *Str)
{
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	00 d0       	rcall	.+0      	; 0x3062 <UART_receiveString+0xa>
    3062:	0f 92       	push	r0
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	9b 83       	std	Y+3, r25	; 0x03
    306a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    306c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
    3076:	9b 81       	ldd	r25, Y+3	; 0x03
    3078:	8c 01       	movw	r16, r24
    307a:	02 0f       	add	r16, r18
    307c:	13 1f       	adc	r17, r19
    307e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <UART_recieveByte>
    3082:	f8 01       	movw	r30, r16
    3084:	80 83       	st	Z, r24
    3086:	0f c0       	rjmp	.+30     	; 0x30a6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != UART_RX_STRING_BREAK)
	{
		i++;
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	8f 5f       	subi	r24, 0xFF	; 255
    308c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	28 2f       	mov	r18, r24
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	9b 81       	ldd	r25, Y+3	; 0x03
    3098:	8c 01       	movw	r16, r24
    309a:	02 0f       	add	r16, r18
    309c:	13 1f       	adc	r17, r19
    309e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <UART_recieveByte>
    30a2:	f8 01       	movw	r30, r16
    30a4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != UART_RX_STRING_BREAK)
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	9b 81       	ldd	r25, Y+3	; 0x03
    30b0:	fc 01       	movw	r30, r24
    30b2:	e2 0f       	add	r30, r18
    30b4:	f3 1f       	adc	r31, r19
    30b6:	80 81       	ld	r24, Z
    30b8:	83 32       	cpi	r24, 0x23	; 35
    30ba:	31 f7       	brne	.-52     	; 0x3088 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	28 2f       	mov	r18, r24
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	9b 81       	ldd	r25, Y+3	; 0x03
    30c6:	fc 01       	movw	r30, r24
    30c8:	e2 0f       	add	r30, r18
    30ca:	f3 1f       	adc	r31, r19
    30cc:	10 82       	st	Z, r1
}
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	1f 91       	pop	r17
    30da:	0f 91       	pop	r16
    30dc:	08 95       	ret

000030de <__udivmodsi4>:
    30de:	a1 e2       	ldi	r26, 0x21	; 33
    30e0:	1a 2e       	mov	r1, r26
    30e2:	aa 1b       	sub	r26, r26
    30e4:	bb 1b       	sub	r27, r27
    30e6:	fd 01       	movw	r30, r26
    30e8:	0d c0       	rjmp	.+26     	; 0x3104 <__udivmodsi4_ep>

000030ea <__udivmodsi4_loop>:
    30ea:	aa 1f       	adc	r26, r26
    30ec:	bb 1f       	adc	r27, r27
    30ee:	ee 1f       	adc	r30, r30
    30f0:	ff 1f       	adc	r31, r31
    30f2:	a2 17       	cp	r26, r18
    30f4:	b3 07       	cpc	r27, r19
    30f6:	e4 07       	cpc	r30, r20
    30f8:	f5 07       	cpc	r31, r21
    30fa:	20 f0       	brcs	.+8      	; 0x3104 <__udivmodsi4_ep>
    30fc:	a2 1b       	sub	r26, r18
    30fe:	b3 0b       	sbc	r27, r19
    3100:	e4 0b       	sbc	r30, r20
    3102:	f5 0b       	sbc	r31, r21

00003104 <__udivmodsi4_ep>:
    3104:	66 1f       	adc	r22, r22
    3106:	77 1f       	adc	r23, r23
    3108:	88 1f       	adc	r24, r24
    310a:	99 1f       	adc	r25, r25
    310c:	1a 94       	dec	r1
    310e:	69 f7       	brne	.-38     	; 0x30ea <__udivmodsi4_loop>
    3110:	60 95       	com	r22
    3112:	70 95       	com	r23
    3114:	80 95       	com	r24
    3116:	90 95       	com	r25
    3118:	9b 01       	movw	r18, r22
    311a:	ac 01       	movw	r20, r24
    311c:	bd 01       	movw	r22, r26
    311e:	cf 01       	movw	r24, r30
    3120:	08 95       	ret

00003122 <__prologue_saves__>:
    3122:	2f 92       	push	r2
    3124:	3f 92       	push	r3
    3126:	4f 92       	push	r4
    3128:	5f 92       	push	r5
    312a:	6f 92       	push	r6
    312c:	7f 92       	push	r7
    312e:	8f 92       	push	r8
    3130:	9f 92       	push	r9
    3132:	af 92       	push	r10
    3134:	bf 92       	push	r11
    3136:	cf 92       	push	r12
    3138:	df 92       	push	r13
    313a:	ef 92       	push	r14
    313c:	ff 92       	push	r15
    313e:	0f 93       	push	r16
    3140:	1f 93       	push	r17
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	ca 1b       	sub	r28, r26
    314c:	db 0b       	sbc	r29, r27
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	09 94       	ijmp

0000315a <__epilogue_restores__>:
    315a:	2a 88       	ldd	r2, Y+18	; 0x12
    315c:	39 88       	ldd	r3, Y+17	; 0x11
    315e:	48 88       	ldd	r4, Y+16	; 0x10
    3160:	5f 84       	ldd	r5, Y+15	; 0x0f
    3162:	6e 84       	ldd	r6, Y+14	; 0x0e
    3164:	7d 84       	ldd	r7, Y+13	; 0x0d
    3166:	8c 84       	ldd	r8, Y+12	; 0x0c
    3168:	9b 84       	ldd	r9, Y+11	; 0x0b
    316a:	aa 84       	ldd	r10, Y+10	; 0x0a
    316c:	b9 84       	ldd	r11, Y+9	; 0x09
    316e:	c8 84       	ldd	r12, Y+8	; 0x08
    3170:	df 80       	ldd	r13, Y+7	; 0x07
    3172:	ee 80       	ldd	r14, Y+6	; 0x06
    3174:	fd 80       	ldd	r15, Y+5	; 0x05
    3176:	0c 81       	ldd	r16, Y+4	; 0x04
    3178:	1b 81       	ldd	r17, Y+3	; 0x03
    317a:	aa 81       	ldd	r26, Y+2	; 0x02
    317c:	b9 81       	ldd	r27, Y+1	; 0x01
    317e:	ce 0f       	add	r28, r30
    3180:	d1 1d       	adc	r29, r1
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	ed 01       	movw	r28, r26
    318e:	08 95       	ret

00003190 <itoa>:
    3190:	fb 01       	movw	r30, r22
    3192:	9f 01       	movw	r18, r30
    3194:	e8 94       	clt
    3196:	42 30       	cpi	r20, 0x02	; 2
    3198:	c4 f0       	brlt	.+48     	; 0x31ca <itoa+0x3a>
    319a:	45 32       	cpi	r20, 0x25	; 37
    319c:	b4 f4       	brge	.+44     	; 0x31ca <itoa+0x3a>
    319e:	4a 30       	cpi	r20, 0x0A	; 10
    31a0:	29 f4       	brne	.+10     	; 0x31ac <itoa+0x1c>
    31a2:	97 fb       	bst	r25, 7
    31a4:	1e f4       	brtc	.+6      	; 0x31ac <itoa+0x1c>
    31a6:	90 95       	com	r25
    31a8:	81 95       	neg	r24
    31aa:	9f 4f       	sbci	r25, 0xFF	; 255
    31ac:	64 2f       	mov	r22, r20
    31ae:	77 27       	eor	r23, r23
    31b0:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <__udivmodhi4>
    31b4:	80 5d       	subi	r24, 0xD0	; 208
    31b6:	8a 33       	cpi	r24, 0x3A	; 58
    31b8:	0c f0       	brlt	.+2      	; 0x31bc <itoa+0x2c>
    31ba:	89 5d       	subi	r24, 0xD9	; 217
    31bc:	81 93       	st	Z+, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	a1 f7       	brne	.-24     	; 0x31ac <itoa+0x1c>
    31c4:	16 f4       	brtc	.+4      	; 0x31ca <itoa+0x3a>
    31c6:	5d e2       	ldi	r21, 0x2D	; 45
    31c8:	51 93       	st	Z+, r21
    31ca:	10 82       	st	Z, r1
    31cc:	c9 01       	movw	r24, r18
    31ce:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <strrev>

000031d2 <strrev>:
    31d2:	dc 01       	movw	r26, r24
    31d4:	fc 01       	movw	r30, r24
    31d6:	67 2f       	mov	r22, r23
    31d8:	71 91       	ld	r23, Z+
    31da:	77 23       	and	r23, r23
    31dc:	e1 f7       	brne	.-8      	; 0x31d6 <strrev+0x4>
    31de:	32 97       	sbiw	r30, 0x02	; 2
    31e0:	04 c0       	rjmp	.+8      	; 0x31ea <strrev+0x18>
    31e2:	7c 91       	ld	r23, X
    31e4:	6d 93       	st	X+, r22
    31e6:	70 83       	st	Z, r23
    31e8:	62 91       	ld	r22, -Z
    31ea:	ae 17       	cp	r26, r30
    31ec:	bf 07       	cpc	r27, r31
    31ee:	c8 f3       	brcs	.-14     	; 0x31e2 <strrev+0x10>
    31f0:	08 95       	ret

000031f2 <__udivmodhi4>:
    31f2:	aa 1b       	sub	r26, r26
    31f4:	bb 1b       	sub	r27, r27
    31f6:	51 e1       	ldi	r21, 0x11	; 17
    31f8:	07 c0       	rjmp	.+14     	; 0x3208 <__udivmodhi4_ep>

000031fa <__udivmodhi4_loop>:
    31fa:	aa 1f       	adc	r26, r26
    31fc:	bb 1f       	adc	r27, r27
    31fe:	a6 17       	cp	r26, r22
    3200:	b7 07       	cpc	r27, r23
    3202:	10 f0       	brcs	.+4      	; 0x3208 <__udivmodhi4_ep>
    3204:	a6 1b       	sub	r26, r22
    3206:	b7 0b       	sbc	r27, r23

00003208 <__udivmodhi4_ep>:
    3208:	88 1f       	adc	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	5a 95       	dec	r21
    320e:	a9 f7       	brne	.-22     	; 0x31fa <__udivmodhi4_loop>
    3210:	80 95       	com	r24
    3212:	90 95       	com	r25
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	08 95       	ret

0000321a <_exit>:
    321a:	f8 94       	cli

0000321c <__stop_program>:
    321c:	ff cf       	rjmp	.-2      	; 0x321c <__stop_program>
